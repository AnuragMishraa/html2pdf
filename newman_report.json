{
  "collection": {
    "_": {
      "postman_id": "8d91950a-d4a0-494b-b157-923533a8e4c4",
      "exporter_id": "32153414",
      "collection_link": "https://planetary-moon-946240.postman.co/workspace/Team-Workspace~b71c68f9-be16-4953-8b0f-b19e310fc6ac/collection/32153414-8d91950a-d4a0-494b-b157-923533a8e4c4?action=share&source=collection_link&creator=32153414"
    },
    "item": [
      { 
        "id": "40add62d-bc0d-4bb1-99fa-4066a53dc200",
        "name": "Sign In",
        "item": [
          {
            "id": "0efc6d5c-b986-4116-b341-9f8f184ce808",
            "name": "Validate user should be able to login using valid credentials Copy",
            "request": {
              "url": {
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "json"
                },
                "id": "53c3940d-69e6-494f-a53d-61d92b2112c9",
                "name": "Authentication successful",
                "originalRequest": {
                  "url": {
                    "path": [
                      "signin"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": "{\n  \"id\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"access_token\": \"<string>\",\n  \"refresh_token\": \"<string>\",\n  \"last_login\": \"<string>\"\n}",
                "cookie": []
              },
              {
                "_": {
                  "postman_previewlanguage": "json"
                },
                "id": "0b604d2a-d212-4b8a-bc4c-115c0fffac92",
                "name": "Unauthorized - Invalid credentials",
                "originalRequest": {
                  "url": {
                    "path": [
                      "signin"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "status": "Unauthorized",
                "code": 401,
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": "{\n  \"message\": \"<string>\"\n}",
                "cookie": []
              },
              {
                "_": {
                  "postman_previewlanguage": "json"
                },
                "id": "dffd7f72-7b26-470f-ad1a-9c0925c16f78",
                "name": "Forbidden - Account inactive",
                "originalRequest": {
                  "url": {
                    "path": [
                      "signin"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "status": "Forbidden",
                "code": 403,
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": "{\n  \"message\": \"<string>\"\n}",
                "cookie": []
              },
              {
                "_": {
                  "postman_previewlanguage": "json"
                },
                "id": "bbd6f85c-b524-4a70-98ff-9ea445ce9c9f",
                "name": "In case of server fails to respond",
                "originalRequest": {
                  "url": {
                    "path": [
                      "signin"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "status": "Internal Server Error",
                "code": 500,
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": "{\n  \"error\": \"<string>\"\n}",
                "cookie": []
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "24bd7283-77a5-4333-82b2-e6f795fffd3b",
        "name": "Lists information of all patients' data whose state is confirmed",
        "item": [
          {
            "id": "eee65936-a59e-4af3-8a12-303b4da20e00",
            "name": "Validate list of confirmed Patient",
            "request": {
              "url": {
                "path": [
                  "get-all-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "1"
                  },
                  {
                    "key": "Limit",
                    "value": "1"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ad35424b-cdc4-4b19-b761-1fd8699f055e",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "d6b67a07-43ab-453e-9ce8-98c88ef38cde"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "06574bf6-d983-45aa-884a-91f24a2bfa91",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b01407b6-f787-4f77-aba2-60ac07b4c33a"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "ad832edf-dca9-48d9-9387-91b6cae970b2",
            "name": "Validate list of confirmed Patient not displaying without Authorization",
            "request": {
              "url": {
                "path": [
                  "get-all-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "1"
                  },
                  {
                    "key": "limit",
                    "value": "1"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c3c7ab4e-c399-4591-b557-7ec5219e1975",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "1c86fe57-7991-4e5b-9633-507d433615bb"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "baa1065c-3fe6-467a-b00a-9c1814a1aac1",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9b154596-8eac-43be-8953-50798a0e4eb7"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "ebc8daee-cc99-488b-b5aa-d4e0e5f946e8",
            "name": "Validate list of confirmed Patient not displaying to the user as token is invalid/expired.",
            "request": {
              "url": {
                "path": [
                  "get-all-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "1"
                  },
                  {
                    "key": "limit",
                    "value": "1"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "52f06659-8e54-4a4f-8e33-a1ffd15247fd",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "6bdde070-9c70-4852-9c58-632873848899"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "f020180f-2d76-4fd5-accc-5269608a19d7",
            "name": "Validate list of confirmed Patient not displaying with incorrect query data",
            "request": {
              "url": {
                "path": [
                  "get-all-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "100"
                  },
                  {
                    "key": "limit",
                    "value": "1"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c53218df-9589-465b-baec-f59fda8e4484",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "1adafd31-24d0-4cbb-9f9a-2c5f1da9dd89"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "4480da9c-88d5-448e-a0fd-d0363bf30f41",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "41f0dac9-602c-4d66-8590-1f965024aa59"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "f1c7f3ca-b6e6-473c-a8f5-0049b6375b08",
            "name": "Validate list of confirmed Patient not displaying to the user as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "get-all-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "1"
                  },
                  {
                    "key": "limit",
                    "value": "0"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d1ffeca0-bf8a-4119-9a01-304ae19d8999",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "23a3312d-af05-4b95-b597-ae9218f319f2"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "5031bdac-760c-4679-9b97-bd075b186173",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "487a9811-78db-4837-b1e3-2c7baf0fb97d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9e139528-2a05-4abb-b826-70052918f36c",
        "name": "patient file upload",
        "item": [
          {
            "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
            "name": "Validate Patient file uploaded successfully",
            "request": {
              "url": {
                "path": [
                  "patient-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8a4aacda-6079-4292-b2c2-764600c99d0b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Defined responseData before using it in the test script\r",
                    "pm.test('Status Code is valid', () => {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', () => {\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                    "});\r",
                    "\r",
                    "let response = pm.response.json();\r",
                    "\r",
                    "let p_info_task_id = response.data.id;\r",
                    "// Set the ID as an environment variable\r",
                    "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                    "\r",
                    "// Log the environment variable to the Postman console for verification\r",
                    "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                    "\r",
                    "let url = response.data.data[0].url;\r",
                    "\r",
                    "// Set the URL as an environment variable\r",
                    "pm.environment.set(\"file_url\", url);\r",
                    ""
                  ],
                  "_lastExecutionId": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
                }
              }
            ]
          },
          {
            "id": "57b71dae-bad1-449b-8ce1-999f5d50f563",
            "name": "Validate user is unable to upload multiple Patient files",
            "request": {
              "url": {
                "path": [
                  "patient-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": [
                      "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                      "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    ]
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "be91c1d6-42dd-45ce-9915-310f3db5e125",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "af575809-4075-4fa8-845b-71993dcf7706",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7fd617d6-74dc-4bc4-821a-f7dd8b5674ec"
                }
              }
            ]
          },
          {
            "id": "2f40b587-cfb2-45dd-a46c-7698ded25521",
            "name": "Validate user is unable to upload files other than txt files",
            "request": {
              "url": {
                "path": [
                  "patient-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
                }
              }
            ]
          },
          {
            "id": "1d61175a-7498-45ae-b1f7-636d755bc4e5",
            "name": "Validate user is unable to upload Patient file as user is unauthorized.",
            "request": {
              "url": {
                "path": [
                  "patient-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": []
                  }
                ]
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "24bf9cb5-1f6e-42ec-ba91-489a01cdd435",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "537b73bb-2a6c-4f95-9abd-4257121b55f0"
                }
              }
            ]
          },
          {
            "id": "f498c57e-d84b-4004-990c-eb3b7ed950f9",
            "name": "Validate user is unable to upload without a file",
            "request": {
              "url": {
                "path": [
                  "patient-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": []
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
                }
              }
            ]
          },
          {
            "id": "2303ed6a-7526-4409-b81c-b5315f2eeb14",
            "name": "Validate user is unable to upload Patient file as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "patient-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": []
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "667d9c8c-408b-420b-8a0d-fbd2cc70f9a7",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "ee78bff7-29a8-4b32-8d1d-067e68e68dcd"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "9bc26ae1-dad3-4362-a680-f91beacb9932",
        "name": "Start validation patient info",
        "item": [
          {
            "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
            "name": "Validate user is able to validate patient file successfully",
            "request": {
              "url": {
                "path": [
                  "start-validation-patient-info"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "\r",
                    "pm.test(\"Response has all required fields\", () => {\r",
                    "    pm.expect(responseData).to.have.property(\"status\");\r",
                    "    pm.expect(responseData).to.have.property(\"message\");\r",
                    "    pm.expect(responseData).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid', () => {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', () => {\r",
                    "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                    "});\r",
                    "let responseData = pm.response.json();\r",
                    "let task_id = responseData.data.task_id;\r",
                    "// Set the ID as an environment variable\r",
                    "pm.environment.set(\"task_id\",task_id);\r",
                    "\r",
                    "// Log the environment variable to the Postman console for verification\r",
                    "console.log(\"p_task_id set to:\", task_id);\r",
                    ""
                  ],
                  "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
                }
              }
            ]
          },
          {
            "id": "919b5971-e191-4365-a6da-b716abcd6688",
            "name": "Validate user is unable to validate patient file with incorrect query data",
            "request": {
              "url": {
                "path": [
                  "start-validation-patient-info"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "12345"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f1c569bb-85dc-4904-9932-b5d21240b734",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
                }
              }
            ]
          },
          {
            "id": "1e41e4b4-9060-4096-be6d-b7f7c149fe00",
            "name": "Validate user is unable to validate patient file without query data",
            "request": {
              "url": {
                "path": [
                  "start-validation-patient-info"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "d3914197-51e6-4583-be05-ff35c925bdb5"
                }
              }
            ]
          },
          {
            "id": "43c6101c-3f22-4b1f-a374-90cebb3a22b3",
            "name": "Validate user is unable to validate patient file without Authorization",
            "request": {
              "url": {
                "path": [
                  "start-validation-patient-info"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "\"12345\""
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b9743bd0-38ce-4719-92a1-007643f06409",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "af40e409-3443-4b0e-8925-14a4b6a2804e"
                }
              }
            ]
          },
          {
            "id": "9377e1c1-3728-41d1-9344-d2cd3fb85381",
            "name": "Validate user is unable to validate patient file as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "start-validation-patient-info"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "\"12345\""
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0e22a272-4507-4e8f-a52d-ade7018a5173",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "f4c41b93-ab8c-4fc8-b7bf-7160d266694f"
                }
              }
            ]
          },
          {
            "id": "a9e741bc-5e34-4168-bcd8-8f77086261e1",
            "name": "Validate user is unable to validate patient file as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "start-validation-patient-info"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "80befb9e-daf4-4e8b-8a6d-45b9f9e640e8",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "87276bf7-bbd0-409e-a6b6-c6164005b095"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fa490999-b61c-4b4e-8bf9-865a0759effc",
        "name": "patient variant file upload",
        "item": [
          {
            "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
            "name": "Validate user is able to upload variants file successfully",
            "request": {
              "url": {
                "path": [
                  "patient-variant-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
                }
              }
            ]
          },
          {
            "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
            "name": "Validate user is able to upload multiple variants file successfully",
            "request": {
              "url": {
                "path": [
                  "patient-variant-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": [
                      "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                      "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    ]
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
                }
              }
            ]
          },
          {
            "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
            "name": "Validate user is unable to upload variants file other than vcf and txt file type",
            "request": {
              "url": {
                "path": [
                  "patient-variant-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
                }
              }
            ]
          },
          {
            "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
            "name": "Validate user is unable to upload variants file without id",
            "request": {
              "url": {
                "path": [
                  "patient-variant-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": null
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": []
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
                }
              }
            ]
          },
          {
            "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
            "name": "Validate user is unable to upload without variants file",
            "request": {
              "url": {
                "path": [
                  "patient-variant-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": []
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
                }
              }
            ]
          },
          {
            "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
            "name": "Validate user is unable to upload variants file as user is unauthorized",
            "request": {
              "url": {
                "path": [
                  "patient-variant-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": []
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "45490039-a23a-483d-b1a4-93e95884481c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "711cf07a-8732-4bf7-9fb2-6380e402f068"
                }
              }
            ]
          },
          {
            "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
            "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
            "request": {
              "url": {
                "path": [
                  "patient-variant-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "371bd934-d1f0-4473-a11c-9f89945d0c21"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "94de7190-582b-4d57-8616-4d14c5535588",
        "name": "Start Validation Variants",
        "item": [
          {
            "id": "74eceb6a-0137-4694-815b-7e130020f77c",
            "name": "Validate the user is able to validate variants successfully",
            "request": {
              "url": {
                "path": [
                  "start-validation-variants",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                    "});\r",
                    "\r",
                    "let response = pm.response.json();\r",
                    "\r",
                    "let p_variant_task_id = response.data.task_id;\r",
                    "// Set the ID as an environment variable\r",
                    "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                    "\r",
                    "// Log the environment variable to the Postman console for verification\r",
                    "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                  ],
                  "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
                }
              }
            ]
          },
          {
            "id": "eea14ae4-8aec-429c-b128-4bff6b2b34a9",
            "name": "Validate the user is unable to validate variants with incorrect query data",
            "request": {
              "url": {
                "path": [
                  "start-validation-variants",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "12345"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "3fea3327-6760-43c5-96b1-ed6755d34047"
                }
              }
            ]
          },
          {
            "id": "1c6c5d8e-a2e5-4843-bf84-51e1e1e9f0c0",
            "name": "Validate the user is unable to validate variants without query data",
            "request": {
              "url": {
                "path": [
                  "start-validation-variants",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "\"12345\""
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c41d622d-acf5-4017-b650-708c1c7ce506",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
                }
              }
            ]
          },
          {
            "id": "8d61201d-b808-45fb-a111-e06c89bfb124",
            "name": "Validate the user is unable to validate variants without Authorization",
            "request": {
              "url": {
                "path": [
                  "start-validation-variants",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "153bbab0-3a6b-41e0-bc6c-f416401308fc",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "9b2e21be-7631-4986-81df-e18e0f8ee6ff"
                }
              }
            ]
          },
          {
            "id": "1e1d34dd-cb99-4a4d-9c2d-205750a40d72",
            "name": "Validate the user is unable to validate variants as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "start-validation-variants",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ceabbca5-0a2b-4ae0-bad1-7ad182f2416a",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "88df03cb-5f4a-4d46-bcaa-f8644022d584"
                }
              }
            ]
          },
          {
            "id": "74312ded-ad9e-4c85-8fb1-d98253b69dab",
            "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "start-validation-variants",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ba97a799-e064-4f1a-aee2-97ed3299cf98",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "6b8a2e8a-0c99-4c50-95d2-e6697c72c860"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f166e773-ca0c-4991-8247-a7aeb8168d3d",
        "name": "patient medical file upload",
        "item": [
          {
            "id": "dab9441d-2f8a-4b44-aa24-570c4cdad117",
            "name": "Validate user is able to upload medical files successfully",
            "request": {
              "url": {
                "path": [
                  "patient-medical-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ac326b6b-bf16-489c-99fa-8aa9f7beeb29",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "535aa12f-f860-486a-9bd8-d5d816994d66"
                }
              }
            ]
          },
          {
            "id": "bdf1d571-40b9-4262-a6b2-57bc6060792d",
            "name": "Validate user is able to upload multiple medical files successfully",
            "request": {
              "url": {
                "path": [
                  "patient-medical-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": [
                      "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                      "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    ]
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fa77ff3e-af62-42c4-ace5-845cf18cd168",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                    "});\r",
                    "let responseData = pm.response.json();\r",
                    "let p_other_task_id = responseData.task_id;\r",
                    "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                  ],
                  "_lastExecutionId": "24e9914f-70c4-4ac1-bfe7-96857d4cade3"
                }
              }
            ]
          },
          {
            "id": "c0f07e74-1fd2-41e8-bcdd-6023fe81b172",
            "name": "Validate user is unable to upload medical fileswith incorrect id",
            "request": {
              "url": {
                "path": [
                  "patient-medical-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "12345"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c3229307-a621-4f6b-ba33-c2726b0a99f5",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "185a7fba-5055-4899-8fd4-e2f0db24e22c"
                }
              }
            ]
          },
          {
            "id": "e59c68ef-dca6-48ba-8a52-665718a56e7c",
            "name": "Validate user is unable to upload medical files as user is unauthorized",
            "request": {
              "url": {
                "path": [
                  "patient-medical-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": []
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5a83efa1-296c-437f-84f1-ca121a356546",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "85ade955-fb18-4d88-b3bb-d372f8d23744"
                }
              }
            ]
          },
          {
            "id": "f6ce480e-0be1-4361-ba3e-cc86c6422043",
            "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "patient-medical-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "formdata",
                "formdata": []
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "aecdbefd-96af-43dc-aa5a-0d469b6ac74c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "e01339da-c072-4928-89f0-88a6b4722ffe"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "593fafa9-0dd5-4f0e-acda-9ac6da151f0c",
        "name": "check task status",
        "item": [
          {
            "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
            "name": "Validate user is able to check status of task successfully for Patient info",
            "request": {
              "url": {
                "path": [
                  "check-task-status",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
                }
              }
            ]
          },
          {
            "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
            "name": "Validate user is able to check status of task successfully for Patient Variant File",
            "request": {
              "url": {
                "path": [
                  "check-task-status",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
                }
              }
            ]
          },
          {
            "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
            "name": "Validate user is unable to check status as task_id is incorrect.",
            "request": {
              "url": {
                "path": [
                  "check-task-status",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
                }
              }
            ]
          },
          {
            "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
            "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
            "request": {
              "url": {
                "path": [
                  "check-task-status",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
                }
              }
            ]
          },
          {
            "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
            "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
            "request": {
              "url": {
                "path": [
                  "check-task-status",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "147a0fde-5788-4996-9619-297da9714852",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
                }
              }
            ]
          },
          {
            "id": "841a70e5-6cc2-4bd5-97ab-380582f9ed80",
            "name": "Validate user is unable to check status as the token is invalid.",
            "request": {
              "url": {
                "path": [
                  "check-task-status",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "750b10af-fa67-4ede-bbde-b20d20b45ae9",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "8b60052f-49c6-4107-a8ec-5f7671ffa546"
                }
              }
            ]
          },
          {
            "id": "3e795864-8b1b-43a7-880c-67e6a5165d9a",
            "name": "Validate user is unable check status as incorrect CRUD operation is used.",
            "request": {
              "url": {
                "path": [
                  "patient-medical-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "19b29895-3355-4b50-8294-38e3c5cf31fd",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "12247455-18ec-4f0d-a6c7-4359b0ab0ea9"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "e280a18d-2343-482f-b837-5b9c21c66a9a",
        "name": "Lists information of a Patient's data",
        "item": [
          {
            "id": "9aa20c77-2d9a-4728-a3f5-9eac377df741",
            "name": "Validate user is able to fetch patient's data successfully",
            "request": {
              "url": {
                "path": [
                  "get-patient-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "53475fe1-79ae-41a4-9740-b70dea72d28a",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Status Code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "da4ce4f8-8a4b-4a3e-8f4c-feeb6ff0f7d8"
                }
              }
            ]
          },
          {
            "id": "af174d54-ee08-4266-b011-62c643488cb3",
            "name": "Validate user is unable to fetch patient's data with incorrect query data",
            "request": {
              "url": {
                "path": [
                  "get-patient-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "12345"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "31a92968-a70e-4409-881d-932be3f453b8",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status Code is 400\", function () {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "40fce554-63cc-4e2f-900c-a825d9ca6cc6"
                }
              }
            ]
          },
          {
            "id": "998a9788-9024-4936-8696-1676176d55db",
            "name": "Validate user is unable to fetch patient's data without query data",
            "request": {
              "url": {
                "path": [
                  "get-patient-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ece6ea17-d847-4290-a73a-d4a07cf14def",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "70eea9a8-9549-4d1c-a534-995d5387d29e"
                }
              }
            ]
          },
          {
            "id": "8f57385b-c484-4a66-8c85-197b708cf2f7",
            "name": "Validate user is unable to fetch patient's data without Authorization",
            "request": {
              "url": {
                "path": [
                  "get-patient-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3d759a23-cf20-40b6-87d5-7f00c131f23a",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "6d3139dd-ac5f-4068-80bf-a6c3f2dfaaf0"
                }
              }
            ]
          },
          {
            "id": "f736b84e-a977-493e-ae56-dfff50137950",
            "name": "Validate user is unable to fetch patient's data with invalid/expired token",
            "request": {
              "url": {
                "path": [
                  "get-patient-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9b0cd401-526c-4c8c-9718-656667ffa9f1",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "46e0b6f0-8e52-45ab-90bb-da46bf45fda3"
                }
              }
            ]
          },
          {
            "id": "3a682495-7451-4a86-baf2-5532a895c757",
            "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "get-patient-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f4b36e86-aa58-4a30-a766-f0376256a6dd",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "5a7f13d1-111d-4d05-8ac4-5aaf764f2049"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ad358ce3-a580-441b-a975-b1fd2df65ea1",
        "name": "Updates the information of Patient's data",
        "item": [
          {
            "id": "339adc5a-80ea-4124-9020-42483e17fa87",
            "name": "Validate user is able to check patient id successfully",
            "request": {
              "url": {
                "path": [
                  "check-patient-id",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "387a6024-b9fa-4390-8a02-48742c43d7de",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let patientId = \"patient_\" + new Date().getTime();\r",
                    "\r",
                    "// Set the environment variable\r",
                    "pm.environment.set(\"patient_id\", patientId);\r",
                    "\r",
                    "console.log(\"Environment Patient ID set to:\", patientId);\r",
                    "\r",
                    "function getRandomString(length) {\r",
                    "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                    "    let result = '';\r",
                    "    for (let i = 0; i < length; i++) {\r",
                    "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                    "    }\r",
                    "    return result;\r",
                    "}\r",
                    "\r",
                    "// Generate a unique name using a random string\r",
                    "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                    "pm.environment.set(\"name\", name);"
                  ],
                  "_lastExecutionId": "19038ca6-92b2-44ee-a227-ddc8c78f46a6"
                }
              }
            ]
          },
          {
            "id": "6fb6a935-5173-4764-9d5e-52bd11e23b60",
            "name": "Validate user is able to update patient's information successfully",
            "request": {
              "url": {
                "path": [
                  "update-patient-details",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "id",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"id\":\"{{p_info_task_id}}\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 90,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "c46d4d71-c1a7-4067-a607-624057480207"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "54d95371-1a06-41a0-83a9-8f00cc8b7ab5",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a889c15-b4e3-4b3f-af22-f591d3bf9284"
                }
              }
            ]
          },
          {
            "id": "738c694e-a5fc-4042-861e-2054c3a97873",
            "name": "Validate user is unable to update patient's information with missing required field in the body",
            "request": {
              "url": {
                "path": [
                  "update-patient-details",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "02173199-e967-46fb-9ced-a3b4d6f13185",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "e83118b8-cd78-4922-9637-47ff6e63c5ce"
                }
              }
            ]
          },
          {
            "id": "2f5557d9-183a-4c88-a132-872dcffa9de1",
            "name": "Validate user is unable to update patient's information without Authorization",
            "request": {
              "url": {
                "path": [
                  "update-patient-details",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a684acb1-0e5a-43d1-a114-17c61bf306aa",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "9412d997-46db-40ea-89f6-01ff197e58a1"
                }
              }
            ]
          },
          {
            "id": "81cf2a86-3792-449d-b688-86599c8c44fc",
            "name": "Validate user is unable to update patient's information as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "update-patient-details",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ecd80db7-3749-4821-a4e9-6b6834340a19",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "fb29d8de-49f5-4716-aff6-93b063e8afc7"
                }
              }
            ]
          },
          {
            "id": "8f4a2de9-5bbb-4533-afb0-63abdb767018",
            "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "update-patient-details",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "955a99aa-cb51-4229-95e2-ecea73eefc88",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "388ac42d-9224-412c-870e-69be9596daed"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "51a3edbd-57a9-48d5-abb2-9bc2ddfab130",
        "name": "Check Patient ID",
        "item": [
          {
            "id": "9047f605-e39e-48bc-b481-733e200ae0c4",
            "name": "Validate user is able to check patient id successfully(true)",
            "request": {
              "url": {
                "path": [
                  "check-patient-id",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "591b247b-33e9-45e6-adc4-494d829459db"
                }
              }
            ]
          },
          {
            "id": "47c4fd42-4015-44a2-89f3-5e36011dc7d3",
            "name": "Validate user is unable to check patient id as patient_id is missing in the body",
            "request": {
              "url": {
                "path": [
                  "check-patient-id",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a3f8a478-aebe-434e-ab7d-efa6812fa912",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "875b3af8-d7d9-4b40-95a5-2ecff51761c4"
                }
              }
            ]
          },
          {
            "id": "bb61fb65-f434-4555-b2eb-ef19fe05ef22",
            "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
            "request": {
              "url": {
                "path": [
                  "check-patient-id",
                  ""
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"patient_id\": \"K3456789\"\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3c91aec0-82eb-4432-b9c2-eadc555bbc68",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "68f27bde-5b75-4b43-8ab0-02c6162c7bdd"
                }
              }
            ]
          },
          {
            "id": "c0e0dd77-0d83-4b26-8d11-c95148642523",
            "name": "Validate user is unable to check patient id without authorization",
            "request": {
              "url": {
                "path": [
                  "check-patient-id",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "caa2031d-0f80-4e05-b038-db65c61a60a5",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "406649f4-d93b-425e-a98a-a8e349b22e53"
                }
              }
            ]
          },
          {
            "id": "023a7ff0-5d88-4a4e-b122-bf458131a558",
            "name": "Validate user is unable to check patient id as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "check-patient-id",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "62a6184e-f7d7-48b3-b5d6-7b081164abc5",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "ce134a7a-ea50-46d5-93c2-9157d6ced606"
                }
              }
            ]
          },
          {
            "id": "a56cbfeb-7577-46e9-a899-961839147b3a",
            "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "check-patient-id",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f0619c91-95ef-44a9-ad10-08bddb414ba3",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "dd21d57c-186a-44be-b21c-a7f68e08f203"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "5c786be3-0a8c-4b82-90e7-e6240cd8f7d7",
        "name": "Search patients",
        "item": [
          {
            "id": "f16ecb25-9ecf-47b3-93dc-a0dedf9c14a8",
            "name": "Validate user is able to search patients successfully",
            "request": {
              "url": {
                "path": [
                  "search-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "keyword",
                    "value": "{{patient_id}}"
                  },
                  {
                    "key": "page",
                    "value": "1"
                  },
                  {
                    "key": "limit",
                    "value": "10"
                  },
                  {
                    "disabled": true,
                    "key": "sort_field",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "key": "sort_by",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "47594730-b3d5-4cb0-aa6f-992b90580732"
                }
              }
            ]
          },
          {
            "id": "7eedc926-7fad-4199-9d7a-2462ee8a6822",
            "name": "Validate user is able to search patients if optional parameters are missing",
            "request": {
              "url": {
                "path": [
                  "search-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "key": "sort_field",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "key": "sort_by",
                    "value": ""
                  },
                  {
                    "key": "keyword",
                    "value": "{{patient_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "74aa99e9-4048-4506-9146-e638aed5c9ac"
                }
              }
            ]
          },
          {
            "id": "46f162b1-5947-4184-a009-25ae39339b52",
            "name": "Validate user is unable to search patients as required parameter is missing",
            "request": {
              "url": {
                "path": [
                  "search-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "keyword",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "key": "limit",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "sort_field",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "sort_by",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "page",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7fbb2e99-dba4-49c0-b52b-013f44204c31",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "a16bccef-d2b8-4b2a-b465-f55dd723d951"
                }
              }
            ]
          },
          {
            "id": "79d7ef39-1874-4479-a790-a3f0262eece1",
            "name": "Validate user is unable to search patients without Authorization",
            "request": {
              "url": {
                "path": [
                  "search-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "keyword",
                    "value": "{{patient_id}}"
                  },
                  {
                    "disabled": true,
                    "key": "limit",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "sort_field",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "sort_by",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "page",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f956a5d7-ec5a-40e9-9cef-3076f8c43808",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "24c52c84-bf48-4c9e-b6dd-7e903b8bcf6c"
                }
              }
            ]
          },
          {
            "id": "7bd7370d-95b9-4acb-b8ca-793bfbebca88",
            "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "search-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "keyword",
                    "value": "{{patient_id}}"
                  },
                  {
                    "disabled": true,
                    "key": "limit",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "sort_field",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "sort_by",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "page",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "956dc782-3cbe-4053-8f4d-50256ccddd51",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "b8ec6bce-dbb3-480a-94f4-a1f785684fa4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "64be51c1-b2f9-444b-beb0-76b78ba367bf",
        "name": "Cancel patient flow",
        "item": [
          {
            "id": "aecc5091-5aea-4217-a813-d949a407a401",
            "name": "Validate user is able to cancel patient flow successfully",
            "request": {
              "url": {
                "path": [
                  "cancel-patient-flow"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "42292597-18f7-43dd-8a5d-590c7084f79b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Cancellation successful\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
                }
              }
            ]
          },
          {
            "id": "1b2d5a6c-e13e-4252-b2fb-869426c29cdc",
            "name": "Validate user is unable to cancel patient flow as required parameter is missing",
            "request": {
              "url": {
                "path": [
                  "cancel-patient-flow"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e5d99f95-62f1-4a02-94c6-dde3ab9e0fbb",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "f20ffbe6-aafa-4a26-8f00-91b4d46fce04"
                }
              }
            ]
          },
          {
            "id": "152c59fa-c48a-425c-a5a8-e0e1f5381dc7",
            "name": "Validate user is unable to cancel patient flow without Authorization",
            "request": {
              "url": {
                "path": [
                  "cancel-patient-flow"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4a615609-311c-464c-b25b-552a5280d3c2",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "6e92fb29-e3ac-4f37-b8e0-5ff201640dbb"
                }
              }
            ]
          },
          {
            "id": "9f66e43b-7718-4c08-b6b0-6ceeff23fa07",
            "name": "Validate user is unable to cancel patient flow as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "cancel-patient-flow"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "103550ce-f8b1-4f59-9c5d-517a98c9a741",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "07280de3-1f90-482b-b0f6-1a06f17a43af"
                }
              }
            ]
          },
          {
            "id": "28feff29-728e-415d-bbf9-abb71c435e28",
            "name": "Validate user is unable to cancel patient flow as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "cancel-patient-flow"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bceb5a5c-2b93-4d81-862c-0022994ee72a",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "0155b274-cc30-4d4f-afaa-120820afbb54"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5171d9cd-76d8-4f9d-a519-01faa75793b6",
        "name": "Get current user task info",
        "item": [
          {
            "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
            "name": "Validate user is able to get current user task info successfully",
            "request": {
              "url": {
                "path": [
                  "get-curent-user-task-info"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "id",
                    "value": "{{task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
                }
              }
            ]
          },
          {
            "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
            "name": "Validate user is unable to get current user task info without authorization",
            "request": {
              "url": {
                "path": [
                  "get-curent-user-task-info"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
                }
              }
            ]
          },
          {
            "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
            "name": "Validate user is unable to get current user task info as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "get-curent-user-task-info"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
                }
              }
            ]
          },
          {
            "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
            "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "get-curent-user-task-info"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d953cf86-aee6-4066-8833-299833647bae",
        "name": "Start variant processing",
        "item": [
          {
            "id": "cfafe81a-21aa-4306-aac0-214c555aed73",
            "name": "Validate user is able to start variant processing successfully",
            "request": {
              "url": {
                "path": [
                  "start-variant-processing"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
                }
              }
            ]
          },
          {
            "id": "9ccbecf8-9832-4511-b0bd-9418d9cccc98",
            "name": "Validate user is unable to start variant processing as required parameter is missing",
            "request": {
              "url": {
                "path": [
                  "start-variant-processing"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "\"12345\""
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "40bf9df3-7815-4a46-8eb7-e2517fec8dd1",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "92d82f68-7863-4708-a979-b09c7c33301d"
                }
              }
            ]
          },
          {
            "id": "73edec2d-eb86-4c80-8ea7-3b3cd3c093a3",
            "name": "Validate user is unable to start variant processing without Authorization",
            "request": {
              "url": {
                "path": [
                  "start-variant-processing"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ceacdfa2-1aaf-4e31-af08-9019654add44",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "79a0f4b1-cbc0-4a95-952b-54992f6c3d8e"
                }
              }
            ]
          },
          {
            "id": "74592aa0-a71c-4bcc-ba3f-fd00ced68751",
            "name": "Validate user is unable to start variant processing as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "start-variant-processing"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "38d6c22d-f4e1-4e05-9a36-6c306582a978",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "46ffc7cf-1067-45c0-af66-99d67c13f742"
                }
              }
            ]
          },
          {
            "id": "48d1013f-25ad-419a-b103-e4ae9b462c33",
            "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "start-variant-processing"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c1c1efe4-60d6-4c48-813f-9cc0691043e5",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "8abc00bc-b2ed-48b7-a8b9-260525adfa26"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "29b5f44f-6467-418b-8709-83e00450b300",
        "name": "Patient demograph dropdown",
        "item": [
          {
            "id": "638dbcfd-9c0d-4f8f-82b1-5ffda2e6031d",
            "name": "Validate user is able to display patient demograph dropdown successfully",
            "request": {
              "url": {
                "path": [
                  "patient-demograph-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "tmb"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "02824625-d2af-436e-86cd-ea0421175fb3",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Parse the JSON response\r",
                    "let response = pm.response.json();\r",
                    "\r",
                    "// Expected array elements\r",
                    "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                    "\r",
                    "// Validate the response is an array\r",
                    "pm.test(\"Response is an array\", function () {\r",
                    "    pm.expect(response).to.be.an('array');\r",
                    "});\r",
                    "\r",
                    "// Validate the response contains all expected elements\r",
                    "pm.test(\"Response contains all expected elements\", function () {\r",
                    "    expectedElements.forEach(function(element) {\r",
                    "        pm.expect(response).to.include(element);\r",
                    "    });\r",
                    "});\r",
                    "\r",
                    "// Validate the response does not contain any unexpected elements\r",
                    "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                    "    response.forEach(function(element) {\r",
                    "        pm.expect(expectedElements).to.include(element);\r",
                    "    });\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "c9d3752a-6bbf-449a-a312-d47670ff34ec"
                }
              }
            ]
          },
          {
            "id": "0a26db68-b700-4ee5-ab77-201e5510771d",
            "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
            "request": {
              "url": {
                "path": [
                  "patient-demograph-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8233d493-1ba3-4eeb-89da-b6bbe8eced0b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "c0a380c3-54ef-4661-93bd-9b55e7c539f4"
                }
              }
            ]
          },
          {
            "id": "91c518e1-2a78-45e7-8857-bfe1a7335bb9",
            "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
            "request": {
              "url": {
                "path": [
                  "patient-demograph-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "\"12345\""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ce88703f-25cf-4337-9791-990b129318e8",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "feb22e69-40bb-4b92-bc35-f2beed02ba97"
                }
              }
            ]
          },
          {
            "id": "b1403256-f03a-49a2-ac29-ce3890ef6753",
            "name": "Validate user is unable to display patient demograph dropdown without Authorization",
            "request": {
              "url": {
                "path": [
                  "patient-demograph-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "tmb"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "483b12e9-3f56-4843-ba66-602654185186",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "e72721ac-d36c-42df-9ce0-9c90dacd4a6d"
                }
              }
            ]
          },
          {
            "id": "6b386dd2-2aff-4f9c-a01d-deaa9c1729c2",
            "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "patient-demograph-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "tmb"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8f482f6a-8f50-4333-9cbf-6169b97efa5b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "bc73113d-9612-4fd2-b1b9-f7506e7f4369"
                }
              }
            ]
          },
          {
            "id": "94abf27c-bd62-4a86-afa4-4e845339adce",
            "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "patient-demograph-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "tmb"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ae39226e-ba0b-4fb2-ad63-2d215ac7e88e",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "555fa6b4-3216-4e47-87bc-3eb02c731b1f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8c25fc63-3944-4a6e-b640-ffafe9ea715e",
        "name": "Sub tumor dropdown",
        "item": [
          {
            "id": "53a567dc-6e50-4af8-bd1b-8b7ee1ddaae7",
            "name": "Validate user is able to display sub tumor type dropdown successfully",
            "request": {
              "url": {
                "path": [
                  "sub-tumor-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "lung_cancer"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2ca1fcd3-77d8-4f36-a5b3-a4ff438e44aa",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Parse the JSON response\r",
                    "let response = pm.response.json();\r",
                    "\r",
                    "// Expected array elements\r",
                    "let expectedElements = [\r",
                    "    \"Small Cell Lung Cancer\",\r",
                    "    \"Non-Small Cell Lung Cancer\",\r",
                    "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                    "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                    "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                    "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                    "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                    "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                    "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                    "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                    "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                    "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                    "    \"Lung Carcinoid (LUCA)\",\r",
                    "    \"Small Cell Lung Cancer (SCLC)\",\r",
                    "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                    "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                    "    \"Lung Adenocarcinoma (LUAD)\",\r",
                    "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                    "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                    "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                    "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                    "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                    "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                    "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                    "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                    "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                    "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                    "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                    "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                    "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                    "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                    "];\r",
                    "\r",
                    "// Validate the response is an array\r",
                    "pm.test(\"Response is an array\", function () {\r",
                    "    pm.expect(response).to.be.an('array');\r",
                    "});\r",
                    "\r",
                    "// Validate the response contains all expected elements\r",
                    "pm.test(\"Response contains all expected elements\", function () {\r",
                    "    expectedElements.forEach(function(element) {\r",
                    "        pm.expect(response).to.include(element);\r",
                    "    });\r",
                    "});\r",
                    "\r",
                    "// Validate the response does not contain any unexpected elements\r",
                    "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                    "    response.forEach(function(element) {\r",
                    "        pm.expect(expectedElements).to.include(element);\r",
                    "    });\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "b8317efb-ca38-46bc-8ce6-44acc2e509de"
                }
              }
            ]
          },
          {
            "id": "d5dda25d-fc42-49c4-88a1-5dfdd1642951",
            "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
            "request": {
              "url": {
                "path": [
                  "sub-tumor-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "546f3157-a823-4261-bccf-a62f1d99b50b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "815a7e65-bc4e-43a3-950a-636040770890"
                }
              }
            ]
          },
          {
            "id": "ad28aa72-bbe9-4de8-a8bb-ff85e206689b",
            "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
            "request": {
              "url": {
                "path": [
                  "sub-tumor-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "\"12345\""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "92b8ed41-250b-41ce-9079-4caf87618752",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "cb0be9fe-b9fa-47ac-a0e1-7c1b632aed5c"
                }
              }
            ]
          },
          {
            "id": "32efb8d8-2723-48b0-a0ed-adddac71ca78",
            "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
            "request": {
              "url": {
                "path": [
                  "sub-tumor-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "lung_cancer"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "20181b18-8498-4dda-beac-113a2dd11f10",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "1818d72f-61c8-47bd-aacc-2c3ccee22292"
                }
              }
            ]
          },
          {
            "id": "e35fa05e-644b-43d2-8cb1-f2d3b03d8d3b",
            "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "sub-tumor-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "lung_cancer"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4550505e-fae1-4552-b4c6-bff9c6d8634c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "ab5acd98-065e-48ca-90bd-8c89a5b0df5a"
                }
              }
            ]
          },
          {
            "id": "16654890-e93d-4e45-a2b3-9c29aac7a92f",
            "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "sub-tumor-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "{{key}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b3a15f54-852c-42c3-b8d0-b91a9ca32020",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "972decf7-f957-4c21-b206-01cc3022ec59"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "55e497ba-eb6f-45e6-bbf1-43367ba79ad3",
        "name": "Get patient file details",
        "item": [
          {
            "id": "f3e3ac14-e788-4c13-8123-733beba5a850",
            "name": "Validate user is able to get patient file details successfully",
            "request": {
              "url": {
                "path": [
                  "get-patient-file-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "2d6292b4-9de5-439d-9365-b5161373863b"
                }
              }
            ]
          },
          {
            "id": "620fcdcd-0430-4126-ba4e-064960075eee",
            "name": "Validate user is unable to get patient file details with missing required parameter",
            "request": {
              "url": {
                "path": [
                  "get-patient-file-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "\"\""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "009bf090-c640-4e53-a765-34a5619705a2",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "a0bb17a5-a6fd-4634-9649-751527b9034f"
                }
              }
            ]
          },
          {
            "id": "161d83ca-56f2-4a8e-9871-4042d477cc39",
            "name": "Validate user is unable to get patient file details with incorrect query parameter",
            "request": {
              "url": {
                "path": [
                  "get-patient-file-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "\"12345\""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7e44b52f-de0e-4bc1-89ef-f9704f9145c4",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "9bb4d72d-1022-4830-9338-850e2bf72721"
                }
              }
            ]
          },
          {
            "id": "6bf985fa-ce94-4999-847f-e3c44563bf48",
            "name": "Validate user is unable to get patient file details without Authorization",
            "request": {
              "url": {
                "path": [
                  "get-patient-file-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d7e3889b-583e-4b3e-b122-e6f4b34fcbf5",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "3554c22b-002b-4946-8dbe-7e79cf2354ae"
                }
              }
            ]
          },
          {
            "id": "5590f9d7-c30d-4dfe-8710-9207e69bb799",
            "name": "Validate user is unable to get patient file details as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "get-patient-file-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "07fc5e38-e268-4801-9cef-c13daad40d21",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "53b34036-a8be-43e2-8b71-e75e41ba065f"
                }
              }
            ]
          },
          {
            "id": "38dfc11f-00f6-4826-9dfd-08e8d0ce831f",
            "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "get-patient-file-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{uid}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a786fb84-6150-413c-a219-36d3c46783b7",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "9a644f40-7ed6-4278-8d6d-4adf8a5f6731"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b4ebf5ad-dab6-4013-b5eb-28e0a61b1f0e",
        "name": "Remove uploaded files",
        "item": [
          {
            "id": "5fc43fb9-13e7-4713-92fa-2700db894d2c",
            "name": "validate user should be able to remove uploaded files successfully",
            "request": {
              "url": {
                "path": [
                  "remove-uploaded-files"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6ba7d4ed-620b-4978-9ae2-8c67e1ae2cdb",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 200\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(200);\r",
                    "});\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Files removed successfully\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "51bf9136-50d7-485b-af93-f394344cee6a"
                }
              }
            ]
          },
          {
            "id": "a454de77-a235-4c2c-983a-39290e086895",
            "name": "validate user should not be able to remove uploaded files if already removed",
            "request": {
              "url": {
                "path": [
                  "remove-uploaded-files"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3253a283-f7b4-4078-869d-a36b8c40409b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 400\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(400);\r",
                    "});\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "989acf2a-251e-4da4-90c3-6c06cb5bb134"
                }
              }
            ]
          },
          {
            "id": "9220a91e-dbf7-48e0-b32e-2ecbe6551898",
            "name": "validate user should not be able to remove uploaded files without incorrect file path",
            "request": {
              "url": {
                "path": [
                  "remove-uploaded-files"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"file_path\": \"\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c371755e-9a97-4600-bef2-f2d7b48a5e51",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 400\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(400);\r",
                    "});\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "ce4fd8e6-647b-4697-8e59-2641e6e6fb0f"
                }
              }
            ]
          },
          {
            "id": "fb942ac6-874d-421a-b425-321732d96c57",
            "name": "validate user should not be able to remove uploaded files without authorization",
            "request": {
              "url": {
                "path": [
                  "remove-uploaded-files"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "229ab736-61d8-4ec6-858d-9435506bf1c9",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 401\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(401);\r",
                    "});\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "3d1fade1-d1c8-4b47-a55d-68c1c6df474e"
                }
              }
            ]
          },
          {
            "id": "31118503-b23b-4950-9c93-ad16a1030ba2",
            "name": "validate user should not be able to remove uploaded files with incorrect token",
            "request": {
              "url": {
                "path": [
                  "remove-uploaded-files"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI4M2Q1MjkzNS1hN2RjLTQ4MzYtYmMxYS0yMTY2MWU5YzE0NGQiLCJldmVudF9pZCI6IjliNTkxZTVlLTUxOTUtNGI4Mi1hY2YzLTI3OTllNDZjMDI1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzMTE1NzIsImV4cCI6MTcxODMxNTE3MiwiaWF0IjoxNzE4MzExNTcyLCJqdGkiOiJlMDI3YTNmMS03YzhmLTQ5YjUtYTBhOS1iZThhY2RhZDc4NGEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.hMPOngVxdfUdxzwbcgJjK-2tDFWrLi3gBFQx36qhsULRDGzMda6z4uXDtQEtBdmLRjZyjzoUbr4QlXPMNLetGzk-xTXacB0a4bE24yt4wJ8q2ZaMBDojsykjjyHsB5LpLjIjOMI0pb9YkA7fakWQ_rRkUYVIgRExZfLFh4LmPSPJaEfEv54e_BXz5ojX2KtcLBG_GqTOa-oMRJnzQDF-jM5-gruMZtLCmrDKH2u46bRaKCyJIXXWlEfSyGT5t7PZB8ymp2wFeuZdf0of2CgYXSXFecuwk1T4lmG4BiOBtLcDS9GUy0W9j4iltOSDmulbcAxAEoGbutupjeyJo7l",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d665843b-05c0-4250-a137-05d6c8680651",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 401\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(401);\r",
                    "});\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "2ebbdce0-7382-4acc-8b9d-ec0500963aa6"
                }
              }
            ]
          },
          {
            "id": "1e6f57fa-37a9-46c4-8603-d29aa0757aef",
            "name": "validate user should not be able to remove uploaded files with incorrect CRUD operation",
            "request": {
              "url": {
                "path": [
                  "remove-uploaded-files"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8531bec2-c034-40b3-9525-8dc5bde50004",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 405\", function () {\r",
                    "    pm.expect(pm.response.code).to.equal(405);\r",
                    "});\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "54a8ac73-bcec-4925-bb9c-82d40d8d2c43"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "2152d56b-1f91-447a-b2ae-737b8cb48421",
        "name": "Deletes the information of Patient's data",
        "item": [
          {
            "id": "d23c770c-245f-41c0-9324-21a2117fe336",
            "name": "Validate user is able to delete Patient's data successfully",
            "request": {
              "url": {
                "path": [
                  "delete-patient",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ab81cd1c-ac92-4335-8bbd-6db4c7435a02",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient deleted successfully\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "36726ce7-8b77-48f3-9953-5f056f34c10b"
                }
              }
            ]
          },
          {
            "id": "5a5c5e87-10d8-47b2-837f-8abdf7a3a9f4",
            "name": "Validate user is not able to delete Patient's data if already deleted.",
            "request": {
              "url": {
                "path": [
                  "delete-patient",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d4cdbb09-2eae-4220-a330-3f4d98e9e6ff",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "05c70fb3-4b28-4d81-8373-72f2f0f1546d"
                }
              }
            ]
          },
          {
            "id": "93b156b3-5440-404f-af67-7d4972b7a946",
            "name": "Validate user is unable to delete Patient's data with incorrect query data",
            "request": {
              "url": {
                "path": [
                  "delete-patient",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "12345"
                  }
                ],
                "variable": []
              },
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f9642083-43b2-4e1f-aa35-a64b1be4a35d",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "bf5bdfe5-6cac-47de-a131-ee0cd78fb5b5"
                }
              }
            ]
          },
          {
            "id": "f1db8312-6013-42a9-916b-f19a2dadb6b4",
            "name": "Validate user is unable to delete Patient's data without Authorization",
            "request": {
              "url": {
                "path": [
                  "delete-patient",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "73e07a7a-4a5f-4f4f-84b9-2b401dcc64b8",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "f90ea6ee-c6ac-4839-bee9-b454358bfc13"
                }
              }
            ]
          },
          {
            "id": "4c1e823b-a22d-4a1f-b368-e4e2f76876fd",
            "name": "Validate user is unable to delete Patient's data as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "delete-patient",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bcbcaca8-de5f-4423-a911-d180257ebc54",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "4d39ccab-8244-4f5f-9300-ee525c4e8be1"
                }
              }
            ]
          },
          {
            "id": "fd4e77bc-bb4f-4ca3-909b-9c611eb1aa3e",
            "name": "Validate user is unable to delete Patient's data as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "delete-patient",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1f859699-4e10-4391-a113-e43f6b1f174a",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "78a6b668-f1c0-48a1-b16f-bb14c3e32730"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "8d91950a-d4a0-494b-b157-923533a8e4c4",
      "name": "Patient Service",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2024-06-13T21:20:14.019Z",
      "postman_exported_using": "Postman/11.1.25"
    },
    "id": "31a12bec-5eff-4e5c-969b-554cbb3dd5f4",
    "name": "OncoConnect",
    "values": [
      {
        "type": "any",
        "value": "http://3.137.2.183:8000",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "lukasz.ryley@floodouts.com",
        "key": "fakemail_address"
      },
      {
        "type": "any",
        "value": "testuser606588@yopmail.com",
        "key": "temporary_email"
      },
      {
        "type": "any",
        "value": "",
        "key": "email_username"
      },
      {
        "type": "any",
        "value": "",
        "key": "email_domain"
      },
      {
        "type": "any",
        "value": "072455",
        "key": "reset_otp"
      },
      {
        "type": "any",
        "value": "",
        "key": "otp_ready"
      },
      {
        "type": "any",
        "value": "",
        "key": "bearer_token"
      },
      {
        "type": "any",
        "value": "",
        "key": "refresh_token"
      },
      {
        "type": "any",
        "value": "valafab314@cmheia.com",
        "key": "mailinator_email"
      },
      {
        "type": "any",
        "value": "http://3.137.2.183:8001",
        "key": "baseUrl_patient_service"
      },
      {
        "type": "any",
        "value": "",
        "key": "p_info_task_id"
      },
      {
        "type": "any",
        "value": "f1462e5d-5fd6-4907-ad9f-1cbb61e7d63b",
        "key": "uid"
      },
      {
        "type": "any",
        "value": "",
        "key": "task_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "p_variant_task_id"
      },
      {
        "type": "any",
        "value": "patient_1718334833174",
        "key": "patient_id"
      },
      {
        "type": "any",
        "value": "Name_qATMACut_1718334833176",
        "key": "name"
      },
      {
        "type": "any",
        "value": "",
        "key": "file_url"
      },
      {
        "type": "any",
        "value": null,
        "key": "p_other_task_id"
      }
    ]
  },
  "globals": {
    "id": "d5decd0a-a2e7-4367-af8b-0093aeaa4f84",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 110,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 116,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 110,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 110,
        "pending": 0,
        "failed": 1
      },
      "tests": {
        "total": 110,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 259,
        "pending": 0,
        "failed": 154
      },
      "testScripts": {
        "total": 109,
        "pending": 0,
        "failed": 3
      },
      "prerequestScripts": {
        "total": 7,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 452.3000000000001,
      "responseMin": 263,
      "responseMax": 940,
      "responseSd": 183.14795558881804,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1718334803697,
      "completed": 1718334861948
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 110,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c8b97326-7128-446a-8713-a961bfdb5195",
          "httpRequestId": "0f79c477-65d0-4c1b-b209-0f235a724d10"
        },
        "item": {
          "id": "0efc6d5c-b986-4116-b341-9f8f184ce808",
          "name": "Validate user should be able to login using valid credentials Copy",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "53c3940d-69e6-494f-a53d-61d92b2112c9",
              "name": "Authentication successful",
              "originalRequest": {
                "url": {
                  "path": [
                    "signin"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"access_token\": \"<string>\",\n  \"refresh_token\": \"<string>\",\n  \"last_login\": \"<string>\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "0b604d2a-d212-4b8a-bc4c-115c0fffac92",
              "name": "Unauthorized - Invalid credentials",
              "originalRequest": {
                "url": {
                  "path": [
                    "signin"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"message\": \"<string>\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "dffd7f72-7b26-470f-ad1a-9c0925c16f78",
              "name": "Forbidden - Account inactive",
              "originalRequest": {
                "url": {
                  "path": [
                    "signin"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"message\": \"<string>\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "bbd6f85c-b524-4a70-98ff-9ea445ce9c9f",
              "name": "In case of server fails to respond",
              "originalRequest": {
                "url": {
                  "path": [
                    "signin"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"error\": \"<string>\"\n}",
              "cookie": []
            }
          ],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "id": "0efc6d5c-b986-4116-b341-9f8f184ce808",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "7d31e919-7928-4523-87ac-0ddf771d429e",
          "length": 110,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "97c7b299-2688-4447-a60b-5091e55cf9cf"
        },
        "item": {
          "id": "eee65936-a59e-4af3-8a12-303b4da20e00",
          "name": "Validate list of confirmed Patient",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "Limit",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad35424b-cdc4-4b19-b761-1fd8699f055e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "d6b67a07-43ab-453e-9ce8-98c88ef38cde"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "06574bf6-d983-45aa-884a-91f24a2bfa91",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "b01407b6-f787-4f77-aba2-60ac07b4c33a"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-all-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "Limit",
                "value": "1"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "09fe9b11-e6ba-4872-bdbc-72174f9746e3",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "0a579a5c-c5f8-48c3-9869-410c52b94465",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:23 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 663,
          "responseSize": 62
        },
        "id": "eee65936-a59e-4af3-8a12-303b4da20e00",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Patient information fetched successfu…'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient information fetched successfu…'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8a10f263-7c30-48f0-afbf-757ac126a627",
          "length": 110,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "92f7dd87-3757-4429-946e-fba9800ccc63"
        },
        "item": {
          "id": "ad832edf-dca9-48d9-9387-91b6cae970b2",
          "name": "Validate list of confirmed Patient not displaying without Authorization",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3c7ab4e-c399-4591-b557-7ec5219e1975",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "1c86fe57-7991-4e5b-9633-507d433615bb"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "baa1065c-3fe6-467a-b00a-9c1814a1aac1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9b154596-8eac-43be-8953-50798a0e4eb7"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-all-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "limit",
                "value": "1"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a82b7691-10d1-4507-bc27-1862c22ea259",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "bf10bfa1-5ea0-4425-b5f6-b81f99aa0544",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:24 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 292,
          "responseSize": 62
        },
        "id": "ad832edf-dca9-48d9-9387-91b6cae970b2",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a46fd593-fd89-4660-9bda-9f8f8546eb12",
          "length": 110,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cdc5d92c-c93b-48f6-bb19-1f436c186509"
        },
        "item": {
          "id": "ebc8daee-cc99-488b-b5aa-d4e0e5f946e8",
          "name": "Validate list of confirmed Patient not displaying to the user as token is invalid/expired.",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "52f06659-8e54-4a4f-8e33-a1ffd15247fd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "6bdde070-9c70-4852-9c58-632873848899"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-all-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "limit",
                "value": "1"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "04c2c252-9912-4070-a570-8651911442f0",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "174bf0e1-cebe-4f6d-9c84-9172cb7eb481",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:24 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 526,
          "responseSize": 58
        },
        "id": "ebc8daee-cc99-488b-b5aa-d4e0e5f946e8",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "cdaba3c2-19f6-4c22-8a00-3b31e6bec367",
          "length": 110,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "24b9578d-e5d5-4c5a-a8d9-3229833356fd"
        },
        "item": {
          "id": "f020180f-2d76-4fd5-accc-5269608a19d7",
          "name": "Validate list of confirmed Patient not displaying with incorrect query data",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "100"
                },
                {
                  "key": "limit",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c53218df-9589-465b-baec-f59fda8e4484",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                  "});"
                ],
                "_lastExecutionId": "1adafd31-24d0-4cbb-9f9a-2c5f1da9dd89"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4480da9c-88d5-448e-a0fd-d0363bf30f41",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "41f0dac9-602c-4d66-8590-1f965024aa59"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-all-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "page",
                "value": "100"
              },
              {
                "key": "limit",
                "value": "1"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ad6aca3a-891f-4e41-bac5-6658c8ff7809",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "2c988f1c-109f-4dcf-bda2-875db09789aa",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:24 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 265,
          "responseSize": 62
        },
        "id": "f020180f-2d76-4fd5-accc-5269608a19d7",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Cannot find patients'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Cannot find patients'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cdb15859-e767-498b-ac18-cdc5eba00055",
          "length": 110,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "663f5999-6774-4eb3-8622-a14e3dc389f8"
        },
        "item": {
          "id": "f1c7f3ca-b6e6-473c-a8f5-0049b6375b08",
          "name": "Validate list of confirmed Patient not displaying to the user as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d1ffeca0-bf8a-4119-9a01-304ae19d8999",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "23a3312d-af05-4b95-b597-ae9218f319f2"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5031bdac-760c-4679-9b97-bd075b186173",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "487a9811-78db-4837-b1e3-2c7baf0fb97d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-all-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "limit",
                "value": "0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4764f836-938e-4723-a4a1-006f821b2501",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "d7547e4d-b19b-4bf1-804d-63745d90eed2",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:25 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "GET"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 279,
          "responseSize": 31
        },
        "id": "f1c7f3ca-b6e6-473c-a8f5-0049b6375b08",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "41eefbf6-6d1d-4ca0-8167-83350f18b942",
          "length": 110,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "44e4654a-0505-46ab-82a7-e9d4f2dfdc71"
        },
        "item": {
          "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
          "name": "Validate Patient file uploaded successfully",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8a4aacda-6079-4292-b2c2-764600c99d0b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Defined responseData before using it in the test script\r",
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', () => {\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                  "});\r",
                  "\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_info_task_id = response.data.id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                  "\r",
                  "let url = response.data.data[0].url;\r",
                  "\r",
                  "// Set the URL as an environment variable\r",
                  "pm.environment.set(\"file_url\", url);\r",
                  ""
                ],
                "_lastExecutionId": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e2239029-9da0-48ec-9054-c33b7507ea23",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c6aae333-8399-49b7-a18a-0c36808e17ae",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:26 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 742,
          "responseSize": 90
        },
        "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Patient file uploaded'",
              "stack": "AssertionError: expected undefined to deeply equal 'Patient file uploaded'\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'id')",
              "checksum": "7968b7e0e6adfbc32cfd96627c083201",
              "id": "fe7945c3-5bfd-4755-977a-fb16ec33c1f3",
              "timestamp": 1718334807061,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d8a747b6-f8e7-4882-ad6b-9572cccb90bd",
          "length": 110,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0bbba910-eec8-4a3e-9882-76e31991233c"
        },
        "item": {
          "id": "57b71dae-bad1-449b-8ce1-999f5d50f563",
          "name": "Validate user is unable to upload multiple Patient files",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [
                    "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                    "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                  ]
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be91c1d6-42dd-45ce-9915-310f3db5e125",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "af575809-4075-4fa8-845b-71993dcf7706",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "7fd617d6-74dc-4bc4-821a-f7dd8b5674ec"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f98548be-2843-4a52-96f0-0b7be99fbe59",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": []
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "d10806b6-e3a0-4fb2-9bae-f068600577eb",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:26 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 741,
          "responseSize": 90
        },
        "id": "57b71dae-bad1-449b-8ce1-999f5d50f563",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 422",
              "stack": "AssertionError: expected response to have status code 400 but got 422\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Patient file could not be uploaded'",
              "stack": "AssertionError: expected undefined to deeply equal 'Patient file could not be uploaded'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "61a666c8-e596-47ff-8d89-32c2f428ff77",
          "length": 110,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c511cddf-46da-4697-9ea0-64fbbef44d40"
        },
        "item": {
          "id": "2f40b587-cfb2-45dd-a46c-7698ded25521",
          "name": "Validate user is unable to upload files other than txt files",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "af5bfa85-ccd4-41ae-b65d-fc7e473e82a1",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "2dcd4ce4-43b3-427a-bd58-9032ce6cd829",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:27 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 541,
          "responseSize": 90
        },
        "id": "2f40b587-cfb2-45dd-a46c-7698ded25521",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 422",
              "stack": "AssertionError: expected response to have status code 400 but got 422\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Patient file could not be uploaded'",
              "stack": "AssertionError: expected undefined to deeply equal 'Patient file could not be uploaded'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d8e20ed4-644d-4944-bd19-ca23e683a813",
          "length": 110,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1d2275fc-d2dc-43f0-a41e-251be05561d6"
        },
        "item": {
          "id": "1d61175a-7498-45ae-b1f7-636d755bc4e5",
          "name": "Validate user is unable to upload Patient file as user is unauthorized.",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "24bf9cb5-1f6e-42ec-ba91-489a01cdd435",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "537b73bb-2a6c-4f95-9abd-4257121b55f0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fe36e942-392a-433d-ac00-3d44e2dccfed",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "173",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": [],
                "fileName": ""
              }
            ]
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "8a3475e0-1c26-4b56-9e25-b935c872cd95",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:28 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 727,
          "responseSize": 62
        },
        "id": "1d61175a-7498-45ae-b1f7-636d755bc4e5",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7b2b5baf-bb59-447a-9b44-96772da147f3",
          "length": 110,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2c9e9236-e6b5-4999-b9d3-3cc46d31b5d7"
        },
        "item": {
          "id": "f498c57e-d84b-4004-990c-eb3b7ed950f9",
          "name": "Validate user is unable to upload without a file",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "411ceed6-6b6a-439b-8fd0-dbc2c4b76652",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "173",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": [],
                "fileName": ""
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b16f7470-9d01-4283-9bde-02c095ccec1d",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:28 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 536,
          "responseSize": 62
        },
        "id": "f498c57e-d84b-4004-990c-eb3b7ed950f9",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Patient file could not be uploaded'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient file could not be uploaded'\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c7cb09b6-d582-4371-a7f6-1ee584fa5d2c",
          "length": 110,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "61b6d9d0-67dc-41c1-9f8f-1ce5f2163500"
        },
        "item": {
          "id": "2303ed6a-7526-4409-b81c-b5315f2eeb14",
          "name": "Validate user is unable to upload Patient file as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "667d9c8c-408b-420b-8a0d-fbd2cc70f9a7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "ee78bff7-29a8-4b32-8d1d-067e68e68dcd"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ba9e72e4-1968-4f9b-9a04-9936b7e6b312",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "173",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": [],
                "fileName": ""
              }
            ]
          }
        },
        "response": {
          "id": "9b72185f-3c5b-4690-9d8e-0899893fa377",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:29 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 533,
          "responseSize": 31
        },
        "id": "2303ed6a-7526-4409-b81c-b5315f2eeb14",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "de25e669-5421-4ce0-b6e9-84c8cbe23b8c",
          "length": 110,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7a62212e-5ffa-418e-b8e9-1e85452541e6"
        },
        "item": {
          "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
          "name": "Validate user is able to validate patient file successfully",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  "pm.test(\"Response has all required fields\", () => {\r",
                  "    pm.expect(responseData).to.have.property(\"status\");\r",
                  "    pm.expect(responseData).to.have.property(\"message\");\r",
                  "    pm.expect(responseData).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', () => {\r",
                  "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                  "});\r",
                  "let responseData = pm.response.json();\r",
                  "let task_id = responseData.data.task_id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"task_id\",task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_task_id set to:\", task_id);\r",
                  ""
                ],
                "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-patient-info"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c7a5ee22-d039-4de0-8029-9a7eb999528f",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "60b023a9-0833-4c04-a4e1-9c935608609d",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:29 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 326,
          "responseSize": 62
        },
        "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "ReferenceError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "Cannot access 'responseData' before initialization",
              "stack": "ReferenceError: Cannot access 'responseData' before initialization\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:13)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "ReferenceError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "Cannot access 'responseData' before initialization",
              "stack": "ReferenceError: Cannot access 'responseData' before initialization\n   at Object.eval sandbox-script.js:3:13)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'task_id')",
              "checksum": "c005a47473712b0486577d5895ef920c",
              "id": "93d4a885-d73c-4681-aded-eac4239083ad",
              "timestamp": 1718334810932,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8f1255b9-c787-4487-9f7a-26c8ccda3798",
          "length": 110,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "88fdd6c5-9500-4d8c-b1e0-1494a44b7a90"
        },
        "item": {
          "id": "919b5971-e191-4365-a6da-b716abcd6688",
          "name": "Validate user is unable to validate patient file with incorrect query data",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f1c569bb-85dc-4904-9932-b5d21240b734",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-patient-info"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "12345"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a5ae355f-8579-4120-9fe4-a8a70a3234e6",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "3e11992a-7a2b-4cff-9dbd-b21319455753",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 263,
          "responseSize": 62
        },
        "id": "919b5971-e191-4365-a6da-b716abcd6688",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "14377964-7b9c-468b-9c84-a3cb07ede386",
          "length": 110,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b08f62db-5e40-400f-9a5a-9771a31aadc8"
        },
        "item": {
          "id": "1e41e4b4-9060-4096-be6d-b7f7c149fe00",
          "name": "Validate user is unable to validate patient file without query data",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "d3914197-51e6-4583-be05-ff35c925bdb5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-patient-info"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "491e1533-ac37-4f13-b826-576306a29055",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "473db29c-2429-4496-9a5d-4019ffaefe6c",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 264,
          "responseSize": 62
        },
        "id": "1e41e4b4-9060-4096-be6d-b7f7c149fe00",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "db807c8c-fd1c-471a-b930-508a8ac10155",
          "length": 110,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "31739540-9316-4ee0-aa92-0a53112d240f"
        },
        "item": {
          "id": "43c6101c-3f22-4b1f-a374-90cebb3a22b3",
          "name": "Validate user is unable to validate patient file without Authorization",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9743bd0-38ce-4719-92a1-007643f06409",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "af40e409-3443-4b0e-8925-14a4b6a2804e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-patient-info"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "%2212345%22"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8da4f89b-ec92-4557-ab64-64c2715b1569",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "8783d9a7-e6a1-4863-aec6-92bd24ed052a",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 276,
          "responseSize": 62
        },
        "id": "43c6101c-3f22-4b1f-a374-90cebb3a22b3",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1e8a1978-629a-4a06-81e4-b9395fa56d47",
          "length": 110,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a2d4e2cf-5f87-439e-8edf-1766441c3c3c"
        },
        "item": {
          "id": "9377e1c1-3728-41d1-9344-d2cd3fb85381",
          "name": "Validate user is unable to validate patient file as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e22a272-4507-4e8f-a52d-ade7018a5173",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "f4c41b93-ab8c-4fc8-b7bf-7160d266694f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-patient-info"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "%2212345%22"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e122b626-0c4f-4b1e-8c31-e4aae7129916",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "1a848c5b-bdbc-410a-b062-e17343209978",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:31 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 324,
          "responseSize": 62
        },
        "id": "9377e1c1-3728-41d1-9344-d2cd3fb85381",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "62bbe336-7f95-4236-8834-147a44ebd2be",
          "length": 110,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "62110d33-7eb3-4adf-aa60-ade196f0f250"
        },
        "item": {
          "id": "a9e741bc-5e34-4168-bcd8-8f77086261e1",
          "name": "Validate user is unable to validate patient file as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "80befb9e-daf4-4e8b-8a6d-45b9f9e640e8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "87276bf7-bbd0-409e-a6b6-c6164005b095"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-patient-info"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "14d64aac-5437-4f32-91b7-5bc81b6dd769",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "691f68f8-15f6-47c0-a452-d38bf0ad5259",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:31 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 270,
          "responseSize": 31
        },
        "id": "a9e741bc-5e34-4168-bcd8-8f77086261e1",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "843496a7-aba1-445a-b79e-9563339e5908",
          "length": 110,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2658e1d9-c3a1-401a-acaa-1d1076de7d82"
        },
        "item": {
          "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
          "name": "Validate user is able to upload variants file successfully",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-variant-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b00498ee-0369-4be2-9b7f-25cabf2db008",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "db687683-521a-4aba-bf52-46fee7b7993f",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:32 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 638,
          "responseSize": 90
        },
        "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Patient file uploaded'",
              "stack": "AssertionError: expected undefined to deeply equal 'Patient file uploaded'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d44400b7-2009-4f95-a250-f9220cbe8b3b",
          "length": 110,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7bb4ef41-5b5b-4117-8aa3-308b015d9b11"
        },
        "item": {
          "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
          "name": "Validate user is able to upload multiple variants file successfully",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [
                    "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                    "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                  ]
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-variant-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "335e27f5-52fe-4bf7-8b66-729a9771ef1a",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": []
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "9951ef15-1e39-4602-9ef9-07bb9103c546",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:33 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 591,
          "responseSize": 90
        },
        "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Patient file uploaded'",
              "stack": "AssertionError: expected undefined to deeply equal 'Patient file uploaded'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "67d03ec5-26ea-4a13-8804-ab2b35ac4fb1",
          "length": 110,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c79e2235-8ab4-4cad-8cec-08ce02d3b0af"
        },
        "item": {
          "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
          "name": "Validate user is unable to upload variants file other than vcf and txt file type",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-variant-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "83c3d2ed-82b4-41ec-93ff-e92631111361",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "60bfac10-c273-4b6a-a4fd-74cc1d9d4c6a",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:33 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 797,
          "responseSize": 90
        },
        "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 422",
              "stack": "AssertionError: expected response to have status code 400 but got 422\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Patient file could not be uploaded'",
              "stack": "AssertionError: expected undefined to deeply equal 'Patient file could not be uploaded'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6c4ffbe7-0792-4348-bbb7-7e3b6b792064",
          "length": 110,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e78eecaf-76a6-43cd-a675-5605528ef641"
        },
        "item": {
          "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
          "name": "Validate user is unable to upload variants file without id",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": null
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-variant-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": null
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dd9b2612-0601-41b7-a69d-f266f047d150",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "173",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": [],
                "fileName": ""
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "73f668a6-5645-4a6b-95b0-67749e30910d",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:34 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 594,
          "responseSize": 62
        },
        "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Patient file could not be uploaded'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient file could not be uploaded'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "22a0f464-5320-4ea0-bd1a-b22b4ee66d3f",
          "length": 110,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d45e6fb0-fff0-4ae8-ba03-a9ecd4b7d0e2"
        },
        "item": {
          "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
          "name": "Validate user is unable to upload without variants file",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-variant-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2b0daa31-d46b-45e5-b251-2b4159a4f175",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "173",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": [],
                "fileName": ""
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6bde649a-fd27-4f02-a4c9-0fc515d6b3f0",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:35 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 551,
          "responseSize": 62
        },
        "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Patient file could not be uploaded'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient file could not be uploaded'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e41f19a9-ec4d-47f6-abf3-a23d95869677",
          "length": 110,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1d3bff6b-5f2e-4436-af4e-2d0b7ffa71df"
        },
        "item": {
          "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
          "name": "Validate user is unable to upload variants file as user is unauthorized",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "45490039-a23a-483d-b1a4-93e95884481c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "711cf07a-8732-4bf7-9fb2-6380e402f068"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-variant-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "33d4ae71-ea62-49f9-b471-5ff38d49abba",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "173",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": [],
                "fileName": ""
              }
            ]
          }
        },
        "response": {
          "id": "e82d8bdc-9b5e-4e10-81ce-1ca914ba99ad",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:35 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 538,
          "responseSize": 62
        },
        "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0982c1ef-3de1-4862-a4e6-d3ee7fa92353",
          "length": 110,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6435609f-1f01-4e18-9ea1-abc77f7bc3e6"
        },
        "item": {
          "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
          "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "371bd934-d1f0-4473-a11c-9f89945d0c21"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-variant-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2ca29199-5190-44d9-aba7-1386a16e3f49",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "9083f453-ff10-433b-acef-51f362ada600",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 561,
          "responseSize": 31
        },
        "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Method Not Allowed'",
              "stack": "AssertionError: expected undefined to deeply equal 'Method Not Allowed'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2425b117-718d-4c0c-90d9-426398c06130",
          "length": 110,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "237aed1c-0785-44e3-bcbb-9adcb0188481"
        },
        "item": {
          "id": "74eceb6a-0137-4694-815b-7e130020f77c",
          "name": "Validate the user is able to validate variants successfully",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                  "});\r",
                  "\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_variant_task_id = response.data.task_id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                ],
                "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-variants",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5304b092-96cb-465a-9350-ac3564357749",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "72bf7f5e-b635-4168-baad-df498d1b8d05",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:37 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 557,
          "responseSize": 62
        },
        "id": "74eceb6a-0137-4694-815b-7e130020f77c",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "ReferenceError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "Cannot access 'response' before initialization",
              "stack": "ReferenceError: Cannot access 'response' before initialization\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:26)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Variant file(s) validated successfully'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Variant file(s) validated successfully'\n   at Object.eval sandbox-script.js:3:26)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'task_id')",
              "checksum": "c005a47473712b0486577d5895ef920c",
              "id": "5d7d7e01-f2ee-425b-8f26-af19c2e1248b",
              "timestamp": 1718334818168,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "77f549b7-7ab2-4edc-8723-b2a91566074d",
          "length": 110,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9e75ef7e-bf67-48a6-80ee-5b3dfb115f70"
        },
        "item": {
          "id": "eea14ae4-8aec-429c-b128-4bff6b2b34a9",
          "name": "Validate the user is unable to validate variants with incorrect query data",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "3fea3327-6760-43c5-96b1-ed6755d34047"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-variants",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "12345"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d185ed4a-ebe2-4530-8b3a-669353e439e4",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "96db8406-460b-4651-bb61-ef2547046045",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:37 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 544,
          "responseSize": 62
        },
        "id": "eea14ae4-8aec-429c-b128-4bff6b2b34a9",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8b9ac0e7-d70d-40bc-80cf-910cb7857206",
          "length": 110,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "59f8ed9c-7ce4-40a3-9e62-0916a28236d5"
        },
        "item": {
          "id": "1c6c5d8e-a2e5-4843-bf84-51e1e1e9f0c0",
          "name": "Validate the user is unable to validate variants without query data",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c41d622d-acf5-4017-b650-708c1c7ce506",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-variants",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "%2212345%22"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8a62013f-d094-4d15-adf2-6d101cde6bfb",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6a6e7148-a6fb-4b62-9ee2-1bb7e9a1ff1d",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 605,
          "responseSize": 62
        },
        "id": "1c6c5d8e-a2e5-4843-bf84-51e1e1e9f0c0",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "42e198e2-2553-4427-820c-536e76da16b7",
          "length": 110,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d61cf299-db35-43c1-b47d-398b1b018ef9"
        },
        "item": {
          "id": "8d61201d-b808-45fb-a111-e06c89bfb124",
          "name": "Validate the user is unable to validate variants without Authorization",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "153bbab0-3a6b-41e0-bc6c-f416401308fc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "9b2e21be-7631-4986-81df-e18e0f8ee6ff"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-variants",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b54703d1-7aaf-440e-bed6-cc02a2350604",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "67500f31-eb79-45f1-be39-555d2adf3815",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:39 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 592,
          "responseSize": 62
        },
        "id": "8d61201d-b808-45fb-a111-e06c89bfb124",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a22e416d-f1a2-4214-9803-725fc19c1981",
          "length": 110,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5032368d-57f9-4155-8bc4-927d89cb984f"
        },
        "item": {
          "id": "1e1d34dd-cb99-4a4d-9c2d-205750a40d72",
          "name": "Validate the user is unable to validate variants as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ceabbca5-0a2b-4ae0-bad1-7ad182f2416a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "88df03cb-5f4a-4d46-bcaa-f8644022d584"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-variants",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8c381fda-309c-4d99-b912-1eb011bc3a01",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a498e65e-f850-40d5-b9b6-057c764663f3",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:39 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 677,
          "responseSize": 62
        },
        "id": "1e1d34dd-cb99-4a4d-9c2d-205750a40d72",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "46ab358f-dadf-4615-aac8-05bad68bfc60",
          "length": 110,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "209a7883-7a39-478e-b75e-21b3319420c9"
        },
        "item": {
          "id": "74312ded-ad9e-4c85-8fb1-d98253b69dab",
          "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ba97a799-e064-4f1a-aee2-97ed3299cf98",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "6b8a2e8a-0c99-4c50-95d2-e6697c72c860"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-variants",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "739ba47c-9171-4dfc-9640-4df994d64207",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "7ff30d25-6551-486c-82d7-d3ad9aa12cbb",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:40 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 632,
          "responseSize": 31
        },
        "id": "74312ded-ad9e-4c85-8fb1-d98253b69dab",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b8923600-954f-4974-87e5-a0cd2cc974de",
          "length": 110,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "690100df-b5c9-483e-b487-33c6102ca1db"
        },
        "item": {
          "id": "dab9441d-2f8a-4b44-aa24-570c4cdad117",
          "name": "Validate user is able to upload medical files successfully",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ac326b6b-bf16-489c-99fa-8aa9f7beeb29",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "535aa12f-f860-486a-9bd8-d5d816994d66"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-medical-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d8f0ce97-effd-44fe-8153-0f364863aab6",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "dcc7413b-108d-4f74-b1c2-c1050fa4bb80",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:41 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 600,
          "responseSize": 90
        },
        "id": "dab9441d-2f8a-4b44-aa24-570c4cdad117",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Other medical file(s) uploaded succes…'",
              "stack": "AssertionError: expected undefined to deeply equal 'Other medical file(s) uploaded succes…'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ee3859a4-e27e-4d0e-bfbf-5de454c78f31",
          "length": 110,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cd5def9a-6270-42cc-bcf9-30461b9c66fa"
        },
        "item": {
          "id": "bdf1d571-40b9-4262-a6b2-57bc6060792d",
          "name": "Validate user is able to upload multiple medical files successfully",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [
                    "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                    "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                  ]
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa77ff3e-af62-42c4-ace5-845cf18cd168",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                  "});\r",
                  "let responseData = pm.response.json();\r",
                  "let p_other_task_id = responseData.task_id;\r",
                  "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                ],
                "_lastExecutionId": "24e9914f-70c4-4ac1-bfe7-96857d4cade3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-medical-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e9806f9d-6107-4f95-b43e-53e413911dc7",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": []
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "034bb44c-9471-4a91-b6bc-fd61c8311c77",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:42 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 768,
          "responseSize": 90
        },
        "id": "bdf1d571-40b9-4262-a6b2-57bc6060792d",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Other medical file(s) uploaded succes…'",
              "stack": "AssertionError: expected undefined to deeply equal 'Other medical file(s) uploaded succes…'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5596e39d-1db0-401b-88ce-97b6723fa384",
          "length": 110,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d77b1bb6-3955-4f86-88bc-6272fe666300"
        },
        "item": {
          "id": "c0f07e74-1fd2-41e8-bcdd-6023fe81b172",
          "name": "Validate user is unable to upload medical fileswith incorrect id",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3229307-a621-4f6b-ba33-c2726b0a99f5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "185a7fba-5055-4899-8fd4-e2f0db24e22c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-medical-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "12345"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5a1c8e96-2e2a-42bb-bf70-1966ce5bbfa8",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a34d4c92-95eb-4ffa-a357-29ddec44bfd6",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:42 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 740,
          "responseSize": 90
        },
        "id": "c0f07e74-1fd2-41e8-bcdd-6023fe81b172",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 422",
              "stack": "AssertionError: expected response to have status code 400 but got 422\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected undefined to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5849ddb0-4523-4ede-9936-9197a4f30da2",
          "length": 110,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3ca54ea9-a9d6-4f5d-8db5-f51623ee48c7"
        },
        "item": {
          "id": "e59c68ef-dca6-48ba-8a52-665718a56e7c",
          "name": "Validate user is unable to upload medical files as user is unauthorized",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a83efa1-296c-437f-84f1-ca121a356546",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "85ade955-fb18-4d88-b3bb-d372f8d23744"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-medical-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "90a49b78-944c-4314-9618-b2fac7d3d6fd",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "173",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": [],
                "fileName": ""
              }
            ]
          }
        },
        "response": {
          "id": "6884ebbd-d15a-48ba-af22-22685d471066",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:43 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 940,
          "responseSize": 62
        },
        "id": "e59c68ef-dca6-48ba-8a52-665718a56e7c",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "806902fc-818a-4942-adff-e32fa4d6456d",
          "length": 110,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1bd0e03b-65e3-4b19-9d70-167c0a713d5a"
        },
        "item": {
          "id": "f6ce480e-0be1-4361-ba3e-cc86c6422043",
          "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aecdbefd-96af-43dc-aa5a-0d469b6ac74c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "e01339da-c072-4928-89f0-88a6b4722ffe"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-medical-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "46693b25-6391-4a80-92ab-b35300945b59",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "formdata",
            "formdata": []
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "1a876fbc-0d10-4dfa-a449-ae0c992ae849",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:44 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 614,
          "responseSize": 31
        },
        "id": "f6ce480e-0be1-4361-ba3e-cc86c6422043",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Method Not Allowed'",
              "stack": "AssertionError: expected undefined to deeply equal 'Method Not Allowed'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1cadd5d7-ba71-4fe5-acbd-8cd8377c562f",
          "length": 110,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a27df9f1-1887-47cd-bd98-48597fe49f00"
        },
        "item": {
          "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
          "name": "Validate user is able to check status of task successfully for Patient info",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-task-status",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9f69cdcc-7e1a-4a93-8a81-940f7f14489f",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "21",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"task_id\": \"\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "d5c992ed-7d80-47e4-a6d6-f7bb0e62880e",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:45 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 565,
          "responseSize": 62
        },
        "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:37)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Task details retrieved successfully'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Task details retrieved successfully'\n   at Object.eval sandbox-script.js:3:37)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8f136854-e9c5-43a4-8e7d-a246c4d9dbd1",
          "length": 110,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2e8ad671-4ce7-4ef8-8a7d-7ddf18758c8d"
        },
        "item": {
          "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
          "name": "Validate user is able to check status of task successfully for Patient Variant File",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-task-status",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "400488b3-b9d8-4f5f-b57b-2b612b655d61",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "21",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"task_id\": \"\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "5df37d82-69e8-4206-a499-a271f0f80afe",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:46 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 734,
          "responseSize": 62
        },
        "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:38)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Task details retrieved successfully'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Task details retrieved successfully'\n   at Object.eval sandbox-script.js:3:38)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b4e311c6-8d90-48ce-9390-50386e46e919",
          "length": 110,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ee0be7bd-da98-4235-b840-0a2dfdaa5615"
        },
        "item": {
          "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
          "name": "Validate user is unable to check status as task_id is incorrect.",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-task-status",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "da55e399-f71d-4362-a7e3-1b3297a1f536",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "34",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "83db3fb6-0c38-4e37-a712-7595c7617e31",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:46 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 739,
          "responseSize": 62
        },
        "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8412f8dd-4fbe-4b96-9fea-8348d51ccf53",
          "length": 110,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a7912575-f6f0-4abb-9a6f-4e6546d658cc"
        },
        "item": {
          "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
          "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-task-status",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "98b095b6-c413-429a-84d4-40edce08799c",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "8",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "49427f9e-f00a-4d2c-96ac-043157b0bfdf",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:47 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 540,
          "responseSize": 62
        },
        "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "74090ca3-3772-48d5-80ed-be58ad23959d",
          "length": 110,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1da95c4c-4654-4048-bdc5-78899d4c0469"
        },
        "item": {
          "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
          "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "147a0fde-5788-4996-9619-297da9714852",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-task-status",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cb57471f-2b6b-4f40-beef-890076605a97",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "8",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "69f01e4e-050a-4b78-8ea2-fbc775ca129c",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:48 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 637,
          "responseSize": 62
        },
        "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b6da80a3-809f-4ded-8493-4fdfcad7355b",
          "length": 110,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "85afbaec-ba74-41ca-9adf-85fdbd98f0e5"
        },
        "item": {
          "id": "841a70e5-6cc2-4bd5-97ab-380582f9ed80",
          "name": "Validate user is unable to check status as the token is invalid.",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "750b10af-fa67-4ede-bbde-b20d20b45ae9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "8b60052f-49c6-4107-a8ec-5f7671ffa546"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-task-status",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9907cf9b-32cb-4ed0-94ed-16884221ecbb",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "40",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "066fd6d1-3fd7-40d1-87ba-82eebb46b510",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:48 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 644,
          "responseSize": 58
        },
        "id": "841a70e5-6cc2-4bd5-97ab-380582f9ed80",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d0600296-f1b7-4464-98b3-7c95c2bd72df",
          "length": 110,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a754d0a3-d2a1-47c5-91fb-a1571cd1a732"
        },
        "item": {
          "id": "3e795864-8b1b-43a7-880c-67e6a5165d9a",
          "name": "Validate user is unable check status as incorrect CRUD operation is used.",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "19b29895-3355-4b50-8294-38e3c5cf31fd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "12247455-18ec-4f0d-a6c7-4359b0ab0ea9"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-medical-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "400ffa14-c6c6-4a74-9898-bc5a181e4238",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "40",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "17af41ed-e0c5-40b2-80b2-7f928f100cf7",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:49 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 742,
          "responseSize": 31
        },
        "id": "3e795864-8b1b-43a7-880c-67e6a5165d9a",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d3f9f54e-0356-46ca-bd73-c3533ee98ac9",
          "length": 110,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7f869f3d-ab0b-4532-8059-14d5987509c6"
        },
        "item": {
          "id": "9aa20c77-2d9a-4728-a3f5-9eac377df741",
          "name": "Validate user is able to fetch patient's data successfully",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53475fe1-79ae-41a4-9740-b70dea72d28a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status Code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "da4ce4f8-8a4b-4a3e-8f4c-feeb6ff0f7d8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6d4ce4e7-6225-4800-aeb0-e21f172265da",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "8bba5f45-715c-4882-b38c-eb66289b0b86",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:50 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 307,
          "responseSize": 62
        },
        "id": "9aa20c77-2d9a-4728-a3f5-9eac377df741",
        "assertions": [
          {
            "assertion": "Status Code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Patient details fetched successfully.'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient details fetched successfully.'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "fbeec036-2958-4c72-a8f5-4751288aec53",
          "length": 110,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b31cdcde-e488-44a0-8802-3aef51757963"
        },
        "item": {
          "id": "af174d54-ee08-4266-b011-62c643488cb3",
          "name": "Validate user is unable to fetch patient's data with incorrect query data",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "31a92968-a70e-4409-881d-932be3f453b8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status Code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                  "});"
                ],
                "_lastExecutionId": "40fce554-63cc-4e2f-900c-a825d9ca6cc6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "12345"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7260f72f-ec3b-477d-a922-134b947d965b",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "e8c1ce21-8292-4eae-acd7-95bd6fdb1682",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:50 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 331,
          "responseSize": 62
        },
        "id": "af174d54-ee08-4266-b011-62c643488cb3",
        "assertions": [
          {
            "assertion": "Status Code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Invalid Id'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Invalid Id'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "434f8c51-8c06-41c7-842b-0d0af2879a90",
          "length": 110,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3b3b6c20-37fd-4351-8add-fd20baaed577"
        },
        "item": {
          "id": "998a9788-9024-4936-8696-1676176d55db",
          "name": "Validate user is unable to fetch patient's data without query data",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ece6ea17-d847-4290-a73a-d4a07cf14def",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                  "});"
                ],
                "_lastExecutionId": "70eea9a8-9549-4d1c-a534-995d5387d29e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b263d8d9-28f1-45c0-ac9d-9733c2569429",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "09a045a4-aaa3-4ef2-9edd-ab92526086b5",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:51 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 274,
          "responseSize": 62
        },
        "id": "998a9788-9024-4936-8696-1676176d55db",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Invalid Id'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Invalid Id'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2b64ee49-816e-4f0a-b139-6ab3604e78f7",
          "length": 110,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0d4776ed-8b4b-40d9-898b-85fb92c6f810"
        },
        "item": {
          "id": "8f57385b-c484-4a66-8c85-197b708cf2f7",
          "name": "Validate user is unable to fetch patient's data without Authorization",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3d759a23-cf20-40b6-87d5-7f00c131f23a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "6d3139dd-ac5f-4068-80bf-a6c3f2dfaaf0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f51f9ac5-3e1e-44b6-bf0b-1b6c8d25aa47",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "f350a863-a4a8-4a11-9981-858ccc1aa851",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:51 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 276,
          "responseSize": 62
        },
        "id": "8f57385b-c484-4a66-8c85-197b708cf2f7",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6820ad65-0f18-4cc0-8a56-cd1a244be3ad",
          "length": 110,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "60abcfd1-0528-43fb-85e4-ad8a3f03c4b1"
        },
        "item": {
          "id": "f736b84e-a977-493e-ae56-dfff50137950",
          "name": "Validate user is unable to fetch patient's data with invalid/expired token",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b0cd401-526c-4c8c-9718-656667ffa9f1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "46e0b6f0-8e52-45ab-90bb-da46bf45fda3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "63b51148-fd7d-4abf-b662-4531c7cf941a",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "fe710012-0ccb-4dd2-ac73-b60b3441e4a8",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:51 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 307,
          "responseSize": 58
        },
        "id": "f736b84e-a977-493e-ae56-dfff50137950",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2f25ab72-d1fd-49b7-ac0c-25600756ede2",
          "length": 110,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c4f22195-0d86-47ef-87b1-32ed4c6af715"
        },
        "item": {
          "id": "3a682495-7451-4a86-baf2-5532a895c757",
          "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f4b36e86-aa58-4a30-a766-f0376256a6dd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "5a7f13d1-111d-4d05-8ac4-5aaf764f2049"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "27434400-0c38-4cb3-917b-3a3cb02d3253",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c85243b1-c5d8-4e8a-a193-3f2bcad0ccb6",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:52 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "GET"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 280,
          "responseSize": 31
        },
        "id": "3a682495-7451-4a86-baf2-5532a895c757",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f6b6379a-07d5-4869-af12-d22f2158bfec",
          "length": 110,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3fc9a6b4-a053-44c0-a1ea-909005a6b6ea"
        },
        "item": {
          "id": "339adc5a-80ea-4124-9020-42483e17fa87",
          "name": "Validate user is able to check patient id successfully",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "387a6024-b9fa-4390-8a02-48742c43d7de",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let patientId = \"patient_\" + new Date().getTime();\r",
                  "\r",
                  "// Set the environment variable\r",
                  "pm.environment.set(\"patient_id\", patientId);\r",
                  "\r",
                  "console.log(\"Environment Patient ID set to:\", patientId);\r",
                  "\r",
                  "function getRandomString(length) {\r",
                  "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                  "    let result = '';\r",
                  "    for (let i = 0; i < length; i++) {\r",
                  "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                  "    }\r",
                  "    return result;\r",
                  "}\r",
                  "\r",
                  "// Generate a unique name using a random string\r",
                  "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                  "pm.environment.set(\"name\", name);"
                ],
                "_lastExecutionId": "19038ca6-92b2-44ee-a227-ddc8c78f46a6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-patient-id",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3462c435-3875-4d2b-bfa0-b4eb608f0bec",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "45",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"patient_id\": \"patient_1718334833174\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "2be99a67-2a92-4f7d-8353-b5af9e782508",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:52 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 649,
          "responseSize": 62
        },
        "id": "339adc5a-80ea-4124-9020-42483e17fa87",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:50)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Patient id does not exist'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient id does not exist'\n   at Object.eval sandbox-script.js:3:50)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "fab3ad2e-051b-4611-a4db-221c406e3b16",
          "length": 110,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b836a813-4bf4-4d47-87c5-453b21a5ed89"
        },
        "item": {
          "id": "6fb6a935-5173-4764-9d5e-52bd11e23b60",
          "name": "Validate user is able to update patient's information successfully",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\":\"{{p_info_task_id}}\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 90,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "c46d4d71-c1a7-4067-a607-624057480207"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "54d95371-1a06-41a0-83a9-8f00cc8b7ab5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5a889c15-b4e3-4b3f-af22-f591d3bf9284"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-details",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "efe0c111-eafb-48c1-972b-0d4767557579",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "322",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"id\":\"\",\r\n    \"patient_id\":\"patient_1718334833174\",\r\n     \"name\": \"Name_qATMACut_1718334833176\",\r\n    \"age\": 90,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "25baa95f-7c7d-4a25-b843-a179687b4ee5",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:53 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 536,
          "responseSize": 62
        },
        "id": "6fb6a935-5173-4764-9d5e-52bd11e23b60",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:51)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Patient info updated successfully.'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient info updated successfully.'\n   at Object.eval sandbox-script.js:3:51)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "460c6c4d-0093-4f50-9b9a-2e2556280d8f",
          "length": 110,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3341f45b-6b79-47fb-8646-5c15c8698fc6"
        },
        "item": {
          "id": "738c694e-a5fc-4042-861e-2054c3a97873",
          "name": "Validate user is unable to update patient's information with missing required field in the body",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02173199-e967-46fb-9ced-a3b4d6f13185",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "e83118b8-cd78-4922-9637-47ff6e63c5ce"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-details",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "28ee00b2-d62c-4e54-aa8d-90b505c2acd1",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "334",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n\"id\":\"\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c59435ef-edf9-4171-a744-e519e6b68e8b",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:54 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 546,
          "responseSize": 62
        },
        "id": "738c694e-a5fc-4042-861e-2054c3a97873",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected undefined to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a6330f98-a1ee-46f8-b9a1-d704b3d9a432",
          "length": 110,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1f0250ce-8e61-49e1-9f4e-52eda7fc9827"
        },
        "item": {
          "id": "2f5557d9-183a-4c88-a132-872dcffa9de1",
          "name": "Validate user is unable to update patient's information without Authorization",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a684acb1-0e5a-43d1-a114-17c61bf306aa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "9412d997-46db-40ea-89f6-01ff197e58a1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-details",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6d7adad1-61b5-48ec-8cac-3cb53eedf78b",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "388",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"id\":f1462e5d-5fd6-4907-ad9f-1cbb61e7d63b,\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "2a77da44-3c66-4a89-9743-8d5a40221fe0",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:54 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 569,
          "responseSize": 62
        },
        "id": "2f5557d9-183a-4c88-a132-872dcffa9de1",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0124e69a-b379-4215-9ed2-0aa8eb5e83b5",
          "length": 110,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "14432b94-daed-4e96-bf2d-914c93bb3085"
        },
        "item": {
          "id": "81cf2a86-3792-449d-b688-86599c8c44fc",
          "name": "Validate user is unable to update patient's information as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ecd80db7-3749-4821-a4e9-6b6834340a19",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "fb29d8de-49f5-4716-aff6-93b063e8afc7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-details",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "10c5b3fc-b062-48d9-986c-622c26ed82b0",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "388",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"id\":f1462e5d-5fd6-4907-ad9f-1cbb61e7d63b,\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c5c17c63-6c50-4c2f-97ff-6d6159a19555",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:55 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 616,
          "responseSize": 58
        },
        "id": "81cf2a86-3792-449d-b688-86599c8c44fc",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d76666fa-dc8e-4da1-98d9-665147e242a2",
          "length": 110,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c4ff73e7-9713-47bd-98c4-4d450f5a24d3"
        },
        "item": {
          "id": "8f4a2de9-5bbb-4533-afb0-63abdb767018",
          "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "955a99aa-cb51-4229-95e2-ecea73eefc88",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "388ac42d-9224-412c-870e-69be9596daed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-details",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0974bd9f-9e01-4681-92e3-8512f5950bbf",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "394",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \r\n    \"id\":f1462e5d-5fd6-4907-ad9f-1cbb61e7d63b,\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "58a0aaed-63b3-47f0-a157-a72672ff382e",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:56 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "PATCH"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 744,
          "responseSize": 31
        },
        "id": "8f4a2de9-5bbb-4533-afb0-63abdb767018",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8e1165b4-d31a-4438-a643-25b86750ed2f",
          "length": 110,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "da740cd3-387b-489c-9654-c06e150d1205"
        },
        "item": {
          "id": "9047f605-e39e-48bc-b481-733e200ae0c4",
          "name": "Validate user is able to check patient id successfully(true)",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "591b247b-33e9-45e6-adc4-494d829459db"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-patient-id",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "18c5dbd9-4808-4181-89db-ae1488bbf411",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "45",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"patient_id\": \"patient_1718334833174\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "d827f549-1e65-4a53-8a01-0cb08395a228",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:56 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 547,
          "responseSize": 62
        },
        "id": "9047f605-e39e-48bc-b481-733e200ae0c4",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:56)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Patient id already exists.'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient id already exists.'\n   at Object.eval sandbox-script.js:3:56)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "be75a051-f418-4625-9314-6492fcc7fbba",
          "length": 110,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1e8cc0c6-a013-48e9-b108-4769fce026a7"
        },
        "item": {
          "id": "47c4fd42-4015-44a2-89f3-5e36011dc7d3",
          "name": "Validate user is unable to check patient id as patient_id is missing in the body",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a3f8a478-aebe-434e-ab7d-efa6812fa912",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "875b3af8-d7d9-4b40-95a5-2ecff51761c4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-patient-id",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0491d4e2-1196-411a-8181-f2c181512e36",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "8",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "49fd9e49-64be-4601-8662-9d68825cdeaa",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:57 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 560,
          "responseSize": 62
        },
        "id": "47c4fd42-4015-44a2-89f3-5e36011dc7d3",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "51b4b8be-7896-4494-8d78-f8abc8e7aff5",
          "length": 110,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b9c4d8b8-dc3c-4c5e-899d-5e32b99847e3"
        },
        "item": {
          "id": "bb61fb65-f434-4555-b2eb-ef19fe05ef22",
          "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"K3456789\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3c91aec0-82eb-4432-b9c2-eadc555bbc68",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                  "});"
                ],
                "_lastExecutionId": "68f27bde-5b75-4b43-8ab0-02c6162c7bdd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "check-patient-id",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2717e091-85bd-4518-a567-29f8f4c04633",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "34",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"patient_id\": \"K3456789\"\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "4c5a12e9-ddc8-4052-a6cd-29d90dd4de54",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:58 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 612,
          "responseSize": 22
        },
        "id": "bb61fb65-f434-4555-b2eb-ef19fe05ef22",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Patient id does not exist'",
              "stack": "AssertionError: expected undefined to deeply equal 'Patient id does not exist'\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "70cbb39c-393b-4f3a-9cea-e5a1b19c3851",
          "length": 110,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5964cc7d-9543-4101-8477-8694bce2541f"
        },
        "item": {
          "id": "c0e0dd77-0d83-4b26-8d11-c95148642523",
          "name": "Validate user is unable to check patient id without authorization",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "caa2031d-0f80-4e05-b038-db65c61a60a5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "406649f4-d93b-425e-a98a-a8e349b22e53"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-patient-id",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b3db0d38-766d-407b-bfcf-e671e6e52434",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "47",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"patient_id\": \"patient_1718334833174\"\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "df321871-fc49-4e34-9449-0c8efd9271d4",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:58 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 581,
          "responseSize": 62
        },
        "id": "c0e0dd77-0d83-4b26-8d11-c95148642523",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bdfd2fd7-aedf-4634-b8f7-5bba0146119e",
          "length": 110,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "aadf5042-010e-4d69-a729-2c270468fd77"
        },
        "item": {
          "id": "023a7ff0-5d88-4a4e-b122-bf458131a558",
          "name": "Validate user is unable to check patient id as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "62a6184e-f7d7-48b3-b5d6-7b081164abc5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "ce134a7a-ea50-46d5-93c2-9157d6ced606"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-patient-id",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "455c352b-ab77-4bcf-b162-ae7064be4ede",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "47",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"patient_id\": \"patient_1718334833174\"\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "9db9f09b-b9f2-43a9-a06c-fbe0597845ea",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:13:59 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 634,
          "responseSize": 58
        },
        "id": "023a7ff0-5d88-4a4e-b122-bf458131a558",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b62f48ac-7db3-41e0-ad5d-9e67aba089ba",
          "length": 110,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4161d224-3284-4fcb-ab4e-705acb3a6e91"
        },
        "item": {
          "id": "a56cbfeb-7577-46e9-a899-961839147b3a",
          "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f0619c91-95ef-44a9-ad10-08bddb414ba3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "dd21d57c-186a-44be-b21c-a7f68e08f203"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-patient-id",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "da5370fc-3011-4c0a-9457-4aa46ce77a28",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "47",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"patient_id\": \"patient_1718334833174\"\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "ea117ccf-5ea1-40ff-a17a-106ce6bfb426",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:00 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 634,
          "responseSize": 31
        },
        "id": "a56cbfeb-7577-46e9-a899-961839147b3a",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Method Not Allowed'",
              "stack": "AssertionError: expected undefined to deeply equal 'Method Not Allowed'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a9b5e400-1704-4f76-90da-edd864c87c60",
          "length": 110,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b33cdb90-cd1c-4a7b-b559-22a00d5db909"
        },
        "item": {
          "id": "f16ecb25-9ecf-47b3-93dc-a0dedf9c14a8",
          "name": "Validate user is able to search patients successfully",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "47594730-b3d5-4cb0-aa6f-992b90580732"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "search-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "keyword",
                "value": "patient_1718334833174"
              },
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "limit",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "91f1b03a-e35d-4eb6-99ad-905f548727da",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "58f3b386-1d27-479b-a204-d0e370517033",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:00 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 273,
          "responseSize": 62
        },
        "id": "f16ecb25-9ecf-47b3-93dc-a0dedf9c14a8",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:62)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Search items fetched successfully'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Search items fetched successfully'\n   at Object.eval sandbox-script.js:3:62)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e2c5e8c8-31bd-4adc-9c30-e6b5313b3c08",
          "length": 110,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c2a3746f-7efa-494d-b419-d965db50dab5"
        },
        "item": {
          "id": "7eedc926-7fad-4199-9d7a-2462ee8a6822",
          "name": "Validate user is able to search patients if optional parameters are missing",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                },
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "74aa99e9-4048-4506-9146-e638aed5c9ac"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "search-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "keyword",
                "value": "patient_1718334833174"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a2793c80-f30e-465e-a68a-f62036dfc6ff",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "beed18e2-a771-4c0b-83b3-41e02b61883c",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:00 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 265,
          "responseSize": 62
        },
        "id": "7eedc926-7fad-4199-9d7a-2462ee8a6822",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'error' to deeply equal 'success'",
              "stack": "AssertionError: expected 'error' to deeply equal 'success'\n   at Object.eval sandbox-script.js:2:63)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Search items fetched successfully'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Search items fetched successfully'\n   at Object.eval sandbox-script.js:3:63)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ba81f721-f9c1-4a5d-afd4-26be02243ed3",
          "length": 110,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "00edbe38-e39e-4538-b9ff-79079fdb3beb"
        },
        "item": {
          "id": "46f162b1-5947-4184-a009-25ae39339b52",
          "name": "Validate user is unable to search patients as required parameter is missing",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7fbb2e99-dba4-49c0-b52b-013f44204c31",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a16bccef-d2b8-4b2a-b465-f55dd723d951"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "search-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "keyword",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6726c06d-1483-4b9f-9393-2ba71408bec5",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "82867435-5c8a-40d5-a2d8-da41d5ad6515",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:01 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 362,
          "responseSize": 62
        },
        "id": "46f162b1-5947-4184-a009-25ae39339b52",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:64)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f2c06d7e-0a74-4a1a-8232-1a67d4ee7ef8",
          "length": 110,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9e5f56b0-fb20-4a65-b74b-8503a7486197"
        },
        "item": {
          "id": "79d7ef39-1874-4479-a790-a3f0262eece1",
          "name": "Validate user is unable to search patients without Authorization",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f956a5d7-ec5a-40e9-9cef-3076f8c43808",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "24c52c84-bf48-4c9e-b6dd-7e903b8bcf6c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "search-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "keyword",
                "value": "patient_1718334833174"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "44d44b83-e6b4-4126-b438-67f64ac08a18",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "72fff486-5daf-44a0-9661-1ea2273dfb93",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:01 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 270,
          "responseSize": 62
        },
        "id": "79d7ef39-1874-4479-a790-a3f0262eece1",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "773168ab-be83-4adb-9c8a-3a07ed40629c",
          "length": 110,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a748b412-bf16-4f3b-9006-44fef94abd2e"
        },
        "item": {
          "id": "7bd7370d-95b9-4acb-b8ca-793bfbebca88",
          "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "956dc782-3cbe-4053-8f4d-50256ccddd51",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "b8ec6bce-dbb3-480a-94f4-a1f785684fa4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "search-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "keyword",
                "value": "patient_1718334833174"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9e6a75de-9f2f-4f24-83ff-beba7da5a45e",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "debb4ac4-272e-4653-87b3-6f04c640e8ad",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:01 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "GET"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 278,
          "responseSize": 31
        },
        "id": "7bd7370d-95b9-4acb-b8ca-793bfbebca88",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8f4344ae-dd20-4fc5-a0ba-e467ba19a804",
          "length": 110,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6e1fd355-44c2-4ab8-8285-428f7f0c275b"
        },
        "item": {
          "id": "aecc5091-5aea-4217-a813-d949a407a401",
          "name": "Validate user is able to cancel patient flow successfully",
          "request": {
            "url": {
              "path": [
                "cancel-patient-flow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "42292597-18f7-43dd-8a5d-590c7084f79b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Cancellation successful\");\r",
                  "});"
                ],
                "_lastExecutionId": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "cancel-patient-flow"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0b989ce0-a8c7-48f7-99d1-41ad0209896d",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "3de445c3-7882-4a26-a8ec-4ae5a673cf2e",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:02 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 335,
          "responseSize": 62
        },
        "id": "aecc5091-5aea-4217-a813-d949a407a401",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:67)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'error' to deeply equal 'success'",
              "stack": "AssertionError: expected 'error' to deeply equal 'success'\n   at Object.eval sandbox-script.js:3:67)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Cancellation successful'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Cancellation successful'\n   at Object.eval sandbox-script.js:4:67)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e87e9579-80c6-4223-9c62-026ff1757aed",
          "length": 110,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9e3f29f8-1d20-4ffe-9b3f-0a38e89434b1"
        },
        "item": {
          "id": "1b2d5a6c-e13e-4252-b2fb-869426c29cdc",
          "name": "Validate user is unable to cancel patient flow as required parameter is missing",
          "request": {
            "url": {
              "path": [
                "cancel-patient-flow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e5d99f95-62f1-4a02-94c6-dde3ab9e0fbb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "f20ffbe6-aafa-4a26-8f00-91b4d46fce04"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "cancel-patient-flow"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bbbb08c6-5575-4571-8221-bf1dae9133c5",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a79a7f9c-c51d-459e-a9fa-82fea43319af",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:02 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 442,
          "responseSize": 62
        },
        "id": "1b2d5a6c-e13e-4252-b2fb-869426c29cdc",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:68)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1e9ea098-0cd1-4dc1-a1cd-96ee2fbbee60",
          "length": 110,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a74baf85-72d4-4476-96d8-691701fbf996"
        },
        "item": {
          "id": "152c59fa-c48a-425c-a5a8-e0e1f5381dc7",
          "name": "Validate user is unable to cancel patient flow without Authorization",
          "request": {
            "url": {
              "path": [
                "cancel-patient-flow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4a615609-311c-464c-b25b-552a5280d3c2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "6e92fb29-e3ac-4f37-b8e0-5ff201640dbb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "cancel-patient-flow"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "18d121a6-fcbf-4518-8c22-810679dcb099",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "a21f996f-7155-46a3-8f44-935c2f17556b",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:03 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 323,
          "responseSize": 62
        },
        "id": "152c59fa-c48a-425c-a5a8-e0e1f5381dc7",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "31ecee92-ce19-41f4-a5a6-6e16bfb6d86a",
          "length": 110,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7012b718-706f-4e86-936b-94a75de3935b"
        },
        "item": {
          "id": "9f66e43b-7718-4c08-b6b0-6ceeff23fa07",
          "name": "Validate user is unable to cancel patient flow as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "cancel-patient-flow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "103550ce-f8b1-4f59-9c5d-517a98c9a741",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "07280de3-1f90-482b-b0f6-1a06f17a43af"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "cancel-patient-flow"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1074000b-280a-42ea-9963-671c3dd20c4e",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "597745fa-0c46-4561-a2ae-07f0ca271359",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:03 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 356,
          "responseSize": 58
        },
        "id": "9f66e43b-7718-4c08-b6b0-6ceeff23fa07",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "253c587a-43c3-4061-baee-fd8ca250024a",
          "length": 110,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "be288c8f-8458-41c9-8889-2c5d543c88a6"
        },
        "item": {
          "id": "28feff29-728e-415d-bbf9-abb71c435e28",
          "name": "Validate user is unable to cancel patient flow as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "cancel-patient-flow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bceb5a5c-2b93-4d81-862c-0022994ee72a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "0155b274-cc30-4d4f-afaa-120820afbb54"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "cancel-patient-flow"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9504e172-3153-43df-a800-c2df7784e238",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "4138f0d8-1c37-4155-9f9a-34d1f6aaa0f9",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:04 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "GET"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 278,
          "responseSize": 31
        },
        "id": "28feff29-728e-415d-bbf9-abb71c435e28",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "29adc661-afab-4e97-9e1a-ab61a9b50a0d",
          "length": 110,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c6d96642-9ef6-4527-acd2-f48da40bd48b"
        },
        "item": {
          "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
          "name": "Validate user is able to get current user task info successfully",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": "{{task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                  "});"
                ],
                "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-curent-user-task-info"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3e305ce0-9a51-41ab-a8a7-940e15330df8",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "d6a1b06a-8af8-4669-965b-4607a8f3eb9c",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:04 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 305,
          "responseSize": 22
        },
        "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { detail: 'Not Found' } to have property 'status'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'status'\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:2:72)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'success'",
              "stack": "AssertionError: expected undefined to deeply equal 'success'\n   at Object.eval sandbox-script.js:3:72)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal ''",
              "stack": "AssertionError: expected undefined to deeply equal ''\n   at Object.eval sandbox-script.js:4:72)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f2fb1f0f-74b2-49cb-9247-0b195be99de2",
          "length": 110,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b9f66228-a167-406b-aaad-297ad0ca5aaa"
        },
        "item": {
          "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
          "name": "Validate user is unable to get current user task info without authorization",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-curent-user-task-info"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "760458aa-f8cc-4698-b20f-1eeab90ecc2a",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "f3e9126b-5bb8-493e-a5a9-1c104b3972bd",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:04 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 273,
          "responseSize": 22
        },
        "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'error'",
              "stack": "AssertionError: expected undefined to deeply equal 'error'\n   at Object.eval sandbox-script.js:2:73)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Token is invalid or expired'",
              "stack": "AssertionError: expected undefined to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:3:73)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cb931c92-bd49-42ef-8533-f1d77b777f0b",
          "length": 110,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "668dd5c7-1e29-4d8b-8f68-d4ffd7f851b4"
        },
        "item": {
          "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
          "name": "Validate user is unable to get current user task info as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-curent-user-task-info"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0e1a9bcb-6b3d-4b60-a3fb-fb28df12a823",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "e9180c25-4271-419c-9264-2cf57a41b67a",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:05 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 295,
          "responseSize": 22
        },
        "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'error'",
              "stack": "AssertionError: expected undefined to deeply equal 'error'\n   at Object.eval sandbox-script.js:2:74)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Token is invalid or expired'",
              "stack": "AssertionError: expected undefined to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:3:74)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9a32fe18-f4c3-4ef2-a0b4-325131d87b51",
          "length": 110,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "41c29ace-5a2f-41f7-9e74-f6febefee2bf"
        },
        "item": {
          "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
          "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-curent-user-task-info"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "84030e36-7cd6-435f-8cfd-7c867af31438",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c85052ac-022b-447c-a869-e02db07bacec",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:05 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 312,
          "responseSize": 22
        },
        "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 405 but got 404",
              "stack": "AssertionError: expected response to have status code 405 but got 404\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Not Found' to deeply equal 'Method Not Allowed'",
              "stack": "AssertionError: expected 'Not Found' to deeply equal 'Method Not Allowed'\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "253d05bd-8546-49c2-b58e-9c9f3e972cf3",
          "length": 110,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c20be6ae-cbfd-4d71-a3f9-509b16b8abc1"
        },
        "item": {
          "id": "cfafe81a-21aa-4306-aac0-214c555aed73",
          "name": "Validate user is able to start variant processing successfully",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-variant-processing"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9a9fabcf-0378-43f2-b947-83634fcd3667",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "5287844b-10bc-483c-b2fa-86405b350abe",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:05 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 350,
          "responseSize": 62
        },
        "id": "cfafe81a-21aa-4306-aac0-214c555aed73",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:76)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'error' to deeply equal 'success'",
              "stack": "AssertionError: expected 'error' to deeply equal 'success'\n   at Object.eval sandbox-script.js:3:76)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Variant file(s) processed successfully'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Variant file(s) processed successfully'\n   at Object.eval sandbox-script.js:4:76)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "266986b0-167a-4bfd-84c6-8f8607c28e2e",
          "length": 110,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "600f6688-2f47-4c4d-9fb8-6f87afd668ca"
        },
        "item": {
          "id": "9ccbecf8-9832-4511-b0bd-9418d9cccc98",
          "name": "Validate user is unable to start variant processing as required parameter is missing",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40bf9df3-7815-4a46-8eb7-e2517fec8dd1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "92d82f68-7863-4708-a979-b09c7c33301d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-variant-processing"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "%2212345%22"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d6ba5733-14af-4fb0-91ca-5b49ade72545",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b43bc1be-13d8-4240-b225-4770b9693192",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:06 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 379,
          "responseSize": 62
        },
        "id": "9ccbecf8-9832-4511-b0bd-9418d9cccc98",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:77)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0eb3bba7-b3ec-42f7-8db0-e0fd1a154f90",
          "length": 110,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f4e6abf4-97bf-46d0-b90f-1146aa9d0216"
        },
        "item": {
          "id": "73edec2d-eb86-4c80-8ea7-3b3cd3c093a3",
          "name": "Validate user is unable to start variant processing without Authorization",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ceacdfa2-1aaf-4e31-af08-9019654add44",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "79a0f4b1-cbc0-4a95-952b-54992f6c3d8e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-variant-processing"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7368786d-26eb-41af-a1c7-db6156102d80",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "96fd0e13-e6ad-4071-b186-325d9e16b07c",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:06 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 276,
          "responseSize": 62
        },
        "id": "73edec2d-eb86-4c80-8ea7-3b3cd3c093a3",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "69761620-c323-42af-ae0d-051fb92197bb",
          "length": 110,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "731526cf-e035-415f-9b42-095b01241400"
        },
        "item": {
          "id": "74592aa0-a71c-4bcc-ba3f-fd00ced68751",
          "name": "Validate user is unable to start variant processing as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "38d6c22d-f4e1-4e05-9a36-6c306582a978",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "46ffc7cf-1067-45c0-af66-99d67c13f742"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-variant-processing"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f26e95da-fc5a-4442-b23b-01be5b442616",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "378b5496-37ba-446e-91c4-af72ba00a6a2",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:07 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 304,
          "responseSize": 58
        },
        "id": "74592aa0-a71c-4bcc-ba3f-fd00ced68751",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "dc2a10e8-ad4e-4ecf-8314-b0d467046c09",
          "length": 110,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fbc7fcbc-5b19-4932-99db-73addd7faf98"
        },
        "item": {
          "id": "48d1013f-25ad-419a-b103-e4ae9b462c33",
          "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c1c1efe4-60d6-4c48-813f-9cc0691043e5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "8abc00bc-b2ed-48b7-a8b9-260525adfa26"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-variant-processing"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4c936903-04d9-4549-9f37-77c6271195ba",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "3f2d63ae-8abc-4524-a401-55043def7f86",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:07 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 270,
          "responseSize": 31
        },
        "id": "48d1013f-25ad-419a-b103-e4ae9b462c33",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "371e36e5-e07d-4768-8927-0be97ff87db9",
          "length": 110,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f6fba07c-8905-4c6c-af9c-6671eaf65d74"
        },
        "item": {
          "id": "638dbcfd-9c0d-4f8f-82b1-5ffda2e6031d",
          "name": "Validate user is able to display patient demograph dropdown successfully",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "tmb"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02824625-d2af-436e-86cd-ea0421175fb3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c9d3752a-6bbf-449a-a312-d47670ff34ec"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-demograph-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "tmb"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c87dafc8-4ce5-48ad-bf66-771681f5c1bc",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b2b9daf6-97e4-4288-a565-be03b1e7817c",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:07 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 292,
          "responseSize": 62
        },
        "id": "638dbcfd-9c0d-4f8f-82b1-5ffda2e6031d",
        "assertions": [
          {
            "assertion": "Response is an array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response is an array",
              "message": "expected { status: 'error', …(1) } to be an array",
              "stack": "AssertionError: expected { status: 'error', …(1) } to be an array\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "Response contains all expected elements",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains all expected elements",
              "message": "the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:81)"
            }
          },
          {
            "assertion": "Response does not contain unexpected elements",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "Response does not contain unexpected elements",
              "message": "response.forEach is not a function",
              "stack": "TypeError: response.forEach is not a function\n   at Object.eval sandbox-script.js:3:81)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6f2b995e-b528-4092-9d05-0527675c0564",
          "length": 110,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1ef140ab-3660-49c0-a22b-f013374bd421"
        },
        "item": {
          "id": "0a26db68-b700-4ee5-ab77-201e5510771d",
          "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8233d493-1ba3-4eeb-89da-b6bbe8eced0b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "c0a380c3-54ef-4661-93bd-9b55e7c539f4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-demograph-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ff738230-9868-4e7a-9487-9d5863ab1df6",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "4c84001e-af0e-4427-8638-09a369fabc84",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:08 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 269,
          "responseSize": 62
        },
        "id": "0a26db68-b700-4ee5-ab77-201e5510771d",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:82)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "19a425a2-73e1-480f-acf9-7a865a91305b",
          "length": 110,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a81c3c1c-b72a-4cba-ad0c-80979334bc41"
        },
        "item": {
          "id": "91c518e1-2a78-45e7-8857-bfe1a7335bb9",
          "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ce88703f-25cf-4337-9791-990b129318e8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "feb22e69-40bb-4b92-bc35-f2beed02ba97"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-demograph-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "%2212345%22"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bec183d8-d71f-4d70-9e51-fa89b6419a3c",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "f61017f9-2c69-43fd-b369-e3b71c701ee0",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:08 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 266,
          "responseSize": 62
        },
        "id": "91c518e1-2a78-45e7-8857-bfe1a7335bb9",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:83)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c86d090c-f9f5-4970-9191-3d112576352d",
          "length": 110,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6607dd72-9bb9-48f8-b500-ace50a710278"
        },
        "item": {
          "id": "b1403256-f03a-49a2-ac29-ce3890ef6753",
          "name": "Validate user is unable to display patient demograph dropdown without Authorization",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "tmb"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "483b12e9-3f56-4843-ba66-602654185186",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "e72721ac-d36c-42df-9ce0-9c90dacd4a6d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-demograph-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "tmb"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3a350100-b4e3-456a-97d1-2ec48ad4ea2a",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "a806c758-353f-4a2c-a0d3-8dfb460fb489",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:08 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 339,
          "responseSize": 62
        },
        "id": "b1403256-f03a-49a2-ac29-ce3890ef6753",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "78cc3a11-ed96-457f-943f-e218915418ff",
          "length": 110,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c00ba687-9289-40cc-a64b-c9689b29c4b5"
        },
        "item": {
          "id": "6b386dd2-2aff-4f9c-a01d-deaa9c1729c2",
          "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "tmb"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f482f6a-8f50-4333-9cbf-6169b97efa5b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "bc73113d-9612-4fd2-b1b9-f7506e7f4369"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-demograph-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "tmb"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "98cf3376-512a-4e08-b4e4-5397b25ebbf8",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "60f9b7e1-6894-466e-aa3c-2abe52776147",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:09 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 317,
          "responseSize": 58
        },
        "id": "6b386dd2-2aff-4f9c-a01d-deaa9c1729c2",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "51ee5e26-1269-4554-b2db-9ca2a697a269",
          "length": 110,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9fcae7c1-374b-4548-926e-881bf3fa69e4"
        },
        "item": {
          "id": "94abf27c-bd62-4a86-afa4-4e845339adce",
          "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "tmb"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ae39226e-ba0b-4fb2-ad63-2d215ac7e88e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "555fa6b4-3216-4e47-87bc-3eb02c731b1f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-demograph-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "tmb"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5b4b7635-6a1f-40d6-b89e-99ce7810db35",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "64c343a0-f02f-40a4-a3c5-d96012f5b2ea",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:09 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "GET"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 268,
          "responseSize": 31
        },
        "id": "94abf27c-bd62-4a86-afa4-4e845339adce",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "97a55e04-205e-4153-9a76-93a06fd38d36",
          "length": 110,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cca8607f-6bb9-4865-a657-afd0daac6146"
        },
        "item": {
          "id": "53a567dc-6e50-4af8-bd1b-8b7ee1ddaae7",
          "name": "Validate user is able to display sub tumor type dropdown successfully",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "lung_cancer"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ca1fcd3-77d8-4f36-a5b3-a4ff438e44aa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\r",
                  "    \"Small Cell Lung Cancer\",\r",
                  "    \"Non-Small Cell Lung Cancer\",\r",
                  "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                  "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                  "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                  "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                  "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                  "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                  "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                  "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                  "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                  "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                  "    \"Lung Carcinoid (LUCA)\",\r",
                  "    \"Small Cell Lung Cancer (SCLC)\",\r",
                  "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                  "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                  "    \"Lung Adenocarcinoma (LUAD)\",\r",
                  "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                  "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                  "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                  "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                  "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                  "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                  "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                  "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                  "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                  "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                  "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                  "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                  "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                  "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                  "];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "b8317efb-ca38-46bc-8ce6-44acc2e509de"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "sub-tumor-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "lung_cancer"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9742d54a-de5d-4d9c-90e7-31a52035bea9",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b8a610a5-49c0-4134-896b-cc363c5e783a",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:10 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 303,
          "responseSize": 62
        },
        "id": "53a567dc-6e50-4af8-bd1b-8b7ee1ddaae7",
        "assertions": [
          {
            "assertion": "Response is an array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response is an array",
              "message": "expected { status: 'error', …(1) } to be an array",
              "stack": "AssertionError: expected { status: 'error', …(1) } to be an array\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "Response contains all expected elements",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains all expected elements",
              "message": "the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:87)"
            }
          },
          {
            "assertion": "Response does not contain unexpected elements",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "Response does not contain unexpected elements",
              "message": "response.forEach is not a function",
              "stack": "TypeError: response.forEach is not a function\n   at Object.eval sandbox-script.js:3:87)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "bbb5cf15-606f-4ebb-a37e-2ea59008e174",
          "length": 110,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1c6accd8-63fb-426a-9400-2c5ca1c5dac0"
        },
        "item": {
          "id": "d5dda25d-fc42-49c4-88a1-5dfdd1642951",
          "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "546f3157-a823-4261-bccf-a62f1d99b50b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "815a7e65-bc4e-43a3-950a-636040770890"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "sub-tumor-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bb586d8e-8031-4d80-bb2b-66cbbc525c9e",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "1f8eaf99-cb33-40c6-b2ff-c8be53932a40",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:10 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 336,
          "responseSize": 62
        },
        "id": "d5dda25d-fc42-49c4-88a1-5dfdd1642951",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:88)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c0bfdcd7-da07-4489-ade9-ef0733aee538",
          "length": 110,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bff39bfb-777b-4afb-beec-aa0831a53874"
        },
        "item": {
          "id": "ad28aa72-bbe9-4de8-a8bb-ff85e206689b",
          "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92b8ed41-250b-41ce-9079-4caf87618752",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "cb0be9fe-b9fa-47ac-a0e1-7c1b632aed5c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "sub-tumor-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "%2212345%22"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a8a76d36-0fb7-4022-973f-b3ae3255e613",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "0d9d63a6-9345-4164-932d-a0dca3b39992",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:10 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 288,
          "responseSize": 62
        },
        "id": "ad28aa72-bbe9-4de8-a8bb-ff85e206689b",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:89)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "dbba9316-b90b-496b-9dd6-b0dc38cff995",
          "length": 110,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ddc1c400-2c6e-4fe8-896d-ad4018cb0c46"
        },
        "item": {
          "id": "32efb8d8-2723-48b0-a0ed-adddac71ca78",
          "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "lung_cancer"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "20181b18-8498-4dda-beac-113a2dd11f10",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "1818d72f-61c8-47bd-aacc-2c3ccee22292"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "sub-tumor-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "lung_cancer"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3c40763f-4938-4ce1-9533-cb14fa7644f6",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "2ba3e2c6-e517-4760-9838-601abb288ba6",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:12 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 330,
          "responseSize": 62
        },
        "id": "32efb8d8-2723-48b0-a0ed-adddac71ca78",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "10001956-7138-443c-9e1b-727eb9851b99",
          "length": 110,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d5baf5f9-693e-4fb5-b7cd-718b96fffcfe"
        },
        "item": {
          "id": "e35fa05e-644b-43d2-8cb1-f2d3b03d8d3b",
          "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "lung_cancer"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4550505e-fae1-4552-b4c6-bff9c6d8634c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "ab5acd98-065e-48ca-90bd-8c89a5b0df5a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "sub-tumor-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "lung_cancer"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "daf613d0-4a1e-487a-96c9-3fa5246a087c",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "7edea89c-2af5-483c-8dd4-4838534b8d17",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:12 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 304,
          "responseSize": 58
        },
        "id": "e35fa05e-644b-43d2-8cb1-f2d3b03d8d3b",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b5c8ca09-6139-436a-8b03-09653d916b38",
          "length": 110,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f1de7f95-d289-4f86-b52f-17569fabde87"
        },
        "item": {
          "id": "16654890-e93d-4e45-a2b3-9c29aac7a92f",
          "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "{{key}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b3a15f54-852c-42c3-b8d0-b91a9ca32020",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "972decf7-f957-4c21-b206-01cc3022ec59"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "sub-tumor-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "{{key}}"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7fdb0b95-6863-4ff0-97a4-667f6dd1b19e",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "21d89894-246f-4604-8be3-9d50ce2aa6c6",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:12 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "GET"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 278,
          "responseSize": 31
        },
        "id": "16654890-e93d-4e45-a2b3-9c29aac7a92f",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8557e24c-233e-48a6-95be-b486798e8fee",
          "length": 110,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9e5547a9-79a0-4fe5-b786-e9cf0c7ab117"
        },
        "item": {
          "id": "f3e3ac14-e788-4c13-8123-733beba5a850",
          "name": "Validate user is able to get patient file details successfully",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "2d6292b4-9de5-439d-9365-b5161373863b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-file-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1c30344d-3d8e-4c82-b6f6-d45c03df4ece",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "7f3d01fd-875d-4fe6-8dc5-28dbb986142e",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 303,
          "responseSize": 62
        },
        "id": "f3e3ac14-e788-4c13-8123-733beba5a850",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:93)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'error' to deeply equal 'success'",
              "stack": "AssertionError: expected 'error' to deeply equal 'success'\n   at Object.eval sandbox-script.js:3:93)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Patient file details retrieved'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient file details retrieved'\n   at Object.eval sandbox-script.js:4:93)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f8b0dd84-c31d-4c7b-8546-4dfe976db54b",
          "length": 110,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c61e825c-20c0-4f11-9c39-fea08da736e7"
        },
        "item": {
          "id": "620fcdcd-0430-4126-ba4e-064960075eee",
          "name": "Validate user is unable to get patient file details with missing required parameter",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "009bf090-c640-4e53-a765-34a5619705a2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a0bb17a5-a6fd-4634-9649-751527b9034f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-file-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "%22%22"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5e6a246b-8a67-46c7-b82b-40a01f4bd12c",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "7fc99b59-251a-4694-abb3-355f50279264",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 363,
          "responseSize": 62
        },
        "id": "620fcdcd-0430-4126-ba4e-064960075eee",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:94)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "046ea7a1-11c6-4f7e-9e9f-35ad42919282",
          "length": 110,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a010c6de-d165-4426-af3c-9192a788b848"
        },
        "item": {
          "id": "161d83ca-56f2-4a8e-9871-4042d477cc39",
          "name": "Validate user is unable to get patient file details with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e44b52f-de0e-4bc1-89ef-f9704f9145c4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "9bb4d72d-1022-4830-9338-850e2bf72721"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-file-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "%2212345%22"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f7a37e5e-c3c9-4000-aa5d-2803c108c67f",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6c7deff9-80d8-401d-b214-e1d2f2f03398",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:14 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 267,
          "responseSize": 62
        },
        "id": "161d83ca-56f2-4a8e-9871-4042d477cc39",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:95)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "fc8a35f1-3cba-4e97-8a1c-8460eaad3c68",
          "length": 110,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b448bec0-3358-487d-81d0-b7088eb261bd"
        },
        "item": {
          "id": "6bf985fa-ce94-4999-847f-e3c44563bf48",
          "name": "Validate user is unable to get patient file details without Authorization",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d7e3889b-583e-4b3e-b122-e6f4b34fcbf5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "3554c22b-002b-4946-8dbe-7e79cf2354ae"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-file-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "eb4fd7be-da20-4a6f-8213-1c940a7beaea",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "76547bfa-3e75-4122-a5de-9486d10f23d5",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:14 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 267,
          "responseSize": 62
        },
        "id": "6bf985fa-ce94-4999-847f-e3c44563bf48",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5c1588c9-647c-4cb7-9e89-991606127284",
          "length": 110,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a45d7733-fd69-4086-8e7e-82c9a4adfc2c"
        },
        "item": {
          "id": "5590f9d7-c30d-4dfe-8710-9207e69bb799",
          "name": "Validate user is unable to get patient file details as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "07fc5e38-e268-4801-9cef-c13daad40d21",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "53b34036-a8be-43e2-8b71-e75e41ba065f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-file-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f3ea8199-6990-4522-8dbf-70436ceee417",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "062028af-ec1e-4568-bb9f-941080abb956",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:14 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 300,
          "responseSize": 58
        },
        "id": "5590f9d7-c30d-4dfe-8710-9207e69bb799",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "89e061d4-ea9d-4fae-b828-a6ec6a8e1bb8",
          "length": 110,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d98f096e-25be-4145-8c84-664f3523bf80"
        },
        "item": {
          "id": "38dfc11f-00f6-4826-9dfd-08e8d0ce831f",
          "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{uid}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a786fb84-6150-413c-a219-36d3c46783b7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "9a644f40-7ed6-4278-8d6d-4adf8a5f6731"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-file-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "f1462e5d-5fd6-4907-ad9f-1cbb61e7d63b"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e80399dc-b84e-4a80-91c0-5eb10683dd25",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "265efe02-b016-4603-8388-6ebdd3fcbf48",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "GET"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 270,
          "responseSize": 31
        },
        "id": "38dfc11f-00f6-4826-9dfd-08e8d0ce831f",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Method Not Allowed'",
              "stack": "AssertionError: expected undefined to deeply equal 'Method Not Allowed'\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d571f038-8569-438f-a0f6-9c849d58be74",
          "length": 110,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "373d2920-45bd-46af-a04b-a4f4f8b21ee6"
        },
        "item": {
          "id": "5fc43fb9-13e7-4713-92fa-2700db894d2c",
          "name": "validate user should be able to remove uploaded files successfully",
          "request": {
            "url": {
              "path": [
                "remove-uploaded-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6ba7d4ed-620b-4978-9ae2-8c67e1ae2cdb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Files removed successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "51bf9136-50d7-485b-af93-f394344cee6a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "remove-uploaded-files"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5f1af729-6d67-4847-b5e1-4df284be91ca",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "25",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"file_path\": \"\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "7b7102d9-5b99-4565-a3ad-cac2a26b40e5",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 277,
          "responseSize": 62
        },
        "id": "5fc43fb9-13e7-4713-92fa-2700db894d2c",
        "assertions": [
          {
            "assertion": "Response status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status code is 200",
              "message": "expected 401 to equal 200",
              "stack": "AssertionError: expected 401 to equal 200\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Files removed successfully'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Files removed successfully'\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "43c7cd33-2920-41e7-8af5-e10a77651755",
          "length": 110,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "09398115-a118-4287-a177-8170c9db6c85"
        },
        "item": {
          "id": "a454de77-a235-4c2c-983a-39290e086895",
          "name": "validate user should not be able to remove uploaded files if already removed",
          "request": {
            "url": {
              "path": [
                "remove-uploaded-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3253a283-f7b4-4078-869d-a36b8c40409b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 400\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(400);\r",
                  "});\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                  "});"
                ],
                "_lastExecutionId": "989acf2a-251e-4da4-90c3-6c06cb5bb134"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "remove-uploaded-files"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "efc91d13-6f18-48bb-a401-9d931fe7274a",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "25",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"file_path\": \"\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "58910b7c-6adb-418d-83aa-b62c1c72a6bd",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 299,
          "responseSize": 62
        },
        "id": "a454de77-a235-4c2c-983a-39290e086895",
        "assertions": [
          {
            "assertion": "Response status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status code is 400",
              "message": "expected 401 to equal 400",
              "stack": "AssertionError: expected 401 to equal 400\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Error while removing files'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Error while removing files'\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d80ed61d-5ead-466d-9c40-4c9781405099",
          "length": 110,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d5054beb-7eb0-4af8-a2ab-389985048cfd"
        },
        "item": {
          "id": "9220a91e-dbf7-48e0-b32e-2ecbe6551898",
          "name": "validate user should not be able to remove uploaded files without incorrect file path",
          "request": {
            "url": {
              "path": [
                "remove-uploaded-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"file_path\": \"\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c371755e-9a97-4600-bef2-f2d7b48a5e51",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 400\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(400);\r",
                  "});\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                  "});"
                ],
                "_lastExecutionId": "ce4fd8e6-647b-4697-8e59-2641e6e6fb0f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "remove-uploaded-files"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9921ce02-17bb-4e9b-865f-b3b3c44d5205",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "25",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"file_path\": \"\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "4c172260-b136-4b55-bfe9-384c6f36b66f",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:16 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 272,
          "responseSize": 62
        },
        "id": "9220a91e-dbf7-48e0-b32e-2ecbe6551898",
        "assertions": [
          {
            "assertion": "Response status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status code is 400",
              "message": "expected 401 to equal 400",
              "stack": "AssertionError: expected 401 to equal 400\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Missing required fields'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Missing required fields'\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d04be233-53ff-4fde-abbe-d9c9f031cfa6",
          "length": 110,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "03a08e3f-8646-4056-8280-7d244dd812e4"
        },
        "item": {
          "id": "fb942ac6-874d-421a-b425-321732d96c57",
          "name": "validate user should not be able to remove uploaded files without authorization",
          "request": {
            "url": {
              "path": [
                "remove-uploaded-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "229ab736-61d8-4ec6-858d-9435506bf1c9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 401\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(401);\r",
                  "});\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "3d1fade1-d1c8-4b47-a55d-68c1c6df474e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "remove-uploaded-files"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fbc27c95-b21a-4a0c-a857-9e566edd65a4",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "27",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "\r\n{\r\n    \"file_path\": \"\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "83db6aef-5292-479c-b7f7-8cd0469581b4",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:16 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 398,
          "responseSize": 62
        },
        "id": "fb942ac6-874d-421a-b425-321732d96c57",
        "assertions": [
          {
            "assertion": "Response status code is 401",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f1fa9f73-a86d-468d-bf4f-f76ac8b4b75c",
          "length": 110,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7ab39ef6-c5b8-4d06-93fe-85974d64a8f8"
        },
        "item": {
          "id": "31118503-b23b-4950-9c93-ad16a1030ba2",
          "name": "validate user should not be able to remove uploaded files with incorrect token",
          "request": {
            "url": {
              "path": [
                "remove-uploaded-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI4M2Q1MjkzNS1hN2RjLTQ4MzYtYmMxYS0yMTY2MWU5YzE0NGQiLCJldmVudF9pZCI6IjliNTkxZTVlLTUxOTUtNGI4Mi1hY2YzLTI3OTllNDZjMDI1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzMTE1NzIsImV4cCI6MTcxODMxNTE3MiwiaWF0IjoxNzE4MzExNTcyLCJqdGkiOiJlMDI3YTNmMS03YzhmLTQ5YjUtYTBhOS1iZThhY2RhZDc4NGEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.hMPOngVxdfUdxzwbcgJjK-2tDFWrLi3gBFQx36qhsULRDGzMda6z4uXDtQEtBdmLRjZyjzoUbr4QlXPMNLetGzk-xTXacB0a4bE24yt4wJ8q2ZaMBDojsykjjyHsB5LpLjIjOMI0pb9YkA7fakWQ_rRkUYVIgRExZfLFh4LmPSPJaEfEv54e_BXz5ojX2KtcLBG_GqTOa-oMRJnzQDF-jM5-gruMZtLCmrDKH2u46bRaKCyJIXXWlEfSyGT5t7PZB8ymp2wFeuZdf0of2CgYXSXFecuwk1T4lmG4BiOBtLcDS9GUy0W9j4iltOSDmulbcAxAEoGbutupjeyJo7l",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d665843b-05c0-4250-a137-05d6c8680651",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 401\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(401);\r",
                  "});\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "2ebbdce0-7382-4acc-8b9d-ec0500963aa6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "remove-uploaded-files"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI4M2Q1MjkzNS1hN2RjLTQ4MzYtYmMxYS0yMTY2MWU5YzE0NGQiLCJldmVudF9pZCI6IjliNTkxZTVlLTUxOTUtNGI4Mi1hY2YzLTI3OTllNDZjMDI1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzMTE1NzIsImV4cCI6MTcxODMxNTE3MiwiaWF0IjoxNzE4MzExNTcyLCJqdGkiOiJlMDI3YTNmMS03YzhmLTQ5YjUtYTBhOS1iZThhY2RhZDc4NGEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.hMPOngVxdfUdxzwbcgJjK-2tDFWrLi3gBFQx36qhsULRDGzMda6z4uXDtQEtBdmLRjZyjzoUbr4QlXPMNLetGzk-xTXacB0a4bE24yt4wJ8q2ZaMBDojsykjjyHsB5LpLjIjOMI0pb9YkA7fakWQ_rRkUYVIgRExZfLFh4LmPSPJaEfEv54e_BXz5ojX2KtcLBG_GqTOa-oMRJnzQDF-jM5-gruMZtLCmrDKH2u46bRaKCyJIXXWlEfSyGT5t7PZB8ymp2wFeuZdf0of2CgYXSXFecuwk1T4lmG4BiOBtLcDS9GUy0W9j4iltOSDmulbcAxAEoGbutupjeyJo7l",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dc9ce711-a7b1-45da-9a37-80fbf6476fe5",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "27",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "\r\n{\r\n    \"file_path\": \"\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI4M2Q1MjkzNS1hN2RjLTQ4MzYtYmMxYS0yMTY2MWU5YzE0NGQiLCJldmVudF9pZCI6IjliNTkxZTVlLTUxOTUtNGI4Mi1hY2YzLTI3OTllNDZjMDI1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzMTE1NzIsImV4cCI6MTcxODMxNTE3MiwiaWF0IjoxNzE4MzExNTcyLCJqdGkiOiJlMDI3YTNmMS03YzhmLTQ5YjUtYTBhOS1iZThhY2RhZDc4NGEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.hMPOngVxdfUdxzwbcgJjK-2tDFWrLi3gBFQx36qhsULRDGzMda6z4uXDtQEtBdmLRjZyjzoUbr4QlXPMNLetGzk-xTXacB0a4bE24yt4wJ8q2ZaMBDojsykjjyHsB5LpLjIjOMI0pb9YkA7fakWQ_rRkUYVIgRExZfLFh4LmPSPJaEfEv54e_BXz5ojX2KtcLBG_GqTOa-oMRJnzQDF-jM5-gruMZtLCmrDKH2u46bRaKCyJIXXWlEfSyGT5t7PZB8ymp2wFeuZdf0of2CgYXSXFecuwk1T4lmG4BiOBtLcDS9GUy0W9j4iltOSDmulbcAxAEoGbutupjeyJo7l",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "175d97f5-9a94-4976-8e10-cd653c9840dc",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:16 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 294,
          "responseSize": 58
        },
        "id": "31118503-b23b-4950-9c93-ad16a1030ba2",
        "assertions": [
          {
            "assertion": "Response status code is 401",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e4f456e9-384c-427b-b60c-035e5b96e445",
          "length": 110,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a09d0260-3cf7-47a0-b863-80199ae3fa2a"
        },
        "item": {
          "id": "1e6f57fa-37a9-46c4-8603-d29aa0757aef",
          "name": "validate user should not be able to remove uploaded files with incorrect CRUD operation",
          "request": {
            "url": {
              "path": [
                "remove-uploaded-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8531bec2-c034-40b3-9525-8dc5bde50004",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 405\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(405);\r",
                  "});\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "54a8ac73-bcec-4925-bb9c-82d40d8d2c43"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "remove-uploaded-files"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1fb7dc6c-65de-4229-a920-8c3158371de9",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "25",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"file_path\": \"\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "6b492fbe-d153-4ea6-a9d4-d9fd65753482",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:17 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 290,
          "responseSize": 31
        },
        "id": "1e6f57fa-37a9-46c4-8603-d29aa0757aef",
        "assertions": [
          {
            "assertion": "Response status code is 405",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Method Not Allowed'",
              "stack": "AssertionError: expected undefined to deeply equal 'Method Not Allowed'\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f360d8e4-66e5-40b1-8489-f9250edfff67",
          "length": 110,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3269f7a6-b340-4c50-bfa5-245cf20f5dc9"
        },
        "item": {
          "id": "d23c770c-245f-41c0-9324-21a2117fe336",
          "name": "Validate user is able to delete Patient's data successfully",
          "request": {
            "url": {
              "path": [
                "delete-patient",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab81cd1c-ac92-4335-8bbd-6db4c7435a02",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient deleted successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "36726ce7-8b77-48f3-9953-5f056f34c10b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "delete-patient",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fa67a6f3-7791-44ed-a405-f69e9ea12651",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "cd092df4-52fe-40bc-add6-6e043ab94ff4",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:17 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 537,
          "responseSize": 62
        },
        "id": "d23c770c-245f-41c0-9324-21a2117fe336",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Patient deleted successfully'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient deleted successfully'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3dd842b0-651d-443e-8dab-51a127e09b4e",
          "length": 110,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c0fac205-3931-44d5-b533-2285df64fffe"
        },
        "item": {
          "id": "5a5c5e87-10d8-47b2-837f-8abdf7a3a9f4",
          "name": "Validate user is not able to delete Patient's data if already deleted.",
          "request": {
            "url": {
              "path": [
                "delete-patient",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d4cdbb09-2eae-4220-a330-3f4d98e9e6ff",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                  "});"
                ],
                "_lastExecutionId": "05c70fb3-4b28-4d81-8373-72f2f0f1546d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "delete-patient",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "40b3036a-d982-4861-9c88-8a9f2459ebb3",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "468944c8-f94d-45f0-8462-58d54872a098",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:18 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 786,
          "responseSize": 62
        },
        "id": "5a5c5e87-10d8-47b2-837f-8abdf7a3a9f4",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Invalid id'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Invalid id'\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "47e0ba7f-93c2-434f-b2ee-5e318f2260d7",
          "length": 110,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b48013ad-734d-46f9-be9a-b5a7e0895a72"
        },
        "item": {
          "id": "93b156b3-5440-404f-af67-7d4972b7a946",
          "name": "Validate user is unable to delete Patient's data with incorrect query data",
          "request": {
            "url": {
              "path": [
                "delete-patient",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9642083-43b2-4e1f-aa35-a64b1be4a35d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                  "});"
                ],
                "_lastExecutionId": "bf5bdfe5-6cac-47de-a131-ee0cd78fb5b5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "delete-patient",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "12345"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7caa8f08-a2ab-44d0-8175-5344baa902d3",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "3b8cf1f4-b34a-47a7-84df-e940ad7027e5",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 546,
          "responseSize": 62
        },
        "id": "93b156b3-5440-404f-af67-7d4972b7a946",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Authorization header is missing' to deeply equal 'Invalid id'",
              "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Invalid id'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "58dd07bf-f479-4ec3-93d1-0c5a371fc260",
          "length": 110,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "791c8568-7fb8-4186-822d-6a094d131ca5"
        },
        "item": {
          "id": "f1db8312-6013-42a9-916b-f19a2dadb6b4",
          "name": "Validate user is unable to delete Patient's data without Authorization",
          "request": {
            "url": {
              "path": [
                "delete-patient",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "73e07a7a-4a5f-4f4f-84b9-2b401dcc64b8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "f90ea6ee-c6ac-4839-bee9-b454358bfc13"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "delete-patient",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3cc64076-bbd4-4ab3-b765-c3c317173111",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "45125578-32fa-4de8-bf79-5771b0c47604",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:20 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 665,
          "responseSize": 62
        },
        "id": "f1db8312-6013-42a9-916b-f19a2dadb6b4",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "12e566f2-7547-4141-ab6c-c7a53f73b65a",
          "length": 110,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f9852b38-7e90-4afe-80d0-babd602e4705"
        },
        "item": {
          "id": "4c1e823b-a22d-4a1f-b368-e4e2f76876fd",
          "name": "Validate user is unable to delete Patient's data as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "delete-patient",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bcbcaca8-de5f-4423-a911-d180257ebc54",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "4d39ccab-8244-4f5f-9300-ee525c4e8be1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "delete-patient",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2eb6b2e7-33c2-44a9-8dbd-fe7f9ad3b27d",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "54511ea3-b6ca-4627-aa09-43d53efd8629",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:20 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 633,
          "responseSize": 58
        },
        "id": "4c1e823b-a22d-4a1f-b368-e4e2f76876fd",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "df392def-51b5-4238-854b-014525f2d39d",
          "length": 110,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "07a178e5-d68f-43e2-ad98-a3cc183493fb"
        },
        "item": {
          "id": "fd4e77bc-bb4f-4ca3-909b-9c611eb1aa3e",
          "name": "Validate user is unable to delete Patient's data as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "delete-patient",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f859699-4e10-4391-a113-e43f6b1f174a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "78a6b668-f1c0-48a1-b16f-bb14c3e32730"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "delete-patient",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d38681af-3540-4197-906f-8fa58d57cfd1",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "60676d8b-09d3-4353-adce-79af41507270",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Fri, 14 Jun 2024 03:14:21 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "DELETE"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 739,
          "responseSize": 31
        },
        "id": "fd4e77bc-bb4f-4ca3-909b-9c611eb1aa3e",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Method Not Allowed'",
              "stack": "AssertionError: expected undefined to deeply equal 'Method Not Allowed'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 6204
    },
    "failures": [
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\RHITAM BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "5fb13d39e81c55635d4f1686de04f951",
          "id": "dd024aa1-91b0-4f6f-99c8-8902942f9a97",
          "timestamp": 1718334803733,
          "stacktrace": [
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request (C:\\Users\\RHITAM",
              "typeName": "Requester",
              "methodName": "request (C:\\Users\\RHITAM",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": "C:\\Users\\RHITAM",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create (C:\\Users\\RHITAM",
              "typeName": "Requester",
              "methodName": "create (C:\\Users\\RHITAM",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create (C:\\Users\\RHITAM",
              "typeName": "RequesterPool",
              "methodName": "create (C:\\Users\\RHITAM",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": "C:\\Users\\RHITAM",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": "C:\\Users\\RHITAM",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper (C:\\Users\\RHITAM",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish (C:\\Users\\RHITAM",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": "C:\\Users\\RHITAM",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit (C:\\Users\\RHITAM",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable (C:\\Users\\RHITAM",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries (C:\\Users\\RHITAM",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable (C:\\Users\\RHITAM",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap (C:\\Users\\RHITAM",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries (C:\\Users\\RHITAM",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "BHATTACHARYA\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable (C:\\Users\\RHITAM",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "0efc6d5c-b986-4116-b341-9f8f184ce808",
          "name": "Validate user should be able to login using valid credentials Copy",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "53c3940d-69e6-494f-a53d-61d92b2112c9",
              "name": "Authentication successful",
              "originalRequest": {
                "url": {
                  "path": [
                    "signin"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"access_token\": \"<string>\",\n  \"refresh_token\": \"<string>\",\n  \"last_login\": \"<string>\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "0b604d2a-d212-4b8a-bc4c-115c0fffac92",
              "name": "Unauthorized - Invalid credentials",
              "originalRequest": {
                "url": {
                  "path": [
                    "signin"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"message\": \"<string>\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "dffd7f72-7b26-470f-ad1a-9c0925c16f78",
              "name": "Forbidden - Account inactive",
              "originalRequest": {
                "url": {
                  "path": [
                    "signin"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"message\": \"<string>\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "bbd6f85c-b524-4a70-98ff-9ea445ce9c9f",
              "name": "In case of server fails to respond",
              "originalRequest": {
                "url": {
                  "path": [
                    "signin"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"error\": \"<string>\"\n}",
              "cookie": []
            }
          ],
          "event": []
        },
        "parent": {
          "id": "40add62d-bc0d-4bb1-99fa-4066a53dc200",
          "name": "Sign In",
          "item": [
            {
              "id": "0efc6d5c-b986-4116-b341-9f8f184ce808",
              "name": "Validate user should be able to login using valid credentials Copy",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "53c3940d-69e6-494f-a53d-61d92b2112c9",
                  "name": "Authentication successful",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "signin"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"access_token\": \"<string>\",\n  \"refresh_token\": \"<string>\",\n  \"last_login\": \"<string>\"\n}",
                  "cookie": []
                },
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "0b604d2a-d212-4b8a-bc4c-115c0fffac92",
                  "name": "Unauthorized - Invalid credentials",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "signin"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"message\": \"<string>\"\n}",
                  "cookie": []
                },
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "dffd7f72-7b26-470f-ad1a-9c0925c16f78",
                  "name": "Forbidden - Account inactive",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "signin"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"message\": \"<string>\"\n}",
                  "cookie": []
                },
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "bbd6f85c-b524-4a70-98ff-9ea445ce9c9f",
                  "name": "In case of server fails to respond",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "signin"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error\": \"<string>\"\n}",
                  "cookie": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 110,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c8b97326-7128-446a-8713-a961bfdb5195",
          "httpRequestId": "0f79c477-65d0-4c1b-b209-0f235a724d10"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "e29e072ef3ea2eec2cc4908b5b226c58",
          "id": "10639311-9a8d-46ce-ba25-b2c25c8a4fb9",
          "timestamp": 1718334804529,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "eee65936-a59e-4af3-8a12-303b4da20e00",
          "name": "Validate list of confirmed Patient",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "Limit",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad35424b-cdc4-4b19-b761-1fd8699f055e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "d6b67a07-43ab-453e-9ce8-98c88ef38cde"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "06574bf6-d983-45aa-884a-91f24a2bfa91",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "b01407b6-f787-4f77-aba2-60ac07b4c33a"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "24bd7283-77a5-4333-82b2-e6f795fffd3b",
          "name": "Lists information of all patients' data whose state is confirmed",
          "item": [
            {
              "id": "eee65936-a59e-4af3-8a12-303b4da20e00",
              "name": "Validate list of confirmed Patient",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "Limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad35424b-cdc4-4b19-b761-1fd8699f055e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d6b67a07-43ab-453e-9ce8-98c88ef38cde"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "06574bf6-d983-45aa-884a-91f24a2bfa91",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "b01407b6-f787-4f77-aba2-60ac07b4c33a"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ad832edf-dca9-48d9-9387-91b6cae970b2",
              "name": "Validate list of confirmed Patient not displaying without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3c7ab4e-c399-4591-b557-7ec5219e1975",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1c86fe57-7991-4e5b-9633-507d433615bb"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "baa1065c-3fe6-467a-b00a-9c1814a1aac1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9b154596-8eac-43be-8953-50798a0e4eb7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ebc8daee-cc99-488b-b5aa-d4e0e5f946e8",
              "name": "Validate list of confirmed Patient not displaying to the user as token is invalid/expired.",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52f06659-8e54-4a4f-8e33-a1ffd15247fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6bdde070-9c70-4852-9c58-632873848899"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f020180f-2d76-4fd5-accc-5269608a19d7",
              "name": "Validate list of confirmed Patient not displaying with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "100"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c53218df-9589-465b-baec-f59fda8e4484",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1adafd31-24d0-4cbb-9f9a-2c5f1da9dd89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4480da9c-88d5-448e-a0fd-d0363bf30f41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "41f0dac9-602c-4d66-8590-1f965024aa59"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f1c7f3ca-b6e6-473c-a8f5-0049b6375b08",
              "name": "Validate list of confirmed Patient not displaying to the user as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d1ffeca0-bf8a-4119-9a01-304ae19d8999",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "23a3312d-af05-4b95-b597-ae9218f319f2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5031bdac-760c-4679-9b97-bd075b186173",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "487a9811-78db-4837-b1e3-2c7baf0fb97d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7d31e919-7928-4523-87ac-0ddf771d429e",
          "length": 110,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "97c7b299-2688-4447-a60b-5091e55cf9cf",
          "scriptId": "ad35424b-cdc4-4b19-b761-1fd8699f055e",
          "execution": "d6b67a07-43ab-453e-9ce8-98c88ef38cde"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Patient information fetched successfu…'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient information fetched successfu…'\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "f84c78c8d5b8c06c6d7c6c59aabc27b3",
          "id": "eb38b52a-5f64-42e3-ad71-709e7e329fae",
          "timestamp": 1718334804534,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "eee65936-a59e-4af3-8a12-303b4da20e00",
          "name": "Validate list of confirmed Patient",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "Limit",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad35424b-cdc4-4b19-b761-1fd8699f055e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "d6b67a07-43ab-453e-9ce8-98c88ef38cde"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "06574bf6-d983-45aa-884a-91f24a2bfa91",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "b01407b6-f787-4f77-aba2-60ac07b4c33a"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "24bd7283-77a5-4333-82b2-e6f795fffd3b",
          "name": "Lists information of all patients' data whose state is confirmed",
          "item": [
            {
              "id": "eee65936-a59e-4af3-8a12-303b4da20e00",
              "name": "Validate list of confirmed Patient",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "Limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad35424b-cdc4-4b19-b761-1fd8699f055e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d6b67a07-43ab-453e-9ce8-98c88ef38cde"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "06574bf6-d983-45aa-884a-91f24a2bfa91",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "b01407b6-f787-4f77-aba2-60ac07b4c33a"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ad832edf-dca9-48d9-9387-91b6cae970b2",
              "name": "Validate list of confirmed Patient not displaying without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3c7ab4e-c399-4591-b557-7ec5219e1975",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1c86fe57-7991-4e5b-9633-507d433615bb"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "baa1065c-3fe6-467a-b00a-9c1814a1aac1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9b154596-8eac-43be-8953-50798a0e4eb7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ebc8daee-cc99-488b-b5aa-d4e0e5f946e8",
              "name": "Validate list of confirmed Patient not displaying to the user as token is invalid/expired.",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52f06659-8e54-4a4f-8e33-a1ffd15247fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6bdde070-9c70-4852-9c58-632873848899"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f020180f-2d76-4fd5-accc-5269608a19d7",
              "name": "Validate list of confirmed Patient not displaying with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "100"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c53218df-9589-465b-baec-f59fda8e4484",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1adafd31-24d0-4cbb-9f9a-2c5f1da9dd89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4480da9c-88d5-448e-a0fd-d0363bf30f41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "41f0dac9-602c-4d66-8590-1f965024aa59"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f1c7f3ca-b6e6-473c-a8f5-0049b6375b08",
              "name": "Validate list of confirmed Patient not displaying to the user as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d1ffeca0-bf8a-4119-9a01-304ae19d8999",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "23a3312d-af05-4b95-b597-ae9218f319f2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5031bdac-760c-4679-9b97-bd075b186173",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "487a9811-78db-4837-b1e3-2c7baf0fb97d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7d31e919-7928-4523-87ac-0ddf771d429e",
          "length": 110,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "97c7b299-2688-4447-a60b-5091e55cf9cf",
          "scriptId": "ad35424b-cdc4-4b19-b761-1fd8699f055e",
          "execution": "d6b67a07-43ab-453e-9ce8-98c88ef38cde"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "1c0b7dea5b16101a9d5493d5086be246",
          "id": "bc704632-1f1d-487a-8856-ed493934645d",
          "timestamp": 1718334805851,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f020180f-2d76-4fd5-accc-5269608a19d7",
          "name": "Validate list of confirmed Patient not displaying with incorrect query data",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "100"
                },
                {
                  "key": "limit",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c53218df-9589-465b-baec-f59fda8e4484",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                  "});"
                ],
                "_lastExecutionId": "1adafd31-24d0-4cbb-9f9a-2c5f1da9dd89"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4480da9c-88d5-448e-a0fd-d0363bf30f41",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "41f0dac9-602c-4d66-8590-1f965024aa59"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "24bd7283-77a5-4333-82b2-e6f795fffd3b",
          "name": "Lists information of all patients' data whose state is confirmed",
          "item": [
            {
              "id": "eee65936-a59e-4af3-8a12-303b4da20e00",
              "name": "Validate list of confirmed Patient",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "Limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad35424b-cdc4-4b19-b761-1fd8699f055e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d6b67a07-43ab-453e-9ce8-98c88ef38cde"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "06574bf6-d983-45aa-884a-91f24a2bfa91",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "b01407b6-f787-4f77-aba2-60ac07b4c33a"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ad832edf-dca9-48d9-9387-91b6cae970b2",
              "name": "Validate list of confirmed Patient not displaying without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3c7ab4e-c399-4591-b557-7ec5219e1975",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1c86fe57-7991-4e5b-9633-507d433615bb"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "baa1065c-3fe6-467a-b00a-9c1814a1aac1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9b154596-8eac-43be-8953-50798a0e4eb7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ebc8daee-cc99-488b-b5aa-d4e0e5f946e8",
              "name": "Validate list of confirmed Patient not displaying to the user as token is invalid/expired.",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52f06659-8e54-4a4f-8e33-a1ffd15247fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6bdde070-9c70-4852-9c58-632873848899"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f020180f-2d76-4fd5-accc-5269608a19d7",
              "name": "Validate list of confirmed Patient not displaying with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "100"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c53218df-9589-465b-baec-f59fda8e4484",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1adafd31-24d0-4cbb-9f9a-2c5f1da9dd89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4480da9c-88d5-448e-a0fd-d0363bf30f41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "41f0dac9-602c-4d66-8590-1f965024aa59"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f1c7f3ca-b6e6-473c-a8f5-0049b6375b08",
              "name": "Validate list of confirmed Patient not displaying to the user as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d1ffeca0-bf8a-4119-9a01-304ae19d8999",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "23a3312d-af05-4b95-b597-ae9218f319f2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5031bdac-760c-4679-9b97-bd075b186173",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "487a9811-78db-4837-b1e3-2c7baf0fb97d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cdaba3c2-19f6-4c22-8a00-3b31e6bec367",
          "length": 110,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "24b9578d-e5d5-4c5a-a8d9-3229833356fd",
          "scriptId": "c53218df-9589-465b-baec-f59fda8e4484",
          "execution": "1adafd31-24d0-4cbb-9f9a-2c5f1da9dd89"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Cannot find patients'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Cannot find patients'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "057dbbab873fbd7adf9470ee89d0262b",
          "id": "eacc256b-095b-45f2-8e0c-5b7a6e1462e1",
          "timestamp": 1718334805852,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f020180f-2d76-4fd5-accc-5269608a19d7",
          "name": "Validate list of confirmed Patient not displaying with incorrect query data",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "100"
                },
                {
                  "key": "limit",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c53218df-9589-465b-baec-f59fda8e4484",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                  "});"
                ],
                "_lastExecutionId": "1adafd31-24d0-4cbb-9f9a-2c5f1da9dd89"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4480da9c-88d5-448e-a0fd-d0363bf30f41",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "41f0dac9-602c-4d66-8590-1f965024aa59"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "24bd7283-77a5-4333-82b2-e6f795fffd3b",
          "name": "Lists information of all patients' data whose state is confirmed",
          "item": [
            {
              "id": "eee65936-a59e-4af3-8a12-303b4da20e00",
              "name": "Validate list of confirmed Patient",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "Limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad35424b-cdc4-4b19-b761-1fd8699f055e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d6b67a07-43ab-453e-9ce8-98c88ef38cde"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "06574bf6-d983-45aa-884a-91f24a2bfa91",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "b01407b6-f787-4f77-aba2-60ac07b4c33a"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ad832edf-dca9-48d9-9387-91b6cae970b2",
              "name": "Validate list of confirmed Patient not displaying without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3c7ab4e-c399-4591-b557-7ec5219e1975",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1c86fe57-7991-4e5b-9633-507d433615bb"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "baa1065c-3fe6-467a-b00a-9c1814a1aac1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9b154596-8eac-43be-8953-50798a0e4eb7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ebc8daee-cc99-488b-b5aa-d4e0e5f946e8",
              "name": "Validate list of confirmed Patient not displaying to the user as token is invalid/expired.",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52f06659-8e54-4a4f-8e33-a1ffd15247fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6bdde070-9c70-4852-9c58-632873848899"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f020180f-2d76-4fd5-accc-5269608a19d7",
              "name": "Validate list of confirmed Patient not displaying with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "100"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c53218df-9589-465b-baec-f59fda8e4484",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1adafd31-24d0-4cbb-9f9a-2c5f1da9dd89"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4480da9c-88d5-448e-a0fd-d0363bf30f41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "41f0dac9-602c-4d66-8590-1f965024aa59"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f1c7f3ca-b6e6-473c-a8f5-0049b6375b08",
              "name": "Validate list of confirmed Patient not displaying to the user as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d1ffeca0-bf8a-4119-9a01-304ae19d8999",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "23a3312d-af05-4b95-b597-ae9218f319f2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5031bdac-760c-4679-9b97-bd075b186173",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "487a9811-78db-4837-b1e3-2c7baf0fb97d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cdaba3c2-19f6-4c22-8a00-3b31e6bec367",
          "length": 110,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "24b9578d-e5d5-4c5a-a8d9-3229833356fd",
          "scriptId": "c53218df-9589-465b-baec-f59fda8e4484",
          "execution": "1adafd31-24d0-4cbb-9f9a-2c5f1da9dd89"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "fa16b32b478834c79271b7da4adb6fc0",
          "id": "c911cc7c-2471-4a23-925f-2fa150f28933",
          "timestamp": 1718334807052,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
          "name": "Validate Patient file uploaded successfully",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8a4aacda-6079-4292-b2c2-764600c99d0b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Defined responseData before using it in the test script\r",
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', () => {\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                  "});\r",
                  "\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_info_task_id = response.data.id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                  "\r",
                  "let url = response.data.data[0].url;\r",
                  "\r",
                  "// Set the URL as an environment variable\r",
                  "pm.environment.set(\"file_url\", url);\r",
                  ""
                ],
                "_lastExecutionId": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
              }
            }
          ]
        },
        "parent": {
          "id": "9e139528-2a05-4abb-b826-70052918f36c",
          "name": "patient file upload",
          "item": [
            {
              "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
              "name": "Validate Patient file uploaded successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a4aacda-6079-4292-b2c2-764600c99d0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Defined responseData before using it in the test script\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
                  }
                }
              ]
            },
            {
              "id": "57b71dae-bad1-449b-8ce1-999f5d50f563",
              "name": "Validate user is unable to upload multiple Patient files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be91c1d6-42dd-45ce-9915-310f3db5e125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "af575809-4075-4fa8-845b-71993dcf7706",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7fd617d6-74dc-4bc4-821a-f7dd8b5674ec"
                  }
                }
              ]
            },
            {
              "id": "2f40b587-cfb2-45dd-a46c-7698ded25521",
              "name": "Validate user is unable to upload files other than txt files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
                  }
                }
              ]
            },
            {
              "id": "1d61175a-7498-45ae-b1f7-636d755bc4e5",
              "name": "Validate user is unable to upload Patient file as user is unauthorized.",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24bf9cb5-1f6e-42ec-ba91-489a01cdd435",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "537b73bb-2a6c-4f95-9abd-4257121b55f0"
                  }
                }
              ]
            },
            {
              "id": "f498c57e-d84b-4004-990c-eb3b7ed950f9",
              "name": "Validate user is unable to upload without a file",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
                  }
                }
              ]
            },
            {
              "id": "2303ed6a-7526-4409-b81c-b5315f2eeb14",
              "name": "Validate user is unable to upload Patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667d9c8c-408b-420b-8a0d-fbd2cc70f9a7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ee78bff7-29a8-4b32-8d1d-067e68e68dcd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "41eefbf6-6d1d-4ca0-8167-83350f18b942",
          "length": 110,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "44e4654a-0505-46ab-82a7-e9d4f2dfdc71",
          "scriptId": "8a4aacda-6079-4292-b2c2-764600c99d0b",
          "execution": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Patient file uploaded'",
          "stack": "AssertionError: expected undefined to deeply equal 'Patient file uploaded'\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "60a7c8d431a47921dfa91185158b3784",
          "id": "c10c22df-dec3-43b3-a0fd-bb68c71206fb",
          "timestamp": 1718334807056,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
          "name": "Validate Patient file uploaded successfully",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8a4aacda-6079-4292-b2c2-764600c99d0b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Defined responseData before using it in the test script\r",
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', () => {\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                  "});\r",
                  "\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_info_task_id = response.data.id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                  "\r",
                  "let url = response.data.data[0].url;\r",
                  "\r",
                  "// Set the URL as an environment variable\r",
                  "pm.environment.set(\"file_url\", url);\r",
                  ""
                ],
                "_lastExecutionId": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
              }
            }
          ]
        },
        "parent": {
          "id": "9e139528-2a05-4abb-b826-70052918f36c",
          "name": "patient file upload",
          "item": [
            {
              "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
              "name": "Validate Patient file uploaded successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a4aacda-6079-4292-b2c2-764600c99d0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Defined responseData before using it in the test script\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
                  }
                }
              ]
            },
            {
              "id": "57b71dae-bad1-449b-8ce1-999f5d50f563",
              "name": "Validate user is unable to upload multiple Patient files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be91c1d6-42dd-45ce-9915-310f3db5e125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "af575809-4075-4fa8-845b-71993dcf7706",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7fd617d6-74dc-4bc4-821a-f7dd8b5674ec"
                  }
                }
              ]
            },
            {
              "id": "2f40b587-cfb2-45dd-a46c-7698ded25521",
              "name": "Validate user is unable to upload files other than txt files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
                  }
                }
              ]
            },
            {
              "id": "1d61175a-7498-45ae-b1f7-636d755bc4e5",
              "name": "Validate user is unable to upload Patient file as user is unauthorized.",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24bf9cb5-1f6e-42ec-ba91-489a01cdd435",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "537b73bb-2a6c-4f95-9abd-4257121b55f0"
                  }
                }
              ]
            },
            {
              "id": "f498c57e-d84b-4004-990c-eb3b7ed950f9",
              "name": "Validate user is unable to upload without a file",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
                  }
                }
              ]
            },
            {
              "id": "2303ed6a-7526-4409-b81c-b5315f2eeb14",
              "name": "Validate user is unable to upload Patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667d9c8c-408b-420b-8a0d-fbd2cc70f9a7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ee78bff7-29a8-4b32-8d1d-067e68e68dcd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "41eefbf6-6d1d-4ca0-8167-83350f18b942",
          "length": 110,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "44e4654a-0505-46ab-82a7-e9d4f2dfdc71",
          "scriptId": "8a4aacda-6079-4292-b2c2-764600c99d0b",
          "execution": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'id')",
          "checksum": "7968b7e0e6adfbc32cfd96627c083201",
          "id": "fe7945c3-5bfd-4755-977a-fb16ec33c1f3",
          "timestamp": 1718334807061,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
          "name": "Validate Patient file uploaded successfully",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8a4aacda-6079-4292-b2c2-764600c99d0b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Defined responseData before using it in the test script\r",
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', () => {\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                  "});\r",
                  "\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_info_task_id = response.data.id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                  "\r",
                  "let url = response.data.data[0].url;\r",
                  "\r",
                  "// Set the URL as an environment variable\r",
                  "pm.environment.set(\"file_url\", url);\r",
                  ""
                ],
                "_lastExecutionId": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
              }
            }
          ]
        },
        "parent": {
          "id": "9e139528-2a05-4abb-b826-70052918f36c",
          "name": "patient file upload",
          "item": [
            {
              "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
              "name": "Validate Patient file uploaded successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a4aacda-6079-4292-b2c2-764600c99d0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Defined responseData before using it in the test script\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
                  }
                }
              ]
            },
            {
              "id": "57b71dae-bad1-449b-8ce1-999f5d50f563",
              "name": "Validate user is unable to upload multiple Patient files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be91c1d6-42dd-45ce-9915-310f3db5e125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "af575809-4075-4fa8-845b-71993dcf7706",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7fd617d6-74dc-4bc4-821a-f7dd8b5674ec"
                  }
                }
              ]
            },
            {
              "id": "2f40b587-cfb2-45dd-a46c-7698ded25521",
              "name": "Validate user is unable to upload files other than txt files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
                  }
                }
              ]
            },
            {
              "id": "1d61175a-7498-45ae-b1f7-636d755bc4e5",
              "name": "Validate user is unable to upload Patient file as user is unauthorized.",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24bf9cb5-1f6e-42ec-ba91-489a01cdd435",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "537b73bb-2a6c-4f95-9abd-4257121b55f0"
                  }
                }
              ]
            },
            {
              "id": "f498c57e-d84b-4004-990c-eb3b7ed950f9",
              "name": "Validate user is unable to upload without a file",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
                  }
                }
              ]
            },
            {
              "id": "2303ed6a-7526-4409-b81c-b5315f2eeb14",
              "name": "Validate user is unable to upload Patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667d9c8c-408b-420b-8a0d-fbd2cc70f9a7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ee78bff7-29a8-4b32-8d1d-067e68e68dcd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "41eefbf6-6d1d-4ca0-8167-83350f18b942",
          "length": 110,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "44e4654a-0505-46ab-82a7-e9d4f2dfdc71",
          "scriptId": "8a4aacda-6079-4292-b2c2-764600c99d0b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 422",
          "stack": "AssertionError: expected response to have status code 400 but got 422\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "4b27cfd1941fbfdaf9c86f5a28ca9e4d",
          "id": "44b4d25d-8d85-4a43-8aa2-55b16e8d384b",
          "timestamp": 1718334807865,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "57b71dae-bad1-449b-8ce1-999f5d50f563",
          "name": "Validate user is unable to upload multiple Patient files",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [
                    "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                    "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                  ]
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be91c1d6-42dd-45ce-9915-310f3db5e125",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "af575809-4075-4fa8-845b-71993dcf7706",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "7fd617d6-74dc-4bc4-821a-f7dd8b5674ec"
              }
            }
          ]
        },
        "parent": {
          "id": "9e139528-2a05-4abb-b826-70052918f36c",
          "name": "patient file upload",
          "item": [
            {
              "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
              "name": "Validate Patient file uploaded successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a4aacda-6079-4292-b2c2-764600c99d0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Defined responseData before using it in the test script\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
                  }
                }
              ]
            },
            {
              "id": "57b71dae-bad1-449b-8ce1-999f5d50f563",
              "name": "Validate user is unable to upload multiple Patient files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be91c1d6-42dd-45ce-9915-310f3db5e125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "af575809-4075-4fa8-845b-71993dcf7706",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7fd617d6-74dc-4bc4-821a-f7dd8b5674ec"
                  }
                }
              ]
            },
            {
              "id": "2f40b587-cfb2-45dd-a46c-7698ded25521",
              "name": "Validate user is unable to upload files other than txt files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
                  }
                }
              ]
            },
            {
              "id": "1d61175a-7498-45ae-b1f7-636d755bc4e5",
              "name": "Validate user is unable to upload Patient file as user is unauthorized.",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24bf9cb5-1f6e-42ec-ba91-489a01cdd435",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "537b73bb-2a6c-4f95-9abd-4257121b55f0"
                  }
                }
              ]
            },
            {
              "id": "f498c57e-d84b-4004-990c-eb3b7ed950f9",
              "name": "Validate user is unable to upload without a file",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
                  }
                }
              ]
            },
            {
              "id": "2303ed6a-7526-4409-b81c-b5315f2eeb14",
              "name": "Validate user is unable to upload Patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667d9c8c-408b-420b-8a0d-fbd2cc70f9a7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ee78bff7-29a8-4b32-8d1d-067e68e68dcd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8a747b6-f8e7-4882-ad6b-9572cccb90bd",
          "length": 110,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0bbba910-eec8-4a3e-9882-76e31991233c",
          "scriptId": "be91c1d6-42dd-45ce-9915-310f3db5e125",
          "execution": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Patient file could not be uploaded'",
          "stack": "AssertionError: expected undefined to deeply equal 'Patient file could not be uploaded'\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "3d56b82cd30a887a92c8eabf8f31fa16",
          "id": "b823973b-ae67-4ced-b917-edbc9406aefe",
          "timestamp": 1718334807870,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "57b71dae-bad1-449b-8ce1-999f5d50f563",
          "name": "Validate user is unable to upload multiple Patient files",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [
                    "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                    "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                  ]
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be91c1d6-42dd-45ce-9915-310f3db5e125",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "af575809-4075-4fa8-845b-71993dcf7706",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "7fd617d6-74dc-4bc4-821a-f7dd8b5674ec"
              }
            }
          ]
        },
        "parent": {
          "id": "9e139528-2a05-4abb-b826-70052918f36c",
          "name": "patient file upload",
          "item": [
            {
              "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
              "name": "Validate Patient file uploaded successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a4aacda-6079-4292-b2c2-764600c99d0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Defined responseData before using it in the test script\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
                  }
                }
              ]
            },
            {
              "id": "57b71dae-bad1-449b-8ce1-999f5d50f563",
              "name": "Validate user is unable to upload multiple Patient files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be91c1d6-42dd-45ce-9915-310f3db5e125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "af575809-4075-4fa8-845b-71993dcf7706",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7fd617d6-74dc-4bc4-821a-f7dd8b5674ec"
                  }
                }
              ]
            },
            {
              "id": "2f40b587-cfb2-45dd-a46c-7698ded25521",
              "name": "Validate user is unable to upload files other than txt files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
                  }
                }
              ]
            },
            {
              "id": "1d61175a-7498-45ae-b1f7-636d755bc4e5",
              "name": "Validate user is unable to upload Patient file as user is unauthorized.",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24bf9cb5-1f6e-42ec-ba91-489a01cdd435",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "537b73bb-2a6c-4f95-9abd-4257121b55f0"
                  }
                }
              ]
            },
            {
              "id": "f498c57e-d84b-4004-990c-eb3b7ed950f9",
              "name": "Validate user is unable to upload without a file",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
                  }
                }
              ]
            },
            {
              "id": "2303ed6a-7526-4409-b81c-b5315f2eeb14",
              "name": "Validate user is unable to upload Patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667d9c8c-408b-420b-8a0d-fbd2cc70f9a7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ee78bff7-29a8-4b32-8d1d-067e68e68dcd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8a747b6-f8e7-4882-ad6b-9572cccb90bd",
          "length": 110,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0bbba910-eec8-4a3e-9882-76e31991233c",
          "scriptId": "be91c1d6-42dd-45ce-9915-310f3db5e125",
          "execution": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 422",
          "stack": "AssertionError: expected response to have status code 400 but got 422\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "54a5fc0b740d7a43aaa1489cd0963cd2",
          "id": "7199fdc7-f484-46be-91a4-fc9b2097ba87",
          "timestamp": 1718334808476,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2f40b587-cfb2-45dd-a46c-7698ded25521",
          "name": "Validate user is unable to upload files other than txt files",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
              }
            }
          ]
        },
        "parent": {
          "id": "9e139528-2a05-4abb-b826-70052918f36c",
          "name": "patient file upload",
          "item": [
            {
              "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
              "name": "Validate Patient file uploaded successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a4aacda-6079-4292-b2c2-764600c99d0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Defined responseData before using it in the test script\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
                  }
                }
              ]
            },
            {
              "id": "57b71dae-bad1-449b-8ce1-999f5d50f563",
              "name": "Validate user is unable to upload multiple Patient files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be91c1d6-42dd-45ce-9915-310f3db5e125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "af575809-4075-4fa8-845b-71993dcf7706",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7fd617d6-74dc-4bc4-821a-f7dd8b5674ec"
                  }
                }
              ]
            },
            {
              "id": "2f40b587-cfb2-45dd-a46c-7698ded25521",
              "name": "Validate user is unable to upload files other than txt files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
                  }
                }
              ]
            },
            {
              "id": "1d61175a-7498-45ae-b1f7-636d755bc4e5",
              "name": "Validate user is unable to upload Patient file as user is unauthorized.",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24bf9cb5-1f6e-42ec-ba91-489a01cdd435",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "537b73bb-2a6c-4f95-9abd-4257121b55f0"
                  }
                }
              ]
            },
            {
              "id": "f498c57e-d84b-4004-990c-eb3b7ed950f9",
              "name": "Validate user is unable to upload without a file",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
                  }
                }
              ]
            },
            {
              "id": "2303ed6a-7526-4409-b81c-b5315f2eeb14",
              "name": "Validate user is unable to upload Patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667d9c8c-408b-420b-8a0d-fbd2cc70f9a7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ee78bff7-29a8-4b32-8d1d-067e68e68dcd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "61a666c8-e596-47ff-8d89-32c2f428ff77",
          "length": 110,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c511cddf-46da-4697-9ea0-64fbbef44d40",
          "scriptId": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
          "execution": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Patient file could not be uploaded'",
          "stack": "AssertionError: expected undefined to deeply equal 'Patient file could not be uploaded'\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "31ff8a4b0fb518643697580082d5f8b3",
          "id": "479910dc-7c46-4449-ab06-bb9399403e31",
          "timestamp": 1718334808477,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2f40b587-cfb2-45dd-a46c-7698ded25521",
          "name": "Validate user is unable to upload files other than txt files",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
              }
            }
          ]
        },
        "parent": {
          "id": "9e139528-2a05-4abb-b826-70052918f36c",
          "name": "patient file upload",
          "item": [
            {
              "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
              "name": "Validate Patient file uploaded successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a4aacda-6079-4292-b2c2-764600c99d0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Defined responseData before using it in the test script\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
                  }
                }
              ]
            },
            {
              "id": "57b71dae-bad1-449b-8ce1-999f5d50f563",
              "name": "Validate user is unable to upload multiple Patient files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be91c1d6-42dd-45ce-9915-310f3db5e125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "af575809-4075-4fa8-845b-71993dcf7706",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7fd617d6-74dc-4bc4-821a-f7dd8b5674ec"
                  }
                }
              ]
            },
            {
              "id": "2f40b587-cfb2-45dd-a46c-7698ded25521",
              "name": "Validate user is unable to upload files other than txt files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
                  }
                }
              ]
            },
            {
              "id": "1d61175a-7498-45ae-b1f7-636d755bc4e5",
              "name": "Validate user is unable to upload Patient file as user is unauthorized.",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24bf9cb5-1f6e-42ec-ba91-489a01cdd435",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "537b73bb-2a6c-4f95-9abd-4257121b55f0"
                  }
                }
              ]
            },
            {
              "id": "f498c57e-d84b-4004-990c-eb3b7ed950f9",
              "name": "Validate user is unable to upload without a file",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
                  }
                }
              ]
            },
            {
              "id": "2303ed6a-7526-4409-b81c-b5315f2eeb14",
              "name": "Validate user is unable to upload Patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667d9c8c-408b-420b-8a0d-fbd2cc70f9a7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ee78bff7-29a8-4b32-8d1d-067e68e68dcd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "61a666c8-e596-47ff-8d89-32c2f428ff77",
          "length": 110,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c511cddf-46da-4697-9ea0-64fbbef44d40",
          "scriptId": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
          "execution": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "927c41a5e811fb50c7b25c6f105496a1",
          "id": "ddfd4ecf-5b53-4452-8ac5-ba2e5baad817",
          "timestamp": 1718334809294,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1d61175a-7498-45ae-b1f7-636d755bc4e5",
          "name": "Validate user is unable to upload Patient file as user is unauthorized.",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "24bf9cb5-1f6e-42ec-ba91-489a01cdd435",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "537b73bb-2a6c-4f95-9abd-4257121b55f0"
              }
            }
          ]
        },
        "parent": {
          "id": "9e139528-2a05-4abb-b826-70052918f36c",
          "name": "patient file upload",
          "item": [
            {
              "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
              "name": "Validate Patient file uploaded successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a4aacda-6079-4292-b2c2-764600c99d0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Defined responseData before using it in the test script\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
                  }
                }
              ]
            },
            {
              "id": "57b71dae-bad1-449b-8ce1-999f5d50f563",
              "name": "Validate user is unable to upload multiple Patient files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be91c1d6-42dd-45ce-9915-310f3db5e125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "af575809-4075-4fa8-845b-71993dcf7706",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7fd617d6-74dc-4bc4-821a-f7dd8b5674ec"
                  }
                }
              ]
            },
            {
              "id": "2f40b587-cfb2-45dd-a46c-7698ded25521",
              "name": "Validate user is unable to upload files other than txt files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
                  }
                }
              ]
            },
            {
              "id": "1d61175a-7498-45ae-b1f7-636d755bc4e5",
              "name": "Validate user is unable to upload Patient file as user is unauthorized.",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24bf9cb5-1f6e-42ec-ba91-489a01cdd435",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "537b73bb-2a6c-4f95-9abd-4257121b55f0"
                  }
                }
              ]
            },
            {
              "id": "f498c57e-d84b-4004-990c-eb3b7ed950f9",
              "name": "Validate user is unable to upload without a file",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
                  }
                }
              ]
            },
            {
              "id": "2303ed6a-7526-4409-b81c-b5315f2eeb14",
              "name": "Validate user is unable to upload Patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667d9c8c-408b-420b-8a0d-fbd2cc70f9a7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ee78bff7-29a8-4b32-8d1d-067e68e68dcd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8e20ed4-644d-4944-bd19-ca23e683a813",
          "length": 110,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1d2275fc-d2dc-43f0-a41e-251be05561d6",
          "scriptId": "24bf9cb5-1f6e-42ec-ba91-489a01cdd435",
          "execution": "537b73bb-2a6c-4f95-9abd-4257121b55f0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "efaacbf9ae05e6722d6e27fa051135f8",
          "id": "94869c24-f27f-4cd1-9858-2e70fb4be15b",
          "timestamp": 1718334809909,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f498c57e-d84b-4004-990c-eb3b7ed950f9",
          "name": "Validate user is unable to upload without a file",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
              }
            }
          ]
        },
        "parent": {
          "id": "9e139528-2a05-4abb-b826-70052918f36c",
          "name": "patient file upload",
          "item": [
            {
              "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
              "name": "Validate Patient file uploaded successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a4aacda-6079-4292-b2c2-764600c99d0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Defined responseData before using it in the test script\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
                  }
                }
              ]
            },
            {
              "id": "57b71dae-bad1-449b-8ce1-999f5d50f563",
              "name": "Validate user is unable to upload multiple Patient files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be91c1d6-42dd-45ce-9915-310f3db5e125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "af575809-4075-4fa8-845b-71993dcf7706",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7fd617d6-74dc-4bc4-821a-f7dd8b5674ec"
                  }
                }
              ]
            },
            {
              "id": "2f40b587-cfb2-45dd-a46c-7698ded25521",
              "name": "Validate user is unable to upload files other than txt files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
                  }
                }
              ]
            },
            {
              "id": "1d61175a-7498-45ae-b1f7-636d755bc4e5",
              "name": "Validate user is unable to upload Patient file as user is unauthorized.",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24bf9cb5-1f6e-42ec-ba91-489a01cdd435",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "537b73bb-2a6c-4f95-9abd-4257121b55f0"
                  }
                }
              ]
            },
            {
              "id": "f498c57e-d84b-4004-990c-eb3b7ed950f9",
              "name": "Validate user is unable to upload without a file",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
                  }
                }
              ]
            },
            {
              "id": "2303ed6a-7526-4409-b81c-b5315f2eeb14",
              "name": "Validate user is unable to upload Patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667d9c8c-408b-420b-8a0d-fbd2cc70f9a7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ee78bff7-29a8-4b32-8d1d-067e68e68dcd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7b2b5baf-bb59-447a-9b44-96772da147f3",
          "length": 110,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2c9e9236-e6b5-4999-b9d3-3cc46d31b5d7",
          "scriptId": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
          "execution": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Patient file could not be uploaded'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient file could not be uploaded'\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "b73aa327a4b7c120a30889518c5dcf13",
          "id": "5334c7a7-a3a2-4d14-9784-b5f6e282d213",
          "timestamp": 1718334809910,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f498c57e-d84b-4004-990c-eb3b7ed950f9",
          "name": "Validate user is unable to upload without a file",
          "request": {
            "url": {
              "path": [
                "patient-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
              }
            }
          ]
        },
        "parent": {
          "id": "9e139528-2a05-4abb-b826-70052918f36c",
          "name": "patient file upload",
          "item": [
            {
              "id": "d2554a1a-4bf4-46b8-932c-3f553b0ee643",
              "name": "Validate Patient file uploaded successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a4aacda-6079-4292-b2c2-764600c99d0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Defined responseData before using it in the test script\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "8b30c53e-b7cf-4de3-9512-6699396d0f4d"
                  }
                }
              ]
            },
            {
              "id": "57b71dae-bad1-449b-8ce1-999f5d50f563",
              "name": "Validate user is unable to upload multiple Patient files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be91c1d6-42dd-45ce-9915-310f3db5e125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a4072bff-d4c7-4eea-b1d3-d502a7800078"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "af575809-4075-4fa8-845b-71993dcf7706",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7fd617d6-74dc-4bc4-821a-f7dd8b5674ec"
                  }
                }
              ]
            },
            {
              "id": "2f40b587-cfb2-45dd-a46c-7698ded25521",
              "name": "Validate user is unable to upload files other than txt files",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32f9b652-0004-43c3-8d55-df95f0e0f21e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "585ad85c-f8a2-4bc0-9524-ac12d20ddec4"
                  }
                }
              ]
            },
            {
              "id": "1d61175a-7498-45ae-b1f7-636d755bc4e5",
              "name": "Validate user is unable to upload Patient file as user is unauthorized.",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24bf9cb5-1f6e-42ec-ba91-489a01cdd435",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "537b73bb-2a6c-4f95-9abd-4257121b55f0"
                  }
                }
              ]
            },
            {
              "id": "f498c57e-d84b-4004-990c-eb3b7ed950f9",
              "name": "Validate user is unable to upload without a file",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
                  }
                }
              ]
            },
            {
              "id": "2303ed6a-7526-4409-b81c-b5315f2eeb14",
              "name": "Validate user is unable to upload Patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667d9c8c-408b-420b-8a0d-fbd2cc70f9a7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ee78bff7-29a8-4b32-8d1d-067e68e68dcd"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7b2b5baf-bb59-447a-9b44-96772da147f3",
          "length": 110,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2c9e9236-e6b5-4999-b9d3-3cc46d31b5d7",
          "scriptId": "26d1789a-eabc-4fbb-96fb-c73c65b2f7b6",
          "execution": "cf7b2454-d145-46e9-831e-304c3a3eafcc"
        }
      },
      {
        "error": {
          "name": "ReferenceError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "Cannot access 'responseData' before initialization",
          "stack": "ReferenceError: Cannot access 'responseData' before initialization\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "6acdab1b1cd3be2585f1e71b2a75ffc0",
          "id": "30d45a69-9f31-4087-886d-58da2237b84e",
          "timestamp": 1718334810923,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
          "name": "Validate user is able to validate patient file successfully",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  "pm.test(\"Response has all required fields\", () => {\r",
                  "    pm.expect(responseData).to.have.property(\"status\");\r",
                  "    pm.expect(responseData).to.have.property(\"message\");\r",
                  "    pm.expect(responseData).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', () => {\r",
                  "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                  "});\r",
                  "let responseData = pm.response.json();\r",
                  "let task_id = responseData.data.task_id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"task_id\",task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_task_id set to:\", task_id);\r",
                  ""
                ],
                "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
              }
            }
          ]
        },
        "parent": {
          "id": "9bc26ae1-dad3-4362-a680-f91beacb9932",
          "name": "Start validation patient info",
          "item": [
            {
              "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
              "name": "Validate user is able to validate patient file successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Response has all required fields\", () => {\r",
                      "    pm.expect(responseData).to.have.property(\"status\");\r",
                      "    pm.expect(responseData).to.have.property(\"message\");\r",
                      "    pm.expect(responseData).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let task_id = responseData.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"task_id\",task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_task_id set to:\", task_id);\r",
                      ""
                    ],
                    "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
                  }
                }
              ]
            },
            {
              "id": "919b5971-e191-4365-a6da-b716abcd6688",
              "name": "Validate user is unable to validate patient file with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1c569bb-85dc-4904-9932-b5d21240b734",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
                  }
                }
              ]
            },
            {
              "id": "1e41e4b4-9060-4096-be6d-b7f7c149fe00",
              "name": "Validate user is unable to validate patient file without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d3914197-51e6-4583-be05-ff35c925bdb5"
                  }
                }
              ]
            },
            {
              "id": "43c6101c-3f22-4b1f-a374-90cebb3a22b3",
              "name": "Validate user is unable to validate patient file without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9743bd0-38ce-4719-92a1-007643f06409",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "af40e409-3443-4b0e-8925-14a4b6a2804e"
                  }
                }
              ]
            },
            {
              "id": "9377e1c1-3728-41d1-9344-d2cd3fb85381",
              "name": "Validate user is unable to validate patient file as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e22a272-4507-4e8f-a52d-ade7018a5173",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f4c41b93-ab8c-4fc8-b7bf-7160d266694f"
                  }
                }
              ]
            },
            {
              "id": "a9e741bc-5e34-4168-bcd8-8f77086261e1",
              "name": "Validate user is unable to validate patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80befb9e-daf4-4e8b-8a6d-45b9f9e640e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "87276bf7-bbd0-409e-a6b6-c6164005b095"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "de25e669-5421-4ce0-b6e9-84c8cbe23b8c",
          "length": 110,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7a62212e-5ffa-418e-b8e9-1e85452541e6",
          "scriptId": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
          "execution": "a183be33-c62d-471c-831a-7a57ea999bd4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "9ee6ee8e30398efe516adbd9ca9bd9d3",
          "id": "24353697-5d53-4606-8204-a3a1d6c71d19",
          "timestamp": 1718334810926,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
          "name": "Validate user is able to validate patient file successfully",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  "pm.test(\"Response has all required fields\", () => {\r",
                  "    pm.expect(responseData).to.have.property(\"status\");\r",
                  "    pm.expect(responseData).to.have.property(\"message\");\r",
                  "    pm.expect(responseData).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', () => {\r",
                  "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                  "});\r",
                  "let responseData = pm.response.json();\r",
                  "let task_id = responseData.data.task_id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"task_id\",task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_task_id set to:\", task_id);\r",
                  ""
                ],
                "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
              }
            }
          ]
        },
        "parent": {
          "id": "9bc26ae1-dad3-4362-a680-f91beacb9932",
          "name": "Start validation patient info",
          "item": [
            {
              "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
              "name": "Validate user is able to validate patient file successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Response has all required fields\", () => {\r",
                      "    pm.expect(responseData).to.have.property(\"status\");\r",
                      "    pm.expect(responseData).to.have.property(\"message\");\r",
                      "    pm.expect(responseData).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let task_id = responseData.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"task_id\",task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_task_id set to:\", task_id);\r",
                      ""
                    ],
                    "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
                  }
                }
              ]
            },
            {
              "id": "919b5971-e191-4365-a6da-b716abcd6688",
              "name": "Validate user is unable to validate patient file with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1c569bb-85dc-4904-9932-b5d21240b734",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
                  }
                }
              ]
            },
            {
              "id": "1e41e4b4-9060-4096-be6d-b7f7c149fe00",
              "name": "Validate user is unable to validate patient file without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d3914197-51e6-4583-be05-ff35c925bdb5"
                  }
                }
              ]
            },
            {
              "id": "43c6101c-3f22-4b1f-a374-90cebb3a22b3",
              "name": "Validate user is unable to validate patient file without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9743bd0-38ce-4719-92a1-007643f06409",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "af40e409-3443-4b0e-8925-14a4b6a2804e"
                  }
                }
              ]
            },
            {
              "id": "9377e1c1-3728-41d1-9344-d2cd3fb85381",
              "name": "Validate user is unable to validate patient file as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e22a272-4507-4e8f-a52d-ade7018a5173",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f4c41b93-ab8c-4fc8-b7bf-7160d266694f"
                  }
                }
              ]
            },
            {
              "id": "a9e741bc-5e34-4168-bcd8-8f77086261e1",
              "name": "Validate user is unable to validate patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80befb9e-daf4-4e8b-8a6d-45b9f9e640e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "87276bf7-bbd0-409e-a6b6-c6164005b095"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "de25e669-5421-4ce0-b6e9-84c8cbe23b8c",
          "length": 110,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7a62212e-5ffa-418e-b8e9-1e85452541e6",
          "scriptId": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
          "execution": "a183be33-c62d-471c-831a-7a57ea999bd4"
        }
      },
      {
        "error": {
          "name": "ReferenceError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "Cannot access 'responseData' before initialization",
          "stack": "ReferenceError: Cannot access 'responseData' before initialization\n   at Object.eval sandbox-script.js:3:13)",
          "checksum": "cbd76424ed2f6d86f885375b490f70b6",
          "id": "836cb2f4-de5e-4fda-b307-bfad842ce272",
          "timestamp": 1718334810927,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
          "name": "Validate user is able to validate patient file successfully",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  "pm.test(\"Response has all required fields\", () => {\r",
                  "    pm.expect(responseData).to.have.property(\"status\");\r",
                  "    pm.expect(responseData).to.have.property(\"message\");\r",
                  "    pm.expect(responseData).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', () => {\r",
                  "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                  "});\r",
                  "let responseData = pm.response.json();\r",
                  "let task_id = responseData.data.task_id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"task_id\",task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_task_id set to:\", task_id);\r",
                  ""
                ],
                "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
              }
            }
          ]
        },
        "parent": {
          "id": "9bc26ae1-dad3-4362-a680-f91beacb9932",
          "name": "Start validation patient info",
          "item": [
            {
              "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
              "name": "Validate user is able to validate patient file successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Response has all required fields\", () => {\r",
                      "    pm.expect(responseData).to.have.property(\"status\");\r",
                      "    pm.expect(responseData).to.have.property(\"message\");\r",
                      "    pm.expect(responseData).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let task_id = responseData.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"task_id\",task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_task_id set to:\", task_id);\r",
                      ""
                    ],
                    "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
                  }
                }
              ]
            },
            {
              "id": "919b5971-e191-4365-a6da-b716abcd6688",
              "name": "Validate user is unable to validate patient file with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1c569bb-85dc-4904-9932-b5d21240b734",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
                  }
                }
              ]
            },
            {
              "id": "1e41e4b4-9060-4096-be6d-b7f7c149fe00",
              "name": "Validate user is unable to validate patient file without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d3914197-51e6-4583-be05-ff35c925bdb5"
                  }
                }
              ]
            },
            {
              "id": "43c6101c-3f22-4b1f-a374-90cebb3a22b3",
              "name": "Validate user is unable to validate patient file without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9743bd0-38ce-4719-92a1-007643f06409",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "af40e409-3443-4b0e-8925-14a4b6a2804e"
                  }
                }
              ]
            },
            {
              "id": "9377e1c1-3728-41d1-9344-d2cd3fb85381",
              "name": "Validate user is unable to validate patient file as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e22a272-4507-4e8f-a52d-ade7018a5173",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f4c41b93-ab8c-4fc8-b7bf-7160d266694f"
                  }
                }
              ]
            },
            {
              "id": "a9e741bc-5e34-4168-bcd8-8f77086261e1",
              "name": "Validate user is unable to validate patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80befb9e-daf4-4e8b-8a6d-45b9f9e640e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "87276bf7-bbd0-409e-a6b6-c6164005b095"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "de25e669-5421-4ce0-b6e9-84c8cbe23b8c",
          "length": 110,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7a62212e-5ffa-418e-b8e9-1e85452541e6",
          "scriptId": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
          "execution": "a183be33-c62d-471c-831a-7a57ea999bd4"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'task_id')",
          "checksum": "c005a47473712b0486577d5895ef920c",
          "id": "93d4a885-d73c-4681-aded-eac4239083ad",
          "timestamp": 1718334810932,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
          "name": "Validate user is able to validate patient file successfully",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  "pm.test(\"Response has all required fields\", () => {\r",
                  "    pm.expect(responseData).to.have.property(\"status\");\r",
                  "    pm.expect(responseData).to.have.property(\"message\");\r",
                  "    pm.expect(responseData).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', () => {\r",
                  "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                  "});\r",
                  "let responseData = pm.response.json();\r",
                  "let task_id = responseData.data.task_id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"task_id\",task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_task_id set to:\", task_id);\r",
                  ""
                ],
                "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
              }
            }
          ]
        },
        "parent": {
          "id": "9bc26ae1-dad3-4362-a680-f91beacb9932",
          "name": "Start validation patient info",
          "item": [
            {
              "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
              "name": "Validate user is able to validate patient file successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Response has all required fields\", () => {\r",
                      "    pm.expect(responseData).to.have.property(\"status\");\r",
                      "    pm.expect(responseData).to.have.property(\"message\");\r",
                      "    pm.expect(responseData).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let task_id = responseData.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"task_id\",task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_task_id set to:\", task_id);\r",
                      ""
                    ],
                    "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
                  }
                }
              ]
            },
            {
              "id": "919b5971-e191-4365-a6da-b716abcd6688",
              "name": "Validate user is unable to validate patient file with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1c569bb-85dc-4904-9932-b5d21240b734",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
                  }
                }
              ]
            },
            {
              "id": "1e41e4b4-9060-4096-be6d-b7f7c149fe00",
              "name": "Validate user is unable to validate patient file without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d3914197-51e6-4583-be05-ff35c925bdb5"
                  }
                }
              ]
            },
            {
              "id": "43c6101c-3f22-4b1f-a374-90cebb3a22b3",
              "name": "Validate user is unable to validate patient file without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9743bd0-38ce-4719-92a1-007643f06409",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "af40e409-3443-4b0e-8925-14a4b6a2804e"
                  }
                }
              ]
            },
            {
              "id": "9377e1c1-3728-41d1-9344-d2cd3fb85381",
              "name": "Validate user is unable to validate patient file as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e22a272-4507-4e8f-a52d-ade7018a5173",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f4c41b93-ab8c-4fc8-b7bf-7160d266694f"
                  }
                }
              ]
            },
            {
              "id": "a9e741bc-5e34-4168-bcd8-8f77086261e1",
              "name": "Validate user is unable to validate patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80befb9e-daf4-4e8b-8a6d-45b9f9e640e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "87276bf7-bbd0-409e-a6b6-c6164005b095"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "de25e669-5421-4ce0-b6e9-84c8cbe23b8c",
          "length": 110,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7a62212e-5ffa-418e-b8e9-1e85452541e6",
          "scriptId": "6b0c6674-db51-4dfb-aab1-b1e54e85511d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "bf80e5f28c787f2a8208d4d44298f7e5",
          "id": "ff5b51ac-160e-41e8-933d-e67f1a2c82d8",
          "timestamp": 1718334811271,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "919b5971-e191-4365-a6da-b716abcd6688",
          "name": "Validate user is unable to validate patient file with incorrect query data",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f1c569bb-85dc-4904-9932-b5d21240b734",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
              }
            }
          ]
        },
        "parent": {
          "id": "9bc26ae1-dad3-4362-a680-f91beacb9932",
          "name": "Start validation patient info",
          "item": [
            {
              "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
              "name": "Validate user is able to validate patient file successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Response has all required fields\", () => {\r",
                      "    pm.expect(responseData).to.have.property(\"status\");\r",
                      "    pm.expect(responseData).to.have.property(\"message\");\r",
                      "    pm.expect(responseData).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let task_id = responseData.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"task_id\",task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_task_id set to:\", task_id);\r",
                      ""
                    ],
                    "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
                  }
                }
              ]
            },
            {
              "id": "919b5971-e191-4365-a6da-b716abcd6688",
              "name": "Validate user is unable to validate patient file with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1c569bb-85dc-4904-9932-b5d21240b734",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
                  }
                }
              ]
            },
            {
              "id": "1e41e4b4-9060-4096-be6d-b7f7c149fe00",
              "name": "Validate user is unable to validate patient file without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d3914197-51e6-4583-be05-ff35c925bdb5"
                  }
                }
              ]
            },
            {
              "id": "43c6101c-3f22-4b1f-a374-90cebb3a22b3",
              "name": "Validate user is unable to validate patient file without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9743bd0-38ce-4719-92a1-007643f06409",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "af40e409-3443-4b0e-8925-14a4b6a2804e"
                  }
                }
              ]
            },
            {
              "id": "9377e1c1-3728-41d1-9344-d2cd3fb85381",
              "name": "Validate user is unable to validate patient file as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e22a272-4507-4e8f-a52d-ade7018a5173",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f4c41b93-ab8c-4fc8-b7bf-7160d266694f"
                  }
                }
              ]
            },
            {
              "id": "a9e741bc-5e34-4168-bcd8-8f77086261e1",
              "name": "Validate user is unable to validate patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80befb9e-daf4-4e8b-8a6d-45b9f9e640e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "87276bf7-bbd0-409e-a6b6-c6164005b095"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8f1255b9-c787-4487-9f7a-26c8ccda3798",
          "length": 110,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "88fdd6c5-9500-4d8c-b1e0-1494a44b7a90",
          "scriptId": "f1c569bb-85dc-4904-9932-b5d21240b734",
          "execution": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "0b5679074d1491eabb56001f1d11147a",
          "id": "4858602a-1730-48b0-bd9d-29b3ce41c9fa",
          "timestamp": 1718334811272,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "919b5971-e191-4365-a6da-b716abcd6688",
          "name": "Validate user is unable to validate patient file with incorrect query data",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f1c569bb-85dc-4904-9932-b5d21240b734",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
              }
            }
          ]
        },
        "parent": {
          "id": "9bc26ae1-dad3-4362-a680-f91beacb9932",
          "name": "Start validation patient info",
          "item": [
            {
              "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
              "name": "Validate user is able to validate patient file successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Response has all required fields\", () => {\r",
                      "    pm.expect(responseData).to.have.property(\"status\");\r",
                      "    pm.expect(responseData).to.have.property(\"message\");\r",
                      "    pm.expect(responseData).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let task_id = responseData.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"task_id\",task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_task_id set to:\", task_id);\r",
                      ""
                    ],
                    "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
                  }
                }
              ]
            },
            {
              "id": "919b5971-e191-4365-a6da-b716abcd6688",
              "name": "Validate user is unable to validate patient file with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1c569bb-85dc-4904-9932-b5d21240b734",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
                  }
                }
              ]
            },
            {
              "id": "1e41e4b4-9060-4096-be6d-b7f7c149fe00",
              "name": "Validate user is unable to validate patient file without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d3914197-51e6-4583-be05-ff35c925bdb5"
                  }
                }
              ]
            },
            {
              "id": "43c6101c-3f22-4b1f-a374-90cebb3a22b3",
              "name": "Validate user is unable to validate patient file without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9743bd0-38ce-4719-92a1-007643f06409",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "af40e409-3443-4b0e-8925-14a4b6a2804e"
                  }
                }
              ]
            },
            {
              "id": "9377e1c1-3728-41d1-9344-d2cd3fb85381",
              "name": "Validate user is unable to validate patient file as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e22a272-4507-4e8f-a52d-ade7018a5173",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f4c41b93-ab8c-4fc8-b7bf-7160d266694f"
                  }
                }
              ]
            },
            {
              "id": "a9e741bc-5e34-4168-bcd8-8f77086261e1",
              "name": "Validate user is unable to validate patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80befb9e-daf4-4e8b-8a6d-45b9f9e640e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "87276bf7-bbd0-409e-a6b6-c6164005b095"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8f1255b9-c787-4487-9f7a-26c8ccda3798",
          "length": 110,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "88fdd6c5-9500-4d8c-b1e0-1494a44b7a90",
          "scriptId": "f1c569bb-85dc-4904-9932-b5d21240b734",
          "execution": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "1ece5052698df3260d26014e6ca8efbb",
          "id": "0bfe4e8e-8c98-4c86-9f48-1941519c815c",
          "timestamp": 1718334811607,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1e41e4b4-9060-4096-be6d-b7f7c149fe00",
          "name": "Validate user is unable to validate patient file without query data",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "d3914197-51e6-4583-be05-ff35c925bdb5"
              }
            }
          ]
        },
        "parent": {
          "id": "9bc26ae1-dad3-4362-a680-f91beacb9932",
          "name": "Start validation patient info",
          "item": [
            {
              "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
              "name": "Validate user is able to validate patient file successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Response has all required fields\", () => {\r",
                      "    pm.expect(responseData).to.have.property(\"status\");\r",
                      "    pm.expect(responseData).to.have.property(\"message\");\r",
                      "    pm.expect(responseData).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let task_id = responseData.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"task_id\",task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_task_id set to:\", task_id);\r",
                      ""
                    ],
                    "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
                  }
                }
              ]
            },
            {
              "id": "919b5971-e191-4365-a6da-b716abcd6688",
              "name": "Validate user is unable to validate patient file with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1c569bb-85dc-4904-9932-b5d21240b734",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
                  }
                }
              ]
            },
            {
              "id": "1e41e4b4-9060-4096-be6d-b7f7c149fe00",
              "name": "Validate user is unable to validate patient file without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d3914197-51e6-4583-be05-ff35c925bdb5"
                  }
                }
              ]
            },
            {
              "id": "43c6101c-3f22-4b1f-a374-90cebb3a22b3",
              "name": "Validate user is unable to validate patient file without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9743bd0-38ce-4719-92a1-007643f06409",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "af40e409-3443-4b0e-8925-14a4b6a2804e"
                  }
                }
              ]
            },
            {
              "id": "9377e1c1-3728-41d1-9344-d2cd3fb85381",
              "name": "Validate user is unable to validate patient file as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e22a272-4507-4e8f-a52d-ade7018a5173",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f4c41b93-ab8c-4fc8-b7bf-7160d266694f"
                  }
                }
              ]
            },
            {
              "id": "a9e741bc-5e34-4168-bcd8-8f77086261e1",
              "name": "Validate user is unable to validate patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80befb9e-daf4-4e8b-8a6d-45b9f9e640e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "87276bf7-bbd0-409e-a6b6-c6164005b095"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "14377964-7b9c-468b-9c84-a3cb07ede386",
          "length": 110,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b08f62db-5e40-400f-9a5a-9771a31aadc8",
          "scriptId": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
          "execution": "d3914197-51e6-4583-be05-ff35c925bdb5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "674eff98417a393c0622293f23436991",
          "id": "09108dfd-2e6d-4d47-b748-5f57b9d742d4",
          "timestamp": 1718334811609,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1e41e4b4-9060-4096-be6d-b7f7c149fe00",
          "name": "Validate user is unable to validate patient file without query data",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "d3914197-51e6-4583-be05-ff35c925bdb5"
              }
            }
          ]
        },
        "parent": {
          "id": "9bc26ae1-dad3-4362-a680-f91beacb9932",
          "name": "Start validation patient info",
          "item": [
            {
              "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
              "name": "Validate user is able to validate patient file successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Response has all required fields\", () => {\r",
                      "    pm.expect(responseData).to.have.property(\"status\");\r",
                      "    pm.expect(responseData).to.have.property(\"message\");\r",
                      "    pm.expect(responseData).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let task_id = responseData.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"task_id\",task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_task_id set to:\", task_id);\r",
                      ""
                    ],
                    "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
                  }
                }
              ]
            },
            {
              "id": "919b5971-e191-4365-a6da-b716abcd6688",
              "name": "Validate user is unable to validate patient file with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1c569bb-85dc-4904-9932-b5d21240b734",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
                  }
                }
              ]
            },
            {
              "id": "1e41e4b4-9060-4096-be6d-b7f7c149fe00",
              "name": "Validate user is unable to validate patient file without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d3914197-51e6-4583-be05-ff35c925bdb5"
                  }
                }
              ]
            },
            {
              "id": "43c6101c-3f22-4b1f-a374-90cebb3a22b3",
              "name": "Validate user is unable to validate patient file without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9743bd0-38ce-4719-92a1-007643f06409",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "af40e409-3443-4b0e-8925-14a4b6a2804e"
                  }
                }
              ]
            },
            {
              "id": "9377e1c1-3728-41d1-9344-d2cd3fb85381",
              "name": "Validate user is unable to validate patient file as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e22a272-4507-4e8f-a52d-ade7018a5173",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f4c41b93-ab8c-4fc8-b7bf-7160d266694f"
                  }
                }
              ]
            },
            {
              "id": "a9e741bc-5e34-4168-bcd8-8f77086261e1",
              "name": "Validate user is unable to validate patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80befb9e-daf4-4e8b-8a6d-45b9f9e640e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "87276bf7-bbd0-409e-a6b6-c6164005b095"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "14377964-7b9c-468b-9c84-a3cb07ede386",
          "length": 110,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b08f62db-5e40-400f-9a5a-9771a31aadc8",
          "scriptId": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
          "execution": "d3914197-51e6-4583-be05-ff35c925bdb5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:16)",
          "checksum": "491bcd2947e1f774c2e111cf706df250",
          "id": "4894a415-8dc7-4b62-b102-0652a16063f5",
          "timestamp": 1718334811938,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "43c6101c-3f22-4b1f-a374-90cebb3a22b3",
          "name": "Validate user is unable to validate patient file without Authorization",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9743bd0-38ce-4719-92a1-007643f06409",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "af40e409-3443-4b0e-8925-14a4b6a2804e"
              }
            }
          ]
        },
        "parent": {
          "id": "9bc26ae1-dad3-4362-a680-f91beacb9932",
          "name": "Start validation patient info",
          "item": [
            {
              "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
              "name": "Validate user is able to validate patient file successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Response has all required fields\", () => {\r",
                      "    pm.expect(responseData).to.have.property(\"status\");\r",
                      "    pm.expect(responseData).to.have.property(\"message\");\r",
                      "    pm.expect(responseData).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let task_id = responseData.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"task_id\",task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_task_id set to:\", task_id);\r",
                      ""
                    ],
                    "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
                  }
                }
              ]
            },
            {
              "id": "919b5971-e191-4365-a6da-b716abcd6688",
              "name": "Validate user is unable to validate patient file with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1c569bb-85dc-4904-9932-b5d21240b734",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
                  }
                }
              ]
            },
            {
              "id": "1e41e4b4-9060-4096-be6d-b7f7c149fe00",
              "name": "Validate user is unable to validate patient file without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d3914197-51e6-4583-be05-ff35c925bdb5"
                  }
                }
              ]
            },
            {
              "id": "43c6101c-3f22-4b1f-a374-90cebb3a22b3",
              "name": "Validate user is unable to validate patient file without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9743bd0-38ce-4719-92a1-007643f06409",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "af40e409-3443-4b0e-8925-14a4b6a2804e"
                  }
                }
              ]
            },
            {
              "id": "9377e1c1-3728-41d1-9344-d2cd3fb85381",
              "name": "Validate user is unable to validate patient file as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e22a272-4507-4e8f-a52d-ade7018a5173",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f4c41b93-ab8c-4fc8-b7bf-7160d266694f"
                  }
                }
              ]
            },
            {
              "id": "a9e741bc-5e34-4168-bcd8-8f77086261e1",
              "name": "Validate user is unable to validate patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80befb9e-daf4-4e8b-8a6d-45b9f9e640e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "87276bf7-bbd0-409e-a6b6-c6164005b095"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "db807c8c-fd1c-471a-b930-508a8ac10155",
          "length": 110,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "31739540-9316-4ee0-aa92-0a53112d240f",
          "scriptId": "b9743bd0-38ce-4719-92a1-007643f06409",
          "execution": "af40e409-3443-4b0e-8925-14a4b6a2804e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:17)",
          "checksum": "b5ec29b3f20e7f04363b065e0a405848",
          "id": "1eed66ff-97ff-4ea9-bb93-0e34c686986e",
          "timestamp": 1718334812343,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9377e1c1-3728-41d1-9344-d2cd3fb85381",
          "name": "Validate user is unable to validate patient file as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "start-validation-patient-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e22a272-4507-4e8f-a52d-ade7018a5173",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "f4c41b93-ab8c-4fc8-b7bf-7160d266694f"
              }
            }
          ]
        },
        "parent": {
          "id": "9bc26ae1-dad3-4362-a680-f91beacb9932",
          "name": "Start validation patient info",
          "item": [
            {
              "id": "c060024a-b5e7-43b2-a455-a7bce1c7b3dd",
              "name": "Validate user is able to validate patient file successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b0c6674-db51-4dfb-aab1-b1e54e85511d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "pm.test(\"Response has all required fields\", () => {\r",
                      "    pm.expect(responseData).to.have.property(\"status\");\r",
                      "    pm.expect(responseData).to.have.property(\"message\");\r",
                      "    pm.expect(responseData).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', () => {\r",
                      "    pm.expect(responseData.message).to.eql(\"Patient file validated successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let task_id = responseData.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"task_id\",task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_task_id set to:\", task_id);\r",
                      ""
                    ],
                    "_lastExecutionId": "a183be33-c62d-471c-831a-7a57ea999bd4"
                  }
                }
              ]
            },
            {
              "id": "919b5971-e191-4365-a6da-b716abcd6688",
              "name": "Validate user is unable to validate patient file with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1c569bb-85dc-4904-9932-b5d21240b734",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "acdf1ed2-03c4-4559-b968-fba0f7d1d532"
                  }
                }
              ]
            },
            {
              "id": "1e41e4b4-9060-4096-be6d-b7f7c149fe00",
              "name": "Validate user is unable to validate patient file without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44c946dc-f2ee-4bc3-9065-6d5cf174070b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d3914197-51e6-4583-be05-ff35c925bdb5"
                  }
                }
              ]
            },
            {
              "id": "43c6101c-3f22-4b1f-a374-90cebb3a22b3",
              "name": "Validate user is unable to validate patient file without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9743bd0-38ce-4719-92a1-007643f06409",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "af40e409-3443-4b0e-8925-14a4b6a2804e"
                  }
                }
              ]
            },
            {
              "id": "9377e1c1-3728-41d1-9344-d2cd3fb85381",
              "name": "Validate user is unable to validate patient file as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e22a272-4507-4e8f-a52d-ade7018a5173",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f4c41b93-ab8c-4fc8-b7bf-7160d266694f"
                  }
                }
              ]
            },
            {
              "id": "a9e741bc-5e34-4168-bcd8-8f77086261e1",
              "name": "Validate user is unable to validate patient file as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-patient-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80befb9e-daf4-4e8b-8a6d-45b9f9e640e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "87276bf7-bbd0-409e-a6b6-c6164005b095"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1e8a1978-629a-4a06-81e4-b9395fa56d47",
          "length": 110,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a2d4e2cf-5f87-439e-8edf-1766441c3c3c",
          "scriptId": "0e22a272-4507-4e8f-a52d-ade7018a5173",
          "execution": "f4c41b93-ab8c-4fc8-b7bf-7160d266694f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:19)",
          "checksum": "b2a64114afd0cb6a1a0eade1163ed051",
          "id": "acf73932-3999-453c-ab95-719910640758",
          "timestamp": 1718334813403,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
          "name": "Validate user is able to upload variants file successfully",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
              }
            }
          ]
        },
        "parent": {
          "id": "fa490999-b61c-4b4e-8bf9-865a0759effc",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
                  }
                }
              ]
            },
            {
              "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
                  }
                }
              ]
            },
            {
              "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
              "name": "Validate user is unable to upload variants file other than vcf and txt file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
                  }
                }
              ]
            },
            {
              "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
              "name": "Validate user is unable to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": null
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
                  }
                }
              ]
            },
            {
              "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
                  }
                }
              ]
            },
            {
              "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45490039-a23a-483d-b1a4-93e95884481c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "711cf07a-8732-4bf7-9fb2-6380e402f068"
                  }
                }
              ]
            },
            {
              "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "371bd934-d1f0-4473-a11c-9f89945d0c21"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "843496a7-aba1-445a-b79e-9563339e5908",
          "length": 110,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2658e1d9-c3a1-401a-acaa-1d1076de7d82",
          "scriptId": "0e55304d-ffb3-4923-b30c-62fe929571c6",
          "execution": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Patient file uploaded'",
          "stack": "AssertionError: expected undefined to deeply equal 'Patient file uploaded'\n   at Object.eval sandbox-script.js:2:19)",
          "checksum": "1b383813af03abb843457480eb683d37",
          "id": "df205ed0-93cc-4fb6-a4ee-6a1658260493",
          "timestamp": 1718334813405,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
          "name": "Validate user is able to upload variants file successfully",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
              }
            }
          ]
        },
        "parent": {
          "id": "fa490999-b61c-4b4e-8bf9-865a0759effc",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
                  }
                }
              ]
            },
            {
              "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
                  }
                }
              ]
            },
            {
              "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
              "name": "Validate user is unable to upload variants file other than vcf and txt file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
                  }
                }
              ]
            },
            {
              "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
              "name": "Validate user is unable to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": null
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
                  }
                }
              ]
            },
            {
              "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
                  }
                }
              ]
            },
            {
              "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45490039-a23a-483d-b1a4-93e95884481c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "711cf07a-8732-4bf7-9fb2-6380e402f068"
                  }
                }
              ]
            },
            {
              "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "371bd934-d1f0-4473-a11c-9f89945d0c21"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "843496a7-aba1-445a-b79e-9563339e5908",
          "length": 110,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2658e1d9-c3a1-401a-acaa-1d1076de7d82",
          "scriptId": "0e55304d-ffb3-4923-b30c-62fe929571c6",
          "execution": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:20)",
          "checksum": "6c8099a90382faabd3623095e9c0681d",
          "id": "9db45ff4-13b4-4010-9417-3f0ae07257f8",
          "timestamp": 1718334814069,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
          "name": "Validate user is able to upload multiple variants file successfully",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [
                    "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                    "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                  ]
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
              }
            }
          ]
        },
        "parent": {
          "id": "fa490999-b61c-4b4e-8bf9-865a0759effc",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
                  }
                }
              ]
            },
            {
              "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
                  }
                }
              ]
            },
            {
              "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
              "name": "Validate user is unable to upload variants file other than vcf and txt file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
                  }
                }
              ]
            },
            {
              "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
              "name": "Validate user is unable to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": null
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
                  }
                }
              ]
            },
            {
              "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
                  }
                }
              ]
            },
            {
              "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45490039-a23a-483d-b1a4-93e95884481c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "711cf07a-8732-4bf7-9fb2-6380e402f068"
                  }
                }
              ]
            },
            {
              "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "371bd934-d1f0-4473-a11c-9f89945d0c21"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d44400b7-2009-4f95-a250-f9220cbe8b3b",
          "length": 110,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7bb4ef41-5b5b-4117-8aa3-308b015d9b11",
          "scriptId": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
          "execution": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Patient file uploaded'",
          "stack": "AssertionError: expected undefined to deeply equal 'Patient file uploaded'\n   at Object.eval sandbox-script.js:2:20)",
          "checksum": "4f4781c7165ad9ed37f898120e2ec7d8",
          "id": "c0e3c295-cbe8-4c98-9696-7770158ed32e",
          "timestamp": 1718334814070,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
          "name": "Validate user is able to upload multiple variants file successfully",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [
                    "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                    "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                  ]
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
              }
            }
          ]
        },
        "parent": {
          "id": "fa490999-b61c-4b4e-8bf9-865a0759effc",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
                  }
                }
              ]
            },
            {
              "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
                  }
                }
              ]
            },
            {
              "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
              "name": "Validate user is unable to upload variants file other than vcf and txt file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
                  }
                }
              ]
            },
            {
              "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
              "name": "Validate user is unable to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": null
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
                  }
                }
              ]
            },
            {
              "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
                  }
                }
              ]
            },
            {
              "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45490039-a23a-483d-b1a4-93e95884481c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "711cf07a-8732-4bf7-9fb2-6380e402f068"
                  }
                }
              ]
            },
            {
              "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "371bd934-d1f0-4473-a11c-9f89945d0c21"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d44400b7-2009-4f95-a250-f9220cbe8b3b",
          "length": 110,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7bb4ef41-5b5b-4117-8aa3-308b015d9b11",
          "scriptId": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
          "execution": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 422",
          "stack": "AssertionError: expected response to have status code 400 but got 422\n   at Object.eval sandbox-script.js:1:21)",
          "checksum": "018cc1a53b0f8f1c1ec289730ef1c083",
          "id": "28a0805f-6b1e-42dc-ae40-19e77ced23c0",
          "timestamp": 1718334814952,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
          "name": "Validate user is unable to upload variants file other than vcf and txt file type",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
              }
            }
          ]
        },
        "parent": {
          "id": "fa490999-b61c-4b4e-8bf9-865a0759effc",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
                  }
                }
              ]
            },
            {
              "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
                  }
                }
              ]
            },
            {
              "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
              "name": "Validate user is unable to upload variants file other than vcf and txt file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
                  }
                }
              ]
            },
            {
              "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
              "name": "Validate user is unable to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": null
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
                  }
                }
              ]
            },
            {
              "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
                  }
                }
              ]
            },
            {
              "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45490039-a23a-483d-b1a4-93e95884481c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "711cf07a-8732-4bf7-9fb2-6380e402f068"
                  }
                }
              ]
            },
            {
              "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "371bd934-d1f0-4473-a11c-9f89945d0c21"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "67d03ec5-26ea-4a13-8804-ab2b35ac4fb1",
          "length": 110,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c79e2235-8ab4-4cad-8cec-08ce02d3b0af",
          "scriptId": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
          "execution": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Patient file could not be uploaded'",
          "stack": "AssertionError: expected undefined to deeply equal 'Patient file could not be uploaded'\n   at Object.eval sandbox-script.js:2:21)",
          "checksum": "520a3c112cba7959067690b396be0b80",
          "id": "7cfe035c-0fed-4834-bf9d-80388aeb3a3c",
          "timestamp": 1718334814953,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
          "name": "Validate user is unable to upload variants file other than vcf and txt file type",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
              }
            }
          ]
        },
        "parent": {
          "id": "fa490999-b61c-4b4e-8bf9-865a0759effc",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
                  }
                }
              ]
            },
            {
              "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
                  }
                }
              ]
            },
            {
              "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
              "name": "Validate user is unable to upload variants file other than vcf and txt file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
                  }
                }
              ]
            },
            {
              "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
              "name": "Validate user is unable to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": null
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
                  }
                }
              ]
            },
            {
              "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
                  }
                }
              ]
            },
            {
              "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45490039-a23a-483d-b1a4-93e95884481c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "711cf07a-8732-4bf7-9fb2-6380e402f068"
                  }
                }
              ]
            },
            {
              "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "371bd934-d1f0-4473-a11c-9f89945d0c21"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "67d03ec5-26ea-4a13-8804-ab2b35ac4fb1",
          "length": 110,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c79e2235-8ab4-4cad-8cec-08ce02d3b0af",
          "scriptId": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
          "execution": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)",
          "checksum": "3d184468ff3945593c7a331dc6c352b8",
          "id": "e45b9417-a33b-4d5b-b031-d48e43f9f6a3",
          "timestamp": 1718334815642,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
          "name": "Validate user is unable to upload variants file without id",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": null
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
              }
            }
          ]
        },
        "parent": {
          "id": "fa490999-b61c-4b4e-8bf9-865a0759effc",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
                  }
                }
              ]
            },
            {
              "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
                  }
                }
              ]
            },
            {
              "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
              "name": "Validate user is unable to upload variants file other than vcf and txt file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
                  }
                }
              ]
            },
            {
              "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
              "name": "Validate user is unable to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": null
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
                  }
                }
              ]
            },
            {
              "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
                  }
                }
              ]
            },
            {
              "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45490039-a23a-483d-b1a4-93e95884481c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "711cf07a-8732-4bf7-9fb2-6380e402f068"
                  }
                }
              ]
            },
            {
              "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "371bd934-d1f0-4473-a11c-9f89945d0c21"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6c4ffbe7-0792-4348-bbb7-7e3b6b792064",
          "length": 110,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e78eecaf-76a6-43cd-a675-5605528ef641",
          "scriptId": "564087fe-28c1-45b9-ac09-3a9b58d65476",
          "execution": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Patient file could not be uploaded'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient file could not be uploaded'\n   at Object.eval sandbox-script.js:2:22)",
          "checksum": "0f8d23316dd1e407041edffcb05f9971",
          "id": "32636194-0aab-49da-8c69-f74bb86a1154",
          "timestamp": 1718334815643,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
          "name": "Validate user is unable to upload variants file without id",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": null
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
              }
            }
          ]
        },
        "parent": {
          "id": "fa490999-b61c-4b4e-8bf9-865a0759effc",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
                  }
                }
              ]
            },
            {
              "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
                  }
                }
              ]
            },
            {
              "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
              "name": "Validate user is unable to upload variants file other than vcf and txt file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
                  }
                }
              ]
            },
            {
              "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
              "name": "Validate user is unable to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": null
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
                  }
                }
              ]
            },
            {
              "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
                  }
                }
              ]
            },
            {
              "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45490039-a23a-483d-b1a4-93e95884481c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "711cf07a-8732-4bf7-9fb2-6380e402f068"
                  }
                }
              ]
            },
            {
              "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "371bd934-d1f0-4473-a11c-9f89945d0c21"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6c4ffbe7-0792-4348-bbb7-7e3b6b792064",
          "length": 110,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e78eecaf-76a6-43cd-a675-5605528ef641",
          "scriptId": "564087fe-28c1-45b9-ac09-3a9b58d65476",
          "execution": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)",
          "checksum": "6c04b8b6cbaf22611c3bfba5c1daee83",
          "id": "98bb6505-bedb-46da-99b3-d0c095551230",
          "timestamp": 1718334816274,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
          "name": "Validate user is unable to upload without variants file",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
              }
            }
          ]
        },
        "parent": {
          "id": "fa490999-b61c-4b4e-8bf9-865a0759effc",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
                  }
                }
              ]
            },
            {
              "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
                  }
                }
              ]
            },
            {
              "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
              "name": "Validate user is unable to upload variants file other than vcf and txt file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
                  }
                }
              ]
            },
            {
              "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
              "name": "Validate user is unable to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": null
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
                  }
                }
              ]
            },
            {
              "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
                  }
                }
              ]
            },
            {
              "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45490039-a23a-483d-b1a4-93e95884481c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "711cf07a-8732-4bf7-9fb2-6380e402f068"
                  }
                }
              ]
            },
            {
              "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "371bd934-d1f0-4473-a11c-9f89945d0c21"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22a0f464-5320-4ea0-bd1a-b22b4ee66d3f",
          "length": 110,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d45e6fb0-fff0-4ae8-ba03-a9ecd4b7d0e2",
          "scriptId": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
          "execution": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Patient file could not be uploaded'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient file could not be uploaded'\n   at Object.eval sandbox-script.js:2:23)",
          "checksum": "eb62bfb2557d220dea3824af171c8612",
          "id": "f2ffcab1-04f6-40cf-851c-70d109bab7c3",
          "timestamp": 1718334816275,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
          "name": "Validate user is unable to upload without variants file",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                  "});"
                ],
                "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
              }
            }
          ]
        },
        "parent": {
          "id": "fa490999-b61c-4b4e-8bf9-865a0759effc",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
                  }
                }
              ]
            },
            {
              "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
                  }
                }
              ]
            },
            {
              "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
              "name": "Validate user is unable to upload variants file other than vcf and txt file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
                  }
                }
              ]
            },
            {
              "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
              "name": "Validate user is unable to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": null
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
                  }
                }
              ]
            },
            {
              "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
                  }
                }
              ]
            },
            {
              "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45490039-a23a-483d-b1a4-93e95884481c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "711cf07a-8732-4bf7-9fb2-6380e402f068"
                  }
                }
              ]
            },
            {
              "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "371bd934-d1f0-4473-a11c-9f89945d0c21"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22a0f464-5320-4ea0-bd1a-b22b4ee66d3f",
          "length": 110,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d45e6fb0-fff0-4ae8-ba03-a9ecd4b7d0e2",
          "scriptId": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
          "execution": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:24)",
          "checksum": "db48478d159427074825ac79351571c7",
          "id": "c66252d3-fa93-4e2c-8186-deb649ab1c49",
          "timestamp": 1718334816882,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
          "name": "Validate user is unable to upload variants file as user is unauthorized",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "45490039-a23a-483d-b1a4-93e95884481c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "711cf07a-8732-4bf7-9fb2-6380e402f068"
              }
            }
          ]
        },
        "parent": {
          "id": "fa490999-b61c-4b4e-8bf9-865a0759effc",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
                  }
                }
              ]
            },
            {
              "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
                  }
                }
              ]
            },
            {
              "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
              "name": "Validate user is unable to upload variants file other than vcf and txt file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
                  }
                }
              ]
            },
            {
              "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
              "name": "Validate user is unable to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": null
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
                  }
                }
              ]
            },
            {
              "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
                  }
                }
              ]
            },
            {
              "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45490039-a23a-483d-b1a4-93e95884481c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "711cf07a-8732-4bf7-9fb2-6380e402f068"
                  }
                }
              ]
            },
            {
              "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "371bd934-d1f0-4473-a11c-9f89945d0c21"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e41f19a9-ec4d-47f6-abf3-a23d95869677",
          "length": 110,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1d3bff6b-5f2e-4436-af4e-2d0b7ffa71df",
          "scriptId": "45490039-a23a-483d-b1a4-93e95884481c",
          "execution": "711cf07a-8732-4bf7-9fb2-6380e402f068"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Method Not Allowed'",
          "stack": "AssertionError: expected undefined to deeply equal 'Method Not Allowed'\n   at Object.eval sandbox-script.js:2:25)",
          "checksum": "e81a52900b0950a3beb3055e4384f108",
          "id": "3637480f-4f1d-4598-8eac-1f43e7b26646",
          "timestamp": 1718334817531,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
          "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "371bd934-d1f0-4473-a11c-9f89945d0c21"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "fa490999-b61c-4b4e-8bf9-865a0759effc",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "76b3558a-17fa-45ee-93f7-d91080fb2822",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e55304d-ffb3-4923-b30c-62fe929571c6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9385bc9d-ad36-40bf-8b84-1d51a2ce2a0c"
                  }
                }
              ]
            },
            {
              "id": "65b4b931-589a-41f9-a365-bbfac16f239f",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e11b72d5-ccb0-43ca-b6b1-b65f3854a6bc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "90311fb1-1b0e-40b2-8bd6-b60c15cb801a"
                  }
                }
              ]
            },
            {
              "id": "1ccf1d00-685a-414f-95e9-a9ea7d16a6ff",
              "name": "Validate user is unable to upload variants file other than vcf and txt file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef225c2-790c-4770-ad05-b6dbfa421487"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0f52495-bf43-4da7-94a0-26ba99b91dd4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dee3b682-7bd0-4c46-95d7-3a19d2dc5777"
                  }
                }
              ]
            },
            {
              "id": "ca5e142e-b120-45e0-aeb4-70f0292804a0",
              "name": "Validate user is unable to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": null
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "564087fe-28c1-45b9-ac09-3a9b58d65476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "27814c63-b527-4b0e-a809-0ae6d5c2bcf5"
                  }
                }
              ]
            },
            {
              "id": "21ea919f-d409-4e9b-badb-5c66e0b42ce3",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4743b75d-7c6b-4275-8151-b0b05cb9c0fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file could not be uploaded\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d9bb98e-3d46-4d4d-bd97-6397e7a31c2c"
                  }
                }
              ]
            },
            {
              "id": "c40e859e-8368-4ee9-b71f-0fed61edcbe7",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45490039-a23a-483d-b1a4-93e95884481c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "711cf07a-8732-4bf7-9fb2-6380e402f068"
                  }
                }
              ]
            },
            {
              "id": "f5570d13-775f-4b2b-9212-1bfdb9ca38e5",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "371bd934-d1f0-4473-a11c-9f89945d0c21"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0982c1ef-3de1-4862-a4e6-d3ee7fa92353",
          "length": 110,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6435609f-1f01-4e18-9ea1-abc77f7bc3e6",
          "scriptId": "6d1a6e80-fc82-4973-8d47-2805f3c2958a",
          "execution": "371bd934-d1f0-4473-a11c-9f89945d0c21"
        }
      },
      {
        "error": {
          "name": "ReferenceError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "Cannot access 'response' before initialization",
          "stack": "ReferenceError: Cannot access 'response' before initialization\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "a1e54355a027f97e41646f439ac142c7",
          "id": "eef359b6-ad68-4e7b-a091-bf3255ae0384",
          "timestamp": 1718334818159,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "74eceb6a-0137-4694-815b-7e130020f77c",
          "name": "Validate the user is able to validate variants successfully",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                  "});\r",
                  "\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_variant_task_id = response.data.task_id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                ],
                "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
              }
            }
          ]
        },
        "parent": {
          "id": "94de7190-582b-4d57-8616-4d14c5535588",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "74eceb6a-0137-4694-815b-7e130020f77c",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
                  }
                }
              ]
            },
            {
              "id": "eea14ae4-8aec-429c-b128-4bff6b2b34a9",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3fea3327-6760-43c5-96b1-ed6755d34047"
                  }
                }
              ]
            },
            {
              "id": "1c6c5d8e-a2e5-4843-bf84-51e1e1e9f0c0",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41d622d-acf5-4017-b650-708c1c7ce506",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
                  }
                }
              ]
            },
            {
              "id": "8d61201d-b808-45fb-a111-e06c89bfb124",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "153bbab0-3a6b-41e0-bc6c-f416401308fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9b2e21be-7631-4986-81df-e18e0f8ee6ff"
                  }
                }
              ]
            },
            {
              "id": "1e1d34dd-cb99-4a4d-9c2d-205750a40d72",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceabbca5-0a2b-4ae0-bad1-7ad182f2416a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "88df03cb-5f4a-4d46-bcaa-f8644022d584"
                  }
                }
              ]
            },
            {
              "id": "74312ded-ad9e-4c85-8fb1-d98253b69dab",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba97a799-e064-4f1a-aee2-97ed3299cf98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b8a2e8a-0c99-4c50-95d2-e6697c72c860"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2425b117-718d-4c0c-90d9-426398c06130",
          "length": 110,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "237aed1c-0785-44e3-bcbb-9adcb0188481",
          "scriptId": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
          "execution": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:26)",
          "checksum": "b1f91a9c968e83b1b2c7b9e14f2f7a74",
          "id": "326393d7-45a4-4a0e-95c6-d31e14ad2a7f",
          "timestamp": 1718334818161,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "74eceb6a-0137-4694-815b-7e130020f77c",
          "name": "Validate the user is able to validate variants successfully",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                  "});\r",
                  "\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_variant_task_id = response.data.task_id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                ],
                "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
              }
            }
          ]
        },
        "parent": {
          "id": "94de7190-582b-4d57-8616-4d14c5535588",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "74eceb6a-0137-4694-815b-7e130020f77c",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
                  }
                }
              ]
            },
            {
              "id": "eea14ae4-8aec-429c-b128-4bff6b2b34a9",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3fea3327-6760-43c5-96b1-ed6755d34047"
                  }
                }
              ]
            },
            {
              "id": "1c6c5d8e-a2e5-4843-bf84-51e1e1e9f0c0",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41d622d-acf5-4017-b650-708c1c7ce506",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
                  }
                }
              ]
            },
            {
              "id": "8d61201d-b808-45fb-a111-e06c89bfb124",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "153bbab0-3a6b-41e0-bc6c-f416401308fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9b2e21be-7631-4986-81df-e18e0f8ee6ff"
                  }
                }
              ]
            },
            {
              "id": "1e1d34dd-cb99-4a4d-9c2d-205750a40d72",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceabbca5-0a2b-4ae0-bad1-7ad182f2416a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "88df03cb-5f4a-4d46-bcaa-f8644022d584"
                  }
                }
              ]
            },
            {
              "id": "74312ded-ad9e-4c85-8fb1-d98253b69dab",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba97a799-e064-4f1a-aee2-97ed3299cf98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b8a2e8a-0c99-4c50-95d2-e6697c72c860"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2425b117-718d-4c0c-90d9-426398c06130",
          "length": 110,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "237aed1c-0785-44e3-bcbb-9adcb0188481",
          "scriptId": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
          "execution": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Variant file(s) validated successfully'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Variant file(s) validated successfully'\n   at Object.eval sandbox-script.js:3:26)",
          "checksum": "c0e2150fec0ed6b5f17831a7269d7a15",
          "id": "66906589-fef2-46d9-add1-02744991f62a",
          "timestamp": 1718334818163,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "74eceb6a-0137-4694-815b-7e130020f77c",
          "name": "Validate the user is able to validate variants successfully",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                  "});\r",
                  "\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_variant_task_id = response.data.task_id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                ],
                "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
              }
            }
          ]
        },
        "parent": {
          "id": "94de7190-582b-4d57-8616-4d14c5535588",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "74eceb6a-0137-4694-815b-7e130020f77c",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
                  }
                }
              ]
            },
            {
              "id": "eea14ae4-8aec-429c-b128-4bff6b2b34a9",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3fea3327-6760-43c5-96b1-ed6755d34047"
                  }
                }
              ]
            },
            {
              "id": "1c6c5d8e-a2e5-4843-bf84-51e1e1e9f0c0",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41d622d-acf5-4017-b650-708c1c7ce506",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
                  }
                }
              ]
            },
            {
              "id": "8d61201d-b808-45fb-a111-e06c89bfb124",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "153bbab0-3a6b-41e0-bc6c-f416401308fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9b2e21be-7631-4986-81df-e18e0f8ee6ff"
                  }
                }
              ]
            },
            {
              "id": "1e1d34dd-cb99-4a4d-9c2d-205750a40d72",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceabbca5-0a2b-4ae0-bad1-7ad182f2416a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "88df03cb-5f4a-4d46-bcaa-f8644022d584"
                  }
                }
              ]
            },
            {
              "id": "74312ded-ad9e-4c85-8fb1-d98253b69dab",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba97a799-e064-4f1a-aee2-97ed3299cf98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b8a2e8a-0c99-4c50-95d2-e6697c72c860"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2425b117-718d-4c0c-90d9-426398c06130",
          "length": 110,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "237aed1c-0785-44e3-bcbb-9adcb0188481",
          "scriptId": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
          "execution": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'task_id')",
          "checksum": "c005a47473712b0486577d5895ef920c",
          "id": "5d7d7e01-f2ee-425b-8f26-af19c2e1248b",
          "timestamp": 1718334818168,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "74eceb6a-0137-4694-815b-7e130020f77c",
          "name": "Validate the user is able to validate variants successfully",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                  "});\r",
                  "\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_variant_task_id = response.data.task_id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                ],
                "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
              }
            }
          ]
        },
        "parent": {
          "id": "94de7190-582b-4d57-8616-4d14c5535588",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "74eceb6a-0137-4694-815b-7e130020f77c",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
                  }
                }
              ]
            },
            {
              "id": "eea14ae4-8aec-429c-b128-4bff6b2b34a9",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3fea3327-6760-43c5-96b1-ed6755d34047"
                  }
                }
              ]
            },
            {
              "id": "1c6c5d8e-a2e5-4843-bf84-51e1e1e9f0c0",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41d622d-acf5-4017-b650-708c1c7ce506",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
                  }
                }
              ]
            },
            {
              "id": "8d61201d-b808-45fb-a111-e06c89bfb124",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "153bbab0-3a6b-41e0-bc6c-f416401308fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9b2e21be-7631-4986-81df-e18e0f8ee6ff"
                  }
                }
              ]
            },
            {
              "id": "1e1d34dd-cb99-4a4d-9c2d-205750a40d72",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceabbca5-0a2b-4ae0-bad1-7ad182f2416a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "88df03cb-5f4a-4d46-bcaa-f8644022d584"
                  }
                }
              ]
            },
            {
              "id": "74312ded-ad9e-4c85-8fb1-d98253b69dab",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba97a799-e064-4f1a-aee2-97ed3299cf98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b8a2e8a-0c99-4c50-95d2-e6697c72c860"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2425b117-718d-4c0c-90d9-426398c06130",
          "length": 110,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "237aed1c-0785-44e3-bcbb-9adcb0188481",
          "scriptId": "7f2d54ee-b91a-44a2-a86a-899735ee7142"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)",
          "checksum": "d343f874d8f6fe3e317a839fc66722a5",
          "id": "7f2c7191-7f7c-47e7-8ead-7d4c2ce45b8c",
          "timestamp": 1718334818813,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "eea14ae4-8aec-429c-b128-4bff6b2b34a9",
          "name": "Validate the user is unable to validate variants with incorrect query data",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "3fea3327-6760-43c5-96b1-ed6755d34047"
              }
            }
          ]
        },
        "parent": {
          "id": "94de7190-582b-4d57-8616-4d14c5535588",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "74eceb6a-0137-4694-815b-7e130020f77c",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
                  }
                }
              ]
            },
            {
              "id": "eea14ae4-8aec-429c-b128-4bff6b2b34a9",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3fea3327-6760-43c5-96b1-ed6755d34047"
                  }
                }
              ]
            },
            {
              "id": "1c6c5d8e-a2e5-4843-bf84-51e1e1e9f0c0",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41d622d-acf5-4017-b650-708c1c7ce506",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
                  }
                }
              ]
            },
            {
              "id": "8d61201d-b808-45fb-a111-e06c89bfb124",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "153bbab0-3a6b-41e0-bc6c-f416401308fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9b2e21be-7631-4986-81df-e18e0f8ee6ff"
                  }
                }
              ]
            },
            {
              "id": "1e1d34dd-cb99-4a4d-9c2d-205750a40d72",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceabbca5-0a2b-4ae0-bad1-7ad182f2416a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "88df03cb-5f4a-4d46-bcaa-f8644022d584"
                  }
                }
              ]
            },
            {
              "id": "74312ded-ad9e-4c85-8fb1-d98253b69dab",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba97a799-e064-4f1a-aee2-97ed3299cf98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b8a2e8a-0c99-4c50-95d2-e6697c72c860"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "77f549b7-7ab2-4edc-8723-b2a91566074d",
          "length": 110,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9e75ef7e-bf67-48a6-80ee-5b3dfb115f70",
          "scriptId": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
          "execution": "3fea3327-6760-43c5-96b1-ed6755d34047"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:27)",
          "checksum": "3698af6b1650443db456256f68626bba",
          "id": "ae65c08e-871a-4a9c-966d-13ba56cb9ec9",
          "timestamp": 1718334818816,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "eea14ae4-8aec-429c-b128-4bff6b2b34a9",
          "name": "Validate the user is unable to validate variants with incorrect query data",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "3fea3327-6760-43c5-96b1-ed6755d34047"
              }
            }
          ]
        },
        "parent": {
          "id": "94de7190-582b-4d57-8616-4d14c5535588",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "74eceb6a-0137-4694-815b-7e130020f77c",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
                  }
                }
              ]
            },
            {
              "id": "eea14ae4-8aec-429c-b128-4bff6b2b34a9",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3fea3327-6760-43c5-96b1-ed6755d34047"
                  }
                }
              ]
            },
            {
              "id": "1c6c5d8e-a2e5-4843-bf84-51e1e1e9f0c0",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41d622d-acf5-4017-b650-708c1c7ce506",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
                  }
                }
              ]
            },
            {
              "id": "8d61201d-b808-45fb-a111-e06c89bfb124",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "153bbab0-3a6b-41e0-bc6c-f416401308fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9b2e21be-7631-4986-81df-e18e0f8ee6ff"
                  }
                }
              ]
            },
            {
              "id": "1e1d34dd-cb99-4a4d-9c2d-205750a40d72",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceabbca5-0a2b-4ae0-bad1-7ad182f2416a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "88df03cb-5f4a-4d46-bcaa-f8644022d584"
                  }
                }
              ]
            },
            {
              "id": "74312ded-ad9e-4c85-8fb1-d98253b69dab",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba97a799-e064-4f1a-aee2-97ed3299cf98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b8a2e8a-0c99-4c50-95d2-e6697c72c860"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "77f549b7-7ab2-4edc-8723-b2a91566074d",
          "length": 110,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9e75ef7e-bf67-48a6-80ee-5b3dfb115f70",
          "scriptId": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
          "execution": "3fea3327-6760-43c5-96b1-ed6755d34047"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)",
          "checksum": "4eb4b70a5ec4b4331a2466c2c609196a",
          "id": "0686c953-7ca5-4f66-b21a-d2cdfb014cc6",
          "timestamp": 1718334819518,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1c6c5d8e-a2e5-4843-bf84-51e1e1e9f0c0",
          "name": "Validate the user is unable to validate variants without query data",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c41d622d-acf5-4017-b650-708c1c7ce506",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
              }
            }
          ]
        },
        "parent": {
          "id": "94de7190-582b-4d57-8616-4d14c5535588",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "74eceb6a-0137-4694-815b-7e130020f77c",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
                  }
                }
              ]
            },
            {
              "id": "eea14ae4-8aec-429c-b128-4bff6b2b34a9",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3fea3327-6760-43c5-96b1-ed6755d34047"
                  }
                }
              ]
            },
            {
              "id": "1c6c5d8e-a2e5-4843-bf84-51e1e1e9f0c0",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41d622d-acf5-4017-b650-708c1c7ce506",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
                  }
                }
              ]
            },
            {
              "id": "8d61201d-b808-45fb-a111-e06c89bfb124",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "153bbab0-3a6b-41e0-bc6c-f416401308fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9b2e21be-7631-4986-81df-e18e0f8ee6ff"
                  }
                }
              ]
            },
            {
              "id": "1e1d34dd-cb99-4a4d-9c2d-205750a40d72",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceabbca5-0a2b-4ae0-bad1-7ad182f2416a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "88df03cb-5f4a-4d46-bcaa-f8644022d584"
                  }
                }
              ]
            },
            {
              "id": "74312ded-ad9e-4c85-8fb1-d98253b69dab",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba97a799-e064-4f1a-aee2-97ed3299cf98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b8a2e8a-0c99-4c50-95d2-e6697c72c860"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8b9ac0e7-d70d-40bc-80cf-910cb7857206",
          "length": 110,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "59f8ed9c-7ce4-40a3-9e62-0916a28236d5",
          "scriptId": "c41d622d-acf5-4017-b650-708c1c7ce506",
          "execution": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:28)",
          "checksum": "ba01c583d5fffa0decd81348aa3035f8",
          "id": "78f6acf1-0db2-460b-a87e-6a48d70d965e",
          "timestamp": 1718334819520,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1c6c5d8e-a2e5-4843-bf84-51e1e1e9f0c0",
          "name": "Validate the user is unable to validate variants without query data",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c41d622d-acf5-4017-b650-708c1c7ce506",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
              }
            }
          ]
        },
        "parent": {
          "id": "94de7190-582b-4d57-8616-4d14c5535588",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "74eceb6a-0137-4694-815b-7e130020f77c",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
                  }
                }
              ]
            },
            {
              "id": "eea14ae4-8aec-429c-b128-4bff6b2b34a9",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3fea3327-6760-43c5-96b1-ed6755d34047"
                  }
                }
              ]
            },
            {
              "id": "1c6c5d8e-a2e5-4843-bf84-51e1e1e9f0c0",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41d622d-acf5-4017-b650-708c1c7ce506",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
                  }
                }
              ]
            },
            {
              "id": "8d61201d-b808-45fb-a111-e06c89bfb124",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "153bbab0-3a6b-41e0-bc6c-f416401308fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9b2e21be-7631-4986-81df-e18e0f8ee6ff"
                  }
                }
              ]
            },
            {
              "id": "1e1d34dd-cb99-4a4d-9c2d-205750a40d72",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceabbca5-0a2b-4ae0-bad1-7ad182f2416a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "88df03cb-5f4a-4d46-bcaa-f8644022d584"
                  }
                }
              ]
            },
            {
              "id": "74312ded-ad9e-4c85-8fb1-d98253b69dab",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba97a799-e064-4f1a-aee2-97ed3299cf98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b8a2e8a-0c99-4c50-95d2-e6697c72c860"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8b9ac0e7-d70d-40bc-80cf-910cb7857206",
          "length": 110,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "59f8ed9c-7ce4-40a3-9e62-0916a28236d5",
          "scriptId": "c41d622d-acf5-4017-b650-708c1c7ce506",
          "execution": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:29)",
          "checksum": "40077fe07c1ee599af43f9a98fe87ada",
          "id": "3beefcfc-ed48-44f3-a168-9594efa5bcd6",
          "timestamp": 1718334820215,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 29,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "8d61201d-b808-45fb-a111-e06c89bfb124",
          "name": "Validate the user is unable to validate variants without Authorization",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "153bbab0-3a6b-41e0-bc6c-f416401308fc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "9b2e21be-7631-4986-81df-e18e0f8ee6ff"
              }
            }
          ]
        },
        "parent": {
          "id": "94de7190-582b-4d57-8616-4d14c5535588",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "74eceb6a-0137-4694-815b-7e130020f77c",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
                  }
                }
              ]
            },
            {
              "id": "eea14ae4-8aec-429c-b128-4bff6b2b34a9",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3fea3327-6760-43c5-96b1-ed6755d34047"
                  }
                }
              ]
            },
            {
              "id": "1c6c5d8e-a2e5-4843-bf84-51e1e1e9f0c0",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41d622d-acf5-4017-b650-708c1c7ce506",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
                  }
                }
              ]
            },
            {
              "id": "8d61201d-b808-45fb-a111-e06c89bfb124",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "153bbab0-3a6b-41e0-bc6c-f416401308fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9b2e21be-7631-4986-81df-e18e0f8ee6ff"
                  }
                }
              ]
            },
            {
              "id": "1e1d34dd-cb99-4a4d-9c2d-205750a40d72",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceabbca5-0a2b-4ae0-bad1-7ad182f2416a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "88df03cb-5f4a-4d46-bcaa-f8644022d584"
                  }
                }
              ]
            },
            {
              "id": "74312ded-ad9e-4c85-8fb1-d98253b69dab",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba97a799-e064-4f1a-aee2-97ed3299cf98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b8a2e8a-0c99-4c50-95d2-e6697c72c860"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "42e198e2-2553-4427-820c-536e76da16b7",
          "length": 110,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d61cf299-db35-43c1-b47d-398b1b018ef9",
          "scriptId": "153bbab0-3a6b-41e0-bc6c-f416401308fc",
          "execution": "9b2e21be-7631-4986-81df-e18e0f8ee6ff"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:30)",
          "checksum": "878ae6b34bea9a149f1aca0b045ce77f",
          "id": "a82cb264-f59f-48ec-b67e-bc933728b563",
          "timestamp": 1718334820966,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 30,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1e1d34dd-cb99-4a4d-9c2d-205750a40d72",
          "name": "Validate the user is unable to validate variants as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ceabbca5-0a2b-4ae0-bad1-7ad182f2416a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "88df03cb-5f4a-4d46-bcaa-f8644022d584"
              }
            }
          ]
        },
        "parent": {
          "id": "94de7190-582b-4d57-8616-4d14c5535588",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "74eceb6a-0137-4694-815b-7e130020f77c",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f2d54ee-b91a-44a2-a86a-899735ee7142",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "b72e6d02-5a24-4a81-b442-6e00884fdf51"
                  }
                }
              ]
            },
            {
              "id": "eea14ae4-8aec-429c-b128-4bff6b2b34a9",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6a7f5ac8-952b-4f08-83f9-6a265ae13d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3fea3327-6760-43c5-96b1-ed6755d34047"
                  }
                }
              ]
            },
            {
              "id": "1c6c5d8e-a2e5-4843-bf84-51e1e1e9f0c0",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41d622d-acf5-4017-b650-708c1c7ce506",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5c2c4926-21ac-4d6a-b7a2-8c29132f9afc"
                  }
                }
              ]
            },
            {
              "id": "8d61201d-b808-45fb-a111-e06c89bfb124",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "153bbab0-3a6b-41e0-bc6c-f416401308fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9b2e21be-7631-4986-81df-e18e0f8ee6ff"
                  }
                }
              ]
            },
            {
              "id": "1e1d34dd-cb99-4a4d-9c2d-205750a40d72",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceabbca5-0a2b-4ae0-bad1-7ad182f2416a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "88df03cb-5f4a-4d46-bcaa-f8644022d584"
                  }
                }
              ]
            },
            {
              "id": "74312ded-ad9e-4c85-8fb1-d98253b69dab",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba97a799-e064-4f1a-aee2-97ed3299cf98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b8a2e8a-0c99-4c50-95d2-e6697c72c860"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a22e416d-f1a2-4214-9803-725fc19c1981",
          "length": 110,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5032368d-57f9-4155-8bc4-927d89cb984f",
          "scriptId": "ceabbca5-0a2b-4ae0-bad1-7ad182f2416a",
          "execution": "88df03cb-5f4a-4d46-bcaa-f8644022d584"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:32)",
          "checksum": "bc588d93f5581846e1d2a47eeb111109",
          "id": "d1a5231d-ce01-418b-9679-04ffae043dc9",
          "timestamp": 1718334822370,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "dab9441d-2f8a-4b44-aa24-570c4cdad117",
          "name": "Validate user is able to upload medical files successfully",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ac326b6b-bf16-489c-99fa-8aa9f7beeb29",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "535aa12f-f860-486a-9bd8-d5d816994d66"
              }
            }
          ]
        },
        "parent": {
          "id": "f166e773-ca0c-4991-8247-a7aeb8168d3d",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "dab9441d-2f8a-4b44-aa24-570c4cdad117",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac326b6b-bf16-489c-99fa-8aa9f7beeb29",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "535aa12f-f860-486a-9bd8-d5d816994d66"
                  }
                }
              ]
            },
            {
              "id": "bdf1d571-40b9-4262-a6b2-57bc6060792d",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa77ff3e-af62-42c4-ace5-845cf18cd168",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "24e9914f-70c4-4ac1-bfe7-96857d4cade3"
                  }
                }
              ]
            },
            {
              "id": "c0f07e74-1fd2-41e8-bcdd-6023fe81b172",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3229307-a621-4f6b-ba33-c2726b0a99f5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "185a7fba-5055-4899-8fd4-e2f0db24e22c"
                  }
                }
              ]
            },
            {
              "id": "e59c68ef-dca6-48ba-8a52-665718a56e7c",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a83efa1-296c-437f-84f1-ca121a356546",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "85ade955-fb18-4d88-b3bb-d372f8d23744"
                  }
                }
              ]
            },
            {
              "id": "f6ce480e-0be1-4361-ba3e-cc86c6422043",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aecdbefd-96af-43dc-aa5a-0d469b6ac74c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e01339da-c072-4928-89f0-88a6b4722ffe"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b8923600-954f-4974-87e5-a0cd2cc974de",
          "length": 110,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "690100df-b5c9-483e-b487-33c6102ca1db",
          "scriptId": "ac326b6b-bf16-489c-99fa-8aa9f7beeb29",
          "execution": "535aa12f-f860-486a-9bd8-d5d816994d66"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Other medical file(s) uploaded succes…'",
          "stack": "AssertionError: expected undefined to deeply equal 'Other medical file(s) uploaded succes…'\n   at Object.eval sandbox-script.js:2:32)",
          "checksum": "3aacecc4ee731255aa8b26615d9769c9",
          "id": "d25726f0-cee5-4f16-bd7a-0dac69628e3f",
          "timestamp": 1718334822371,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "dab9441d-2f8a-4b44-aa24-570c4cdad117",
          "name": "Validate user is able to upload medical files successfully",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ac326b6b-bf16-489c-99fa-8aa9f7beeb29",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "535aa12f-f860-486a-9bd8-d5d816994d66"
              }
            }
          ]
        },
        "parent": {
          "id": "f166e773-ca0c-4991-8247-a7aeb8168d3d",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "dab9441d-2f8a-4b44-aa24-570c4cdad117",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac326b6b-bf16-489c-99fa-8aa9f7beeb29",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "535aa12f-f860-486a-9bd8-d5d816994d66"
                  }
                }
              ]
            },
            {
              "id": "bdf1d571-40b9-4262-a6b2-57bc6060792d",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa77ff3e-af62-42c4-ace5-845cf18cd168",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "24e9914f-70c4-4ac1-bfe7-96857d4cade3"
                  }
                }
              ]
            },
            {
              "id": "c0f07e74-1fd2-41e8-bcdd-6023fe81b172",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3229307-a621-4f6b-ba33-c2726b0a99f5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "185a7fba-5055-4899-8fd4-e2f0db24e22c"
                  }
                }
              ]
            },
            {
              "id": "e59c68ef-dca6-48ba-8a52-665718a56e7c",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a83efa1-296c-437f-84f1-ca121a356546",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "85ade955-fb18-4d88-b3bb-d372f8d23744"
                  }
                }
              ]
            },
            {
              "id": "f6ce480e-0be1-4361-ba3e-cc86c6422043",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aecdbefd-96af-43dc-aa5a-0d469b6ac74c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e01339da-c072-4928-89f0-88a6b4722ffe"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b8923600-954f-4974-87e5-a0cd2cc974de",
          "length": 110,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "690100df-b5c9-483e-b487-33c6102ca1db",
          "scriptId": "ac326b6b-bf16-489c-99fa-8aa9f7beeb29",
          "execution": "535aa12f-f860-486a-9bd8-d5d816994d66"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:33)",
          "checksum": "e3908cc0fbf213a5f7697c8be06f2a18",
          "id": "82bca5dd-c1a6-4d79-81cf-564b1f652df4",
          "timestamp": 1718334823222,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 33,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "bdf1d571-40b9-4262-a6b2-57bc6060792d",
          "name": "Validate user is able to upload multiple medical files successfully",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [
                    "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                    "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                  ]
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa77ff3e-af62-42c4-ace5-845cf18cd168",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                  "});\r",
                  "let responseData = pm.response.json();\r",
                  "let p_other_task_id = responseData.task_id;\r",
                  "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                ],
                "_lastExecutionId": "24e9914f-70c4-4ac1-bfe7-96857d4cade3"
              }
            }
          ]
        },
        "parent": {
          "id": "f166e773-ca0c-4991-8247-a7aeb8168d3d",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "dab9441d-2f8a-4b44-aa24-570c4cdad117",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac326b6b-bf16-489c-99fa-8aa9f7beeb29",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "535aa12f-f860-486a-9bd8-d5d816994d66"
                  }
                }
              ]
            },
            {
              "id": "bdf1d571-40b9-4262-a6b2-57bc6060792d",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa77ff3e-af62-42c4-ace5-845cf18cd168",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "24e9914f-70c4-4ac1-bfe7-96857d4cade3"
                  }
                }
              ]
            },
            {
              "id": "c0f07e74-1fd2-41e8-bcdd-6023fe81b172",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3229307-a621-4f6b-ba33-c2726b0a99f5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "185a7fba-5055-4899-8fd4-e2f0db24e22c"
                  }
                }
              ]
            },
            {
              "id": "e59c68ef-dca6-48ba-8a52-665718a56e7c",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a83efa1-296c-437f-84f1-ca121a356546",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "85ade955-fb18-4d88-b3bb-d372f8d23744"
                  }
                }
              ]
            },
            {
              "id": "f6ce480e-0be1-4361-ba3e-cc86c6422043",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aecdbefd-96af-43dc-aa5a-0d469b6ac74c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e01339da-c072-4928-89f0-88a6b4722ffe"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ee3859a4-e27e-4d0e-bfbf-5de454c78f31",
          "length": 110,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cd5def9a-6270-42cc-bcf9-30461b9c66fa",
          "scriptId": "fa77ff3e-af62-42c4-ace5-845cf18cd168",
          "execution": "24e9914f-70c4-4ac1-bfe7-96857d4cade3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Other medical file(s) uploaded succes…'",
          "stack": "AssertionError: expected undefined to deeply equal 'Other medical file(s) uploaded succes…'\n   at Object.eval sandbox-script.js:2:33)",
          "checksum": "dbaf541e369f88881cac307f9aa8a50a",
          "id": "a8e45c63-c48a-441e-92af-2a72e276172a",
          "timestamp": 1718334823224,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 33,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "bdf1d571-40b9-4262-a6b2-57bc6060792d",
          "name": "Validate user is able to upload multiple medical files successfully",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [
                    "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                    "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                  ]
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa77ff3e-af62-42c4-ace5-845cf18cd168",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                  "});\r",
                  "let responseData = pm.response.json();\r",
                  "let p_other_task_id = responseData.task_id;\r",
                  "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                ],
                "_lastExecutionId": "24e9914f-70c4-4ac1-bfe7-96857d4cade3"
              }
            }
          ]
        },
        "parent": {
          "id": "f166e773-ca0c-4991-8247-a7aeb8168d3d",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "dab9441d-2f8a-4b44-aa24-570c4cdad117",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac326b6b-bf16-489c-99fa-8aa9f7beeb29",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "535aa12f-f860-486a-9bd8-d5d816994d66"
                  }
                }
              ]
            },
            {
              "id": "bdf1d571-40b9-4262-a6b2-57bc6060792d",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa77ff3e-af62-42c4-ace5-845cf18cd168",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "24e9914f-70c4-4ac1-bfe7-96857d4cade3"
                  }
                }
              ]
            },
            {
              "id": "c0f07e74-1fd2-41e8-bcdd-6023fe81b172",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3229307-a621-4f6b-ba33-c2726b0a99f5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "185a7fba-5055-4899-8fd4-e2f0db24e22c"
                  }
                }
              ]
            },
            {
              "id": "e59c68ef-dca6-48ba-8a52-665718a56e7c",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a83efa1-296c-437f-84f1-ca121a356546",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "85ade955-fb18-4d88-b3bb-d372f8d23744"
                  }
                }
              ]
            },
            {
              "id": "f6ce480e-0be1-4361-ba3e-cc86c6422043",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aecdbefd-96af-43dc-aa5a-0d469b6ac74c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e01339da-c072-4928-89f0-88a6b4722ffe"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ee3859a4-e27e-4d0e-bfbf-5de454c78f31",
          "length": 110,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cd5def9a-6270-42cc-bcf9-30461b9c66fa",
          "scriptId": "fa77ff3e-af62-42c4-ace5-845cf18cd168",
          "execution": "24e9914f-70c4-4ac1-bfe7-96857d4cade3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 422",
          "stack": "AssertionError: expected response to have status code 400 but got 422\n   at Object.eval sandbox-script.js:1:34)",
          "checksum": "c58cd9d5cc6c111dfa03c7dea8f8daac",
          "id": "bc454773-df6c-44f4-b655-97c8c4a5c89c",
          "timestamp": 1718334824045,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 34,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c0f07e74-1fd2-41e8-bcdd-6023fe81b172",
          "name": "Validate user is unable to upload medical fileswith incorrect id",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3229307-a621-4f6b-ba33-c2726b0a99f5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "185a7fba-5055-4899-8fd4-e2f0db24e22c"
              }
            }
          ]
        },
        "parent": {
          "id": "f166e773-ca0c-4991-8247-a7aeb8168d3d",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "dab9441d-2f8a-4b44-aa24-570c4cdad117",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac326b6b-bf16-489c-99fa-8aa9f7beeb29",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "535aa12f-f860-486a-9bd8-d5d816994d66"
                  }
                }
              ]
            },
            {
              "id": "bdf1d571-40b9-4262-a6b2-57bc6060792d",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa77ff3e-af62-42c4-ace5-845cf18cd168",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "24e9914f-70c4-4ac1-bfe7-96857d4cade3"
                  }
                }
              ]
            },
            {
              "id": "c0f07e74-1fd2-41e8-bcdd-6023fe81b172",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3229307-a621-4f6b-ba33-c2726b0a99f5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "185a7fba-5055-4899-8fd4-e2f0db24e22c"
                  }
                }
              ]
            },
            {
              "id": "e59c68ef-dca6-48ba-8a52-665718a56e7c",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a83efa1-296c-437f-84f1-ca121a356546",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "85ade955-fb18-4d88-b3bb-d372f8d23744"
                  }
                }
              ]
            },
            {
              "id": "f6ce480e-0be1-4361-ba3e-cc86c6422043",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aecdbefd-96af-43dc-aa5a-0d469b6ac74c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e01339da-c072-4928-89f0-88a6b4722ffe"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5596e39d-1db0-401b-88ce-97b6723fa384",
          "length": 110,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d77b1bb6-3955-4f86-88bc-6272fe666300",
          "scriptId": "c3229307-a621-4f6b-ba33-c2726b0a99f5",
          "execution": "185a7fba-5055-4899-8fd4-e2f0db24e22c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected undefined to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:34)",
          "checksum": "ec910f36839e3d3bc9fc3bf841dc3e5b",
          "id": "cc03e1ec-4824-41e7-bb81-258664822b6e",
          "timestamp": 1718334824046,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 34,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c0f07e74-1fd2-41e8-bcdd-6023fe81b172",
          "name": "Validate user is unable to upload medical fileswith incorrect id",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3229307-a621-4f6b-ba33-c2726b0a99f5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "185a7fba-5055-4899-8fd4-e2f0db24e22c"
              }
            }
          ]
        },
        "parent": {
          "id": "f166e773-ca0c-4991-8247-a7aeb8168d3d",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "dab9441d-2f8a-4b44-aa24-570c4cdad117",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac326b6b-bf16-489c-99fa-8aa9f7beeb29",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "535aa12f-f860-486a-9bd8-d5d816994d66"
                  }
                }
              ]
            },
            {
              "id": "bdf1d571-40b9-4262-a6b2-57bc6060792d",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa77ff3e-af62-42c4-ace5-845cf18cd168",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "24e9914f-70c4-4ac1-bfe7-96857d4cade3"
                  }
                }
              ]
            },
            {
              "id": "c0f07e74-1fd2-41e8-bcdd-6023fe81b172",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3229307-a621-4f6b-ba33-c2726b0a99f5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "185a7fba-5055-4899-8fd4-e2f0db24e22c"
                  }
                }
              ]
            },
            {
              "id": "e59c68ef-dca6-48ba-8a52-665718a56e7c",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a83efa1-296c-437f-84f1-ca121a356546",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "85ade955-fb18-4d88-b3bb-d372f8d23744"
                  }
                }
              ]
            },
            {
              "id": "f6ce480e-0be1-4361-ba3e-cc86c6422043",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aecdbefd-96af-43dc-aa5a-0d469b6ac74c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e01339da-c072-4928-89f0-88a6b4722ffe"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5596e39d-1db0-401b-88ce-97b6723fa384",
          "length": 110,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d77b1bb6-3955-4f86-88bc-6272fe666300",
          "scriptId": "c3229307-a621-4f6b-ba33-c2726b0a99f5",
          "execution": "185a7fba-5055-4899-8fd4-e2f0db24e22c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)",
          "checksum": "1e7276fa1d179b793b9bf7e8a3f33fec",
          "id": "40b4542f-1e0e-4467-9cb5-9f6919b64aae",
          "timestamp": 1718334825060,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 35,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e59c68ef-dca6-48ba-8a52-665718a56e7c",
          "name": "Validate user is unable to upload medical files as user is unauthorized",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a83efa1-296c-437f-84f1-ca121a356546",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "85ade955-fb18-4d88-b3bb-d372f8d23744"
              }
            }
          ]
        },
        "parent": {
          "id": "f166e773-ca0c-4991-8247-a7aeb8168d3d",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "dab9441d-2f8a-4b44-aa24-570c4cdad117",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac326b6b-bf16-489c-99fa-8aa9f7beeb29",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "535aa12f-f860-486a-9bd8-d5d816994d66"
                  }
                }
              ]
            },
            {
              "id": "bdf1d571-40b9-4262-a6b2-57bc6060792d",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa77ff3e-af62-42c4-ace5-845cf18cd168",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "24e9914f-70c4-4ac1-bfe7-96857d4cade3"
                  }
                }
              ]
            },
            {
              "id": "c0f07e74-1fd2-41e8-bcdd-6023fe81b172",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3229307-a621-4f6b-ba33-c2726b0a99f5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "185a7fba-5055-4899-8fd4-e2f0db24e22c"
                  }
                }
              ]
            },
            {
              "id": "e59c68ef-dca6-48ba-8a52-665718a56e7c",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a83efa1-296c-437f-84f1-ca121a356546",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "85ade955-fb18-4d88-b3bb-d372f8d23744"
                  }
                }
              ]
            },
            {
              "id": "f6ce480e-0be1-4361-ba3e-cc86c6422043",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aecdbefd-96af-43dc-aa5a-0d469b6ac74c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e01339da-c072-4928-89f0-88a6b4722ffe"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5849ddb0-4523-4ede-9936-9197a4f30da2",
          "length": 110,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3ca54ea9-a9d6-4f5d-8db5-f51623ee48c7",
          "scriptId": "5a83efa1-296c-437f-84f1-ca121a356546",
          "execution": "85ade955-fb18-4d88-b3bb-d372f8d23744"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:35)",
          "checksum": "eeb9ab8673937252a4f9fe3ec579050a",
          "id": "d6ed2db0-0b95-4506-8039-4598b00d1892",
          "timestamp": 1718334825062,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 35,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e59c68ef-dca6-48ba-8a52-665718a56e7c",
          "name": "Validate user is unable to upload medical files as user is unauthorized",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a83efa1-296c-437f-84f1-ca121a356546",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "85ade955-fb18-4d88-b3bb-d372f8d23744"
              }
            }
          ]
        },
        "parent": {
          "id": "f166e773-ca0c-4991-8247-a7aeb8168d3d",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "dab9441d-2f8a-4b44-aa24-570c4cdad117",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac326b6b-bf16-489c-99fa-8aa9f7beeb29",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "535aa12f-f860-486a-9bd8-d5d816994d66"
                  }
                }
              ]
            },
            {
              "id": "bdf1d571-40b9-4262-a6b2-57bc6060792d",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa77ff3e-af62-42c4-ace5-845cf18cd168",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "24e9914f-70c4-4ac1-bfe7-96857d4cade3"
                  }
                }
              ]
            },
            {
              "id": "c0f07e74-1fd2-41e8-bcdd-6023fe81b172",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3229307-a621-4f6b-ba33-c2726b0a99f5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "185a7fba-5055-4899-8fd4-e2f0db24e22c"
                  }
                }
              ]
            },
            {
              "id": "e59c68ef-dca6-48ba-8a52-665718a56e7c",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a83efa1-296c-437f-84f1-ca121a356546",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "85ade955-fb18-4d88-b3bb-d372f8d23744"
                  }
                }
              ]
            },
            {
              "id": "f6ce480e-0be1-4361-ba3e-cc86c6422043",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aecdbefd-96af-43dc-aa5a-0d469b6ac74c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e01339da-c072-4928-89f0-88a6b4722ffe"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5849ddb0-4523-4ede-9936-9197a4f30da2",
          "length": 110,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3ca54ea9-a9d6-4f5d-8db5-f51623ee48c7",
          "scriptId": "5a83efa1-296c-437f-84f1-ca121a356546",
          "execution": "85ade955-fb18-4d88-b3bb-d372f8d23744"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Method Not Allowed'",
          "stack": "AssertionError: expected undefined to deeply equal 'Method Not Allowed'\n   at Object.eval sandbox-script.js:2:36)",
          "checksum": "c81871e2fe97a8d74067ca193a5b3ab6",
          "id": "a40dcc2b-3776-48b2-86d4-12465af7fc9c",
          "timestamp": 1718334825758,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 36,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f6ce480e-0be1-4361-ba3e-cc86c6422043",
          "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aecdbefd-96af-43dc-aa5a-0d469b6ac74c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "e01339da-c072-4928-89f0-88a6b4722ffe"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "f166e773-ca0c-4991-8247-a7aeb8168d3d",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "dab9441d-2f8a-4b44-aa24-570c4cdad117",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac326b6b-bf16-489c-99fa-8aa9f7beeb29",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "535aa12f-f860-486a-9bd8-d5d816994d66"
                  }
                }
              ]
            },
            {
              "id": "bdf1d571-40b9-4262-a6b2-57bc6060792d",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa77ff3e-af62-42c4-ace5-845cf18cd168",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "24e9914f-70c4-4ac1-bfe7-96857d4cade3"
                  }
                }
              ]
            },
            {
              "id": "c0f07e74-1fd2-41e8-bcdd-6023fe81b172",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e4a-c5ae-4700-9f73-063684b58f00"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3229307-a621-4f6b-ba33-c2726b0a99f5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "185a7fba-5055-4899-8fd4-e2f0db24e22c"
                  }
                }
              ]
            },
            {
              "id": "e59c68ef-dca6-48ba-8a52-665718a56e7c",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a83efa1-296c-437f-84f1-ca121a356546",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "85ade955-fb18-4d88-b3bb-d372f8d23744"
                  }
                }
              ]
            },
            {
              "id": "f6ce480e-0be1-4361-ba3e-cc86c6422043",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aecdbefd-96af-43dc-aa5a-0d469b6ac74c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e01339da-c072-4928-89f0-88a6b4722ffe"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "806902fc-818a-4942-adff-e32fa4d6456d",
          "length": 110,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1bd0e03b-65e3-4b19-9d70-167c0a713d5a",
          "scriptId": "aecdbefd-96af-43dc-aa5a-0d469b6ac74c",
          "execution": "e01339da-c072-4928-89f0-88a6b4722ffe"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:37)",
          "checksum": "37b55024ba46539985b02a364e0ff383",
          "id": "c7bb1440-445a-46e6-9d8f-602b03d0d296",
          "timestamp": 1718334826394,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 37,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
          "name": "Validate user is able to check status of task successfully for Patient info",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
              }
            }
          ]
        },
        "parent": {
          "id": "593fafa9-0dd5-4f0e-acda-9ac6da151f0c",
          "name": "check task status",
          "item": [
            {
              "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
                  }
                }
              ]
            },
            {
              "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
                  }
                }
              ]
            },
            {
              "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
                  }
                }
              ]
            },
            {
              "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
                  }
                }
              ]
            },
            {
              "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147a0fde-5788-4996-9619-297da9714852",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
                  }
                }
              ]
            },
            {
              "id": "841a70e5-6cc2-4bd5-97ab-380582f9ed80",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "750b10af-fa67-4ede-bbde-b20d20b45ae9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8b60052f-49c6-4107-a8ec-5f7671ffa546"
                  }
                }
              ]
            },
            {
              "id": "3e795864-8b1b-43a7-880c-67e6a5165d9a",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "19b29895-3355-4b50-8294-38e3c5cf31fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "12247455-18ec-4f0d-a6c7-4359b0ab0ea9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1cadd5d7-ba71-4fe5-acbd-8cd8377c562f",
          "length": 110,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a27df9f1-1887-47cd-bd98-48597fe49f00",
          "scriptId": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
          "execution": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:37)",
          "checksum": "2b52dacc5594a2e1d9492c4c32e0ac7b",
          "id": "b10685d9-efbe-4c87-bfa6-65f56cccf1dc",
          "timestamp": 1718334826396,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 37,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
          "name": "Validate user is able to check status of task successfully for Patient info",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
              }
            }
          ]
        },
        "parent": {
          "id": "593fafa9-0dd5-4f0e-acda-9ac6da151f0c",
          "name": "check task status",
          "item": [
            {
              "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
                  }
                }
              ]
            },
            {
              "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
                  }
                }
              ]
            },
            {
              "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
                  }
                }
              ]
            },
            {
              "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
                  }
                }
              ]
            },
            {
              "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147a0fde-5788-4996-9619-297da9714852",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
                  }
                }
              ]
            },
            {
              "id": "841a70e5-6cc2-4bd5-97ab-380582f9ed80",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "750b10af-fa67-4ede-bbde-b20d20b45ae9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8b60052f-49c6-4107-a8ec-5f7671ffa546"
                  }
                }
              ]
            },
            {
              "id": "3e795864-8b1b-43a7-880c-67e6a5165d9a",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "19b29895-3355-4b50-8294-38e3c5cf31fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "12247455-18ec-4f0d-a6c7-4359b0ab0ea9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1cadd5d7-ba71-4fe5-acbd-8cd8377c562f",
          "length": 110,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a27df9f1-1887-47cd-bd98-48597fe49f00",
          "scriptId": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
          "execution": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Task details retrieved successfully'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Task details retrieved successfully'\n   at Object.eval sandbox-script.js:3:37)",
          "checksum": "06af332cf6eab3ccd169a24e1766be29",
          "id": "928e6e68-f5e5-4c59-99da-b68f1f06a83e",
          "timestamp": 1718334826398,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 37,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
          "name": "Validate user is able to check status of task successfully for Patient info",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
              }
            }
          ]
        },
        "parent": {
          "id": "593fafa9-0dd5-4f0e-acda-9ac6da151f0c",
          "name": "check task status",
          "item": [
            {
              "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
                  }
                }
              ]
            },
            {
              "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
                  }
                }
              ]
            },
            {
              "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
                  }
                }
              ]
            },
            {
              "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
                  }
                }
              ]
            },
            {
              "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147a0fde-5788-4996-9619-297da9714852",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
                  }
                }
              ]
            },
            {
              "id": "841a70e5-6cc2-4bd5-97ab-380582f9ed80",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "750b10af-fa67-4ede-bbde-b20d20b45ae9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8b60052f-49c6-4107-a8ec-5f7671ffa546"
                  }
                }
              ]
            },
            {
              "id": "3e795864-8b1b-43a7-880c-67e6a5165d9a",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "19b29895-3355-4b50-8294-38e3c5cf31fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "12247455-18ec-4f0d-a6c7-4359b0ab0ea9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1cadd5d7-ba71-4fe5-acbd-8cd8377c562f",
          "length": 110,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a27df9f1-1887-47cd-bd98-48597fe49f00",
          "scriptId": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
          "execution": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:38)",
          "checksum": "a7bf3c3c0d1f1b85236731ead0682843",
          "id": "4488974e-6fdb-43a7-a0f1-0b496dff7a2c",
          "timestamp": 1718334827211,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 38,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
          "name": "Validate user is able to check status of task successfully for Patient Variant File",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
              }
            }
          ]
        },
        "parent": {
          "id": "593fafa9-0dd5-4f0e-acda-9ac6da151f0c",
          "name": "check task status",
          "item": [
            {
              "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
                  }
                }
              ]
            },
            {
              "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
                  }
                }
              ]
            },
            {
              "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
                  }
                }
              ]
            },
            {
              "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
                  }
                }
              ]
            },
            {
              "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147a0fde-5788-4996-9619-297da9714852",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
                  }
                }
              ]
            },
            {
              "id": "841a70e5-6cc2-4bd5-97ab-380582f9ed80",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "750b10af-fa67-4ede-bbde-b20d20b45ae9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8b60052f-49c6-4107-a8ec-5f7671ffa546"
                  }
                }
              ]
            },
            {
              "id": "3e795864-8b1b-43a7-880c-67e6a5165d9a",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "19b29895-3355-4b50-8294-38e3c5cf31fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "12247455-18ec-4f0d-a6c7-4359b0ab0ea9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8f136854-e9c5-43a4-8e7d-a246c4d9dbd1",
          "length": 110,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2e8ad671-4ce7-4ef8-8a7d-7ddf18758c8d",
          "scriptId": "4868b248-dc1f-4205-91f5-b8468232bbf6",
          "execution": "c178ae6d-735f-4531-8bd0-950d3e01d006"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:38)",
          "checksum": "5973b5e85a97cfa16b0b612cb701e001",
          "id": "e2db5ebe-a71b-4d21-80de-e13f4d4c8b6c",
          "timestamp": 1718334827213,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 38,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
          "name": "Validate user is able to check status of task successfully for Patient Variant File",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
              }
            }
          ]
        },
        "parent": {
          "id": "593fafa9-0dd5-4f0e-acda-9ac6da151f0c",
          "name": "check task status",
          "item": [
            {
              "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
                  }
                }
              ]
            },
            {
              "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
                  }
                }
              ]
            },
            {
              "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
                  }
                }
              ]
            },
            {
              "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
                  }
                }
              ]
            },
            {
              "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147a0fde-5788-4996-9619-297da9714852",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
                  }
                }
              ]
            },
            {
              "id": "841a70e5-6cc2-4bd5-97ab-380582f9ed80",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "750b10af-fa67-4ede-bbde-b20d20b45ae9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8b60052f-49c6-4107-a8ec-5f7671ffa546"
                  }
                }
              ]
            },
            {
              "id": "3e795864-8b1b-43a7-880c-67e6a5165d9a",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "19b29895-3355-4b50-8294-38e3c5cf31fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "12247455-18ec-4f0d-a6c7-4359b0ab0ea9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8f136854-e9c5-43a4-8e7d-a246c4d9dbd1",
          "length": 110,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2e8ad671-4ce7-4ef8-8a7d-7ddf18758c8d",
          "scriptId": "4868b248-dc1f-4205-91f5-b8468232bbf6",
          "execution": "c178ae6d-735f-4531-8bd0-950d3e01d006"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Task details retrieved successfully'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Task details retrieved successfully'\n   at Object.eval sandbox-script.js:3:38)",
          "checksum": "8dda02fcbd00d118dc1fb2939a3f9226",
          "id": "96e769cf-e28d-4af1-b280-b3e2c951efc6",
          "timestamp": 1718334827215,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 38,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
          "name": "Validate user is able to check status of task successfully for Patient Variant File",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
              }
            }
          ]
        },
        "parent": {
          "id": "593fafa9-0dd5-4f0e-acda-9ac6da151f0c",
          "name": "check task status",
          "item": [
            {
              "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
                  }
                }
              ]
            },
            {
              "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
                  }
                }
              ]
            },
            {
              "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
                  }
                }
              ]
            },
            {
              "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
                  }
                }
              ]
            },
            {
              "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147a0fde-5788-4996-9619-297da9714852",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
                  }
                }
              ]
            },
            {
              "id": "841a70e5-6cc2-4bd5-97ab-380582f9ed80",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "750b10af-fa67-4ede-bbde-b20d20b45ae9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8b60052f-49c6-4107-a8ec-5f7671ffa546"
                  }
                }
              ]
            },
            {
              "id": "3e795864-8b1b-43a7-880c-67e6a5165d9a",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "19b29895-3355-4b50-8294-38e3c5cf31fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "12247455-18ec-4f0d-a6c7-4359b0ab0ea9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8f136854-e9c5-43a4-8e7d-a246c4d9dbd1",
          "length": 110,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2e8ad671-4ce7-4ef8-8a7d-7ddf18758c8d",
          "scriptId": "4868b248-dc1f-4205-91f5-b8468232bbf6",
          "execution": "c178ae6d-735f-4531-8bd0-950d3e01d006"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)",
          "checksum": "c92f73114cd3c3cada828ee483555bc0",
          "id": "f102e5d9-bc14-48ec-b81f-d7640bbb909d",
          "timestamp": 1718334828034,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 39,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
          "name": "Validate user is unable to check status as task_id is incorrect.",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
              }
            }
          ]
        },
        "parent": {
          "id": "593fafa9-0dd5-4f0e-acda-9ac6da151f0c",
          "name": "check task status",
          "item": [
            {
              "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
                  }
                }
              ]
            },
            {
              "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
                  }
                }
              ]
            },
            {
              "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
                  }
                }
              ]
            },
            {
              "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
                  }
                }
              ]
            },
            {
              "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147a0fde-5788-4996-9619-297da9714852",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
                  }
                }
              ]
            },
            {
              "id": "841a70e5-6cc2-4bd5-97ab-380582f9ed80",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "750b10af-fa67-4ede-bbde-b20d20b45ae9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8b60052f-49c6-4107-a8ec-5f7671ffa546"
                  }
                }
              ]
            },
            {
              "id": "3e795864-8b1b-43a7-880c-67e6a5165d9a",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "19b29895-3355-4b50-8294-38e3c5cf31fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "12247455-18ec-4f0d-a6c7-4359b0ab0ea9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b4e311c6-8d90-48ce-9390-50386e46e919",
          "length": 110,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ee0be7bd-da98-4235-b840-0a2dfdaa5615",
          "scriptId": "b38a7461-dcce-44c6-b1c2-709f014a8675",
          "execution": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:39)",
          "checksum": "16cc3ee3deee5813a4efc03f60980d7a",
          "id": "ce9bf519-030a-434d-9757-7153a72c434f",
          "timestamp": 1718334828036,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 39,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
          "name": "Validate user is unable to check status as task_id is incorrect.",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
              }
            }
          ]
        },
        "parent": {
          "id": "593fafa9-0dd5-4f0e-acda-9ac6da151f0c",
          "name": "check task status",
          "item": [
            {
              "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
                  }
                }
              ]
            },
            {
              "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
                  }
                }
              ]
            },
            {
              "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
                  }
                }
              ]
            },
            {
              "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
                  }
                }
              ]
            },
            {
              "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147a0fde-5788-4996-9619-297da9714852",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
                  }
                }
              ]
            },
            {
              "id": "841a70e5-6cc2-4bd5-97ab-380582f9ed80",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "750b10af-fa67-4ede-bbde-b20d20b45ae9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8b60052f-49c6-4107-a8ec-5f7671ffa546"
                  }
                }
              ]
            },
            {
              "id": "3e795864-8b1b-43a7-880c-67e6a5165d9a",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "19b29895-3355-4b50-8294-38e3c5cf31fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "12247455-18ec-4f0d-a6c7-4359b0ab0ea9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b4e311c6-8d90-48ce-9390-50386e46e919",
          "length": 110,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ee0be7bd-da98-4235-b840-0a2dfdaa5615",
          "scriptId": "b38a7461-dcce-44c6-b1c2-709f014a8675",
          "execution": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)",
          "checksum": "4e6adb05d5aa97fecc5ed40bed52a09c",
          "id": "4630a6d6-8bdf-490b-bee4-7e9b85315ae2",
          "timestamp": 1718334828647,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 40,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
          "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
              }
            }
          ]
        },
        "parent": {
          "id": "593fafa9-0dd5-4f0e-acda-9ac6da151f0c",
          "name": "check task status",
          "item": [
            {
              "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
                  }
                }
              ]
            },
            {
              "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
                  }
                }
              ]
            },
            {
              "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
                  }
                }
              ]
            },
            {
              "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
                  }
                }
              ]
            },
            {
              "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147a0fde-5788-4996-9619-297da9714852",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
                  }
                }
              ]
            },
            {
              "id": "841a70e5-6cc2-4bd5-97ab-380582f9ed80",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "750b10af-fa67-4ede-bbde-b20d20b45ae9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8b60052f-49c6-4107-a8ec-5f7671ffa546"
                  }
                }
              ]
            },
            {
              "id": "3e795864-8b1b-43a7-880c-67e6a5165d9a",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "19b29895-3355-4b50-8294-38e3c5cf31fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "12247455-18ec-4f0d-a6c7-4359b0ab0ea9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8412f8dd-4fbe-4b96-9fea-8348d51ccf53",
          "length": 110,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a7912575-f6f0-4abb-9a6f-4e6546d658cc",
          "scriptId": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
          "execution": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:40)",
          "checksum": "3ddfd43a7f3fa00d7059d6a03213741f",
          "id": "73a2741f-181a-45a8-bbc2-8e48277e6da2",
          "timestamp": 1718334828649,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 40,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
          "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
              }
            }
          ]
        },
        "parent": {
          "id": "593fafa9-0dd5-4f0e-acda-9ac6da151f0c",
          "name": "check task status",
          "item": [
            {
              "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
                  }
                }
              ]
            },
            {
              "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
                  }
                }
              ]
            },
            {
              "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
                  }
                }
              ]
            },
            {
              "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
                  }
                }
              ]
            },
            {
              "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147a0fde-5788-4996-9619-297da9714852",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
                  }
                }
              ]
            },
            {
              "id": "841a70e5-6cc2-4bd5-97ab-380582f9ed80",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "750b10af-fa67-4ede-bbde-b20d20b45ae9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8b60052f-49c6-4107-a8ec-5f7671ffa546"
                  }
                }
              ]
            },
            {
              "id": "3e795864-8b1b-43a7-880c-67e6a5165d9a",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "19b29895-3355-4b50-8294-38e3c5cf31fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "12247455-18ec-4f0d-a6c7-4359b0ab0ea9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8412f8dd-4fbe-4b96-9fea-8348d51ccf53",
          "length": 110,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a7912575-f6f0-4abb-9a6f-4e6546d658cc",
          "scriptId": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
          "execution": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)",
          "checksum": "da8f1222fa6bca152901c63f4aacbbe8",
          "id": "d21f7767-79d8-4d1c-81d7-fa3aef909023",
          "timestamp": 1718334829360,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 41,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
          "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "147a0fde-5788-4996-9619-297da9714852",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
              }
            }
          ]
        },
        "parent": {
          "id": "593fafa9-0dd5-4f0e-acda-9ac6da151f0c",
          "name": "check task status",
          "item": [
            {
              "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
                  }
                }
              ]
            },
            {
              "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
                  }
                }
              ]
            },
            {
              "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
                  }
                }
              ]
            },
            {
              "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
                  }
                }
              ]
            },
            {
              "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147a0fde-5788-4996-9619-297da9714852",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
                  }
                }
              ]
            },
            {
              "id": "841a70e5-6cc2-4bd5-97ab-380582f9ed80",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "750b10af-fa67-4ede-bbde-b20d20b45ae9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8b60052f-49c6-4107-a8ec-5f7671ffa546"
                  }
                }
              ]
            },
            {
              "id": "3e795864-8b1b-43a7-880c-67e6a5165d9a",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "19b29895-3355-4b50-8294-38e3c5cf31fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "12247455-18ec-4f0d-a6c7-4359b0ab0ea9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "74090ca3-3772-48d5-80ed-be58ad23959d",
          "length": 110,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1da95c4c-4654-4048-bdc5-78899d4c0469",
          "scriptId": "147a0fde-5788-4996-9619-297da9714852",
          "execution": "98621dd1-e9a2-4b64-90a2-f3527240954d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:41)",
          "checksum": "171fbf8d4845966072d96c0b4cc07252",
          "id": "7b270a2c-064f-46e0-a2a9-c8e4277648c7",
          "timestamp": 1718334829361,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 41,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
          "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "147a0fde-5788-4996-9619-297da9714852",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
              }
            }
          ]
        },
        "parent": {
          "id": "593fafa9-0dd5-4f0e-acda-9ac6da151f0c",
          "name": "check task status",
          "item": [
            {
              "id": "c4b25e59-572a-46d1-9f6a-67c0ee937242",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9c53e26-8011-4458-8a5a-c80d90194a8c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9c9bb84e-14a2-4840-9c54-0619fc2b6a9f"
                  }
                }
              ]
            },
            {
              "id": "54f9a74c-e919-4ad4-982c-76f3dc7547d9",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4868b248-dc1f-4205-91f5-b8468232bbf6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c178ae6d-735f-4531-8bd0-950d3e01d006"
                  }
                }
              ]
            },
            {
              "id": "8f3f4ae1-7805-4247-ab15-89d78295f5fa",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"1234567892345\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b38a7461-dcce-44c6-b1c2-709f014a8675",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b4b678f8-8705-4382-882c-b62cdf57e8a4"
                  }
                }
              ]
            },
            {
              "id": "5bfb2224-5633-434e-9abd-ed278e3787c0",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41ff18c2-3307-4c39-8e8e-1712860c20c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4b8cc253-5dd1-415a-8f2e-62df4d0333b6"
                  }
                }
              ]
            },
            {
              "id": "95c00cdd-0dc0-4e4a-bd1b-a89efd99e4ed",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "147a0fde-5788-4996-9619-297da9714852",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "98621dd1-e9a2-4b64-90a2-f3527240954d"
                  }
                }
              ]
            },
            {
              "id": "841a70e5-6cc2-4bd5-97ab-380582f9ed80",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "750b10af-fa67-4ede-bbde-b20d20b45ae9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8b60052f-49c6-4107-a8ec-5f7671ffa546"
                  }
                }
              ]
            },
            {
              "id": "3e795864-8b1b-43a7-880c-67e6a5165d9a",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "19b29895-3355-4b50-8294-38e3c5cf31fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "12247455-18ec-4f0d-a6c7-4359b0ab0ea9"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "74090ca3-3772-48d5-80ed-be58ad23959d",
          "length": 110,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1da95c4c-4654-4048-bdc5-78899d4c0469",
          "scriptId": "147a0fde-5788-4996-9619-297da9714852",
          "execution": "98621dd1-e9a2-4b64-90a2-f3527240954d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is 200",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:44)",
          "checksum": "7e2bc2d03a4023c1bf65ca47b7c14934",
          "id": "3805f019-ce22-40ab-b6ec-4b63c92aedad",
          "timestamp": 1718334831310,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 44,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9aa20c77-2d9a-4728-a3f5-9eac377df741",
          "name": "Validate user is able to fetch patient's data successfully",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53475fe1-79ae-41a4-9740-b70dea72d28a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status Code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "da4ce4f8-8a4b-4a3e-8f4c-feeb6ff0f7d8"
              }
            }
          ]
        },
        "parent": {
          "id": "e280a18d-2343-482f-b837-5b9c21c66a9a",
          "name": "Lists information of a Patient's data",
          "item": [
            {
              "id": "9aa20c77-2d9a-4728-a3f5-9eac377df741",
              "name": "Validate user is able to fetch patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53475fe1-79ae-41a4-9740-b70dea72d28a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status Code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "da4ce4f8-8a4b-4a3e-8f4c-feeb6ff0f7d8"
                  }
                }
              ]
            },
            {
              "id": "af174d54-ee08-4266-b011-62c643488cb3",
              "name": "Validate user is unable to fetch patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31a92968-a70e-4409-881d-932be3f453b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status Code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "40fce554-63cc-4e2f-900c-a825d9ca6cc6"
                  }
                }
              ]
            },
            {
              "id": "998a9788-9024-4936-8696-1676176d55db",
              "name": "Validate user is unable to fetch patient's data without query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ece6ea17-d847-4290-a73a-d4a07cf14def",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70eea9a8-9549-4d1c-a534-995d5387d29e"
                  }
                }
              ]
            },
            {
              "id": "8f57385b-c484-4a66-8c85-197b708cf2f7",
              "name": "Validate user is unable to fetch patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d759a23-cf20-40b6-87d5-7f00c131f23a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d3139dd-ac5f-4068-80bf-a6c3f2dfaaf0"
                  }
                }
              ]
            },
            {
              "id": "f736b84e-a977-493e-ae56-dfff50137950",
              "name": "Validate user is unable to fetch patient's data with invalid/expired token",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b0cd401-526c-4c8c-9718-656667ffa9f1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "46e0b6f0-8e52-45ab-90bb-da46bf45fda3"
                  }
                }
              ]
            },
            {
              "id": "3a682495-7451-4a86-baf2-5532a895c757",
              "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f4b36e86-aa58-4a30-a766-f0376256a6dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5a7f13d1-111d-4d05-8ac4-5aaf764f2049"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d3f9f54e-0356-46ca-bd73-c3533ee98ac9",
          "length": 110,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7f869f3d-ab0b-4532-8059-14d5987509c6",
          "scriptId": "53475fe1-79ae-41a4-9740-b70dea72d28a",
          "execution": "da4ce4f8-8a4b-4a3e-8f4c-feeb6ff0f7d8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Patient details fetched successfully.'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient details fetched successfully.'\n   at Object.eval sandbox-script.js:2:44)",
          "checksum": "ad5f3733a67e3737a49e8b872e882e78",
          "id": "c0f62b02-8d1b-43d7-bb5e-98eedb9cdbce",
          "timestamp": 1718334831312,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 44,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9aa20c77-2d9a-4728-a3f5-9eac377df741",
          "name": "Validate user is able to fetch patient's data successfully",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53475fe1-79ae-41a4-9740-b70dea72d28a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status Code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "da4ce4f8-8a4b-4a3e-8f4c-feeb6ff0f7d8"
              }
            }
          ]
        },
        "parent": {
          "id": "e280a18d-2343-482f-b837-5b9c21c66a9a",
          "name": "Lists information of a Patient's data",
          "item": [
            {
              "id": "9aa20c77-2d9a-4728-a3f5-9eac377df741",
              "name": "Validate user is able to fetch patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53475fe1-79ae-41a4-9740-b70dea72d28a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status Code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "da4ce4f8-8a4b-4a3e-8f4c-feeb6ff0f7d8"
                  }
                }
              ]
            },
            {
              "id": "af174d54-ee08-4266-b011-62c643488cb3",
              "name": "Validate user is unable to fetch patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31a92968-a70e-4409-881d-932be3f453b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status Code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "40fce554-63cc-4e2f-900c-a825d9ca6cc6"
                  }
                }
              ]
            },
            {
              "id": "998a9788-9024-4936-8696-1676176d55db",
              "name": "Validate user is unable to fetch patient's data without query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ece6ea17-d847-4290-a73a-d4a07cf14def",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70eea9a8-9549-4d1c-a534-995d5387d29e"
                  }
                }
              ]
            },
            {
              "id": "8f57385b-c484-4a66-8c85-197b708cf2f7",
              "name": "Validate user is unable to fetch patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d759a23-cf20-40b6-87d5-7f00c131f23a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d3139dd-ac5f-4068-80bf-a6c3f2dfaaf0"
                  }
                }
              ]
            },
            {
              "id": "f736b84e-a977-493e-ae56-dfff50137950",
              "name": "Validate user is unable to fetch patient's data with invalid/expired token",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b0cd401-526c-4c8c-9718-656667ffa9f1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "46e0b6f0-8e52-45ab-90bb-da46bf45fda3"
                  }
                }
              ]
            },
            {
              "id": "3a682495-7451-4a86-baf2-5532a895c757",
              "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f4b36e86-aa58-4a30-a766-f0376256a6dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5a7f13d1-111d-4d05-8ac4-5aaf764f2049"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d3f9f54e-0356-46ca-bd73-c3533ee98ac9",
          "length": 110,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7f869f3d-ab0b-4532-8059-14d5987509c6",
          "scriptId": "53475fe1-79ae-41a4-9740-b70dea72d28a",
          "execution": "da4ce4f8-8a4b-4a3e-8f4c-feeb6ff0f7d8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is 400",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)",
          "checksum": "52ebc9463b1fe4a9fe9e9a5ae9d42c33",
          "id": "9f91e181-0f7b-4bc9-b5f0-047016157935",
          "timestamp": 1718334831723,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 45,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "af174d54-ee08-4266-b011-62c643488cb3",
          "name": "Validate user is unable to fetch patient's data with incorrect query data",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "31a92968-a70e-4409-881d-932be3f453b8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status Code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                  "});"
                ],
                "_lastExecutionId": "40fce554-63cc-4e2f-900c-a825d9ca6cc6"
              }
            }
          ]
        },
        "parent": {
          "id": "e280a18d-2343-482f-b837-5b9c21c66a9a",
          "name": "Lists information of a Patient's data",
          "item": [
            {
              "id": "9aa20c77-2d9a-4728-a3f5-9eac377df741",
              "name": "Validate user is able to fetch patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53475fe1-79ae-41a4-9740-b70dea72d28a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status Code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "da4ce4f8-8a4b-4a3e-8f4c-feeb6ff0f7d8"
                  }
                }
              ]
            },
            {
              "id": "af174d54-ee08-4266-b011-62c643488cb3",
              "name": "Validate user is unable to fetch patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31a92968-a70e-4409-881d-932be3f453b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status Code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "40fce554-63cc-4e2f-900c-a825d9ca6cc6"
                  }
                }
              ]
            },
            {
              "id": "998a9788-9024-4936-8696-1676176d55db",
              "name": "Validate user is unable to fetch patient's data without query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ece6ea17-d847-4290-a73a-d4a07cf14def",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70eea9a8-9549-4d1c-a534-995d5387d29e"
                  }
                }
              ]
            },
            {
              "id": "8f57385b-c484-4a66-8c85-197b708cf2f7",
              "name": "Validate user is unable to fetch patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d759a23-cf20-40b6-87d5-7f00c131f23a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d3139dd-ac5f-4068-80bf-a6c3f2dfaaf0"
                  }
                }
              ]
            },
            {
              "id": "f736b84e-a977-493e-ae56-dfff50137950",
              "name": "Validate user is unable to fetch patient's data with invalid/expired token",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b0cd401-526c-4c8c-9718-656667ffa9f1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "46e0b6f0-8e52-45ab-90bb-da46bf45fda3"
                  }
                }
              ]
            },
            {
              "id": "3a682495-7451-4a86-baf2-5532a895c757",
              "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f4b36e86-aa58-4a30-a766-f0376256a6dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5a7f13d1-111d-4d05-8ac4-5aaf764f2049"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fbeec036-2958-4c72-a8f5-4751288aec53",
          "length": 110,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b31cdcde-e488-44a0-8802-3aef51757963",
          "scriptId": "31a92968-a70e-4409-881d-932be3f453b8",
          "execution": "40fce554-63cc-4e2f-900c-a825d9ca6cc6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Invalid Id'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Invalid Id'\n   at Object.eval sandbox-script.js:2:45)",
          "checksum": "ba7834c409348f87b61c864bf3425e94",
          "id": "c7321720-c4d8-45ff-bd37-ae3c38e06e1f",
          "timestamp": 1718334831725,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 45,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "af174d54-ee08-4266-b011-62c643488cb3",
          "name": "Validate user is unable to fetch patient's data with incorrect query data",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "31a92968-a70e-4409-881d-932be3f453b8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status Code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                  "});"
                ],
                "_lastExecutionId": "40fce554-63cc-4e2f-900c-a825d9ca6cc6"
              }
            }
          ]
        },
        "parent": {
          "id": "e280a18d-2343-482f-b837-5b9c21c66a9a",
          "name": "Lists information of a Patient's data",
          "item": [
            {
              "id": "9aa20c77-2d9a-4728-a3f5-9eac377df741",
              "name": "Validate user is able to fetch patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53475fe1-79ae-41a4-9740-b70dea72d28a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status Code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "da4ce4f8-8a4b-4a3e-8f4c-feeb6ff0f7d8"
                  }
                }
              ]
            },
            {
              "id": "af174d54-ee08-4266-b011-62c643488cb3",
              "name": "Validate user is unable to fetch patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31a92968-a70e-4409-881d-932be3f453b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status Code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "40fce554-63cc-4e2f-900c-a825d9ca6cc6"
                  }
                }
              ]
            },
            {
              "id": "998a9788-9024-4936-8696-1676176d55db",
              "name": "Validate user is unable to fetch patient's data without query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ece6ea17-d847-4290-a73a-d4a07cf14def",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70eea9a8-9549-4d1c-a534-995d5387d29e"
                  }
                }
              ]
            },
            {
              "id": "8f57385b-c484-4a66-8c85-197b708cf2f7",
              "name": "Validate user is unable to fetch patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d759a23-cf20-40b6-87d5-7f00c131f23a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d3139dd-ac5f-4068-80bf-a6c3f2dfaaf0"
                  }
                }
              ]
            },
            {
              "id": "f736b84e-a977-493e-ae56-dfff50137950",
              "name": "Validate user is unable to fetch patient's data with invalid/expired token",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b0cd401-526c-4c8c-9718-656667ffa9f1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "46e0b6f0-8e52-45ab-90bb-da46bf45fda3"
                  }
                }
              ]
            },
            {
              "id": "3a682495-7451-4a86-baf2-5532a895c757",
              "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f4b36e86-aa58-4a30-a766-f0376256a6dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5a7f13d1-111d-4d05-8ac4-5aaf764f2049"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fbeec036-2958-4c72-a8f5-4751288aec53",
          "length": 110,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b31cdcde-e488-44a0-8802-3aef51757963",
          "scriptId": "31a92968-a70e-4409-881d-932be3f453b8",
          "execution": "40fce554-63cc-4e2f-900c-a825d9ca6cc6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)",
          "checksum": "5b6098a7035432382352c2efbd79d073",
          "id": "1dec68b4-2a15-4b7a-b0d1-252a686733cd",
          "timestamp": 1718334832090,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 46,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "998a9788-9024-4936-8696-1676176d55db",
          "name": "Validate user is unable to fetch patient's data without query data",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ece6ea17-d847-4290-a73a-d4a07cf14def",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                  "});"
                ],
                "_lastExecutionId": "70eea9a8-9549-4d1c-a534-995d5387d29e"
              }
            }
          ]
        },
        "parent": {
          "id": "e280a18d-2343-482f-b837-5b9c21c66a9a",
          "name": "Lists information of a Patient's data",
          "item": [
            {
              "id": "9aa20c77-2d9a-4728-a3f5-9eac377df741",
              "name": "Validate user is able to fetch patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53475fe1-79ae-41a4-9740-b70dea72d28a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status Code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "da4ce4f8-8a4b-4a3e-8f4c-feeb6ff0f7d8"
                  }
                }
              ]
            },
            {
              "id": "af174d54-ee08-4266-b011-62c643488cb3",
              "name": "Validate user is unable to fetch patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31a92968-a70e-4409-881d-932be3f453b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status Code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "40fce554-63cc-4e2f-900c-a825d9ca6cc6"
                  }
                }
              ]
            },
            {
              "id": "998a9788-9024-4936-8696-1676176d55db",
              "name": "Validate user is unable to fetch patient's data without query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ece6ea17-d847-4290-a73a-d4a07cf14def",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70eea9a8-9549-4d1c-a534-995d5387d29e"
                  }
                }
              ]
            },
            {
              "id": "8f57385b-c484-4a66-8c85-197b708cf2f7",
              "name": "Validate user is unable to fetch patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d759a23-cf20-40b6-87d5-7f00c131f23a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d3139dd-ac5f-4068-80bf-a6c3f2dfaaf0"
                  }
                }
              ]
            },
            {
              "id": "f736b84e-a977-493e-ae56-dfff50137950",
              "name": "Validate user is unable to fetch patient's data with invalid/expired token",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b0cd401-526c-4c8c-9718-656667ffa9f1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "46e0b6f0-8e52-45ab-90bb-da46bf45fda3"
                  }
                }
              ]
            },
            {
              "id": "3a682495-7451-4a86-baf2-5532a895c757",
              "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f4b36e86-aa58-4a30-a766-f0376256a6dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5a7f13d1-111d-4d05-8ac4-5aaf764f2049"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "434f8c51-8c06-41c7-842b-0d0af2879a90",
          "length": 110,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3b3b6c20-37fd-4351-8add-fd20baaed577",
          "scriptId": "ece6ea17-d847-4290-a73a-d4a07cf14def",
          "execution": "70eea9a8-9549-4d1c-a534-995d5387d29e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Invalid Id'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Invalid Id'\n   at Object.eval sandbox-script.js:2:46)",
          "checksum": "7640209eca340b5d42b1f61ebc17becd",
          "id": "e8851ea6-1312-45f6-ad2a-62d9c8073498",
          "timestamp": 1718334832091,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 46,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "998a9788-9024-4936-8696-1676176d55db",
          "name": "Validate user is unable to fetch patient's data without query data",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ece6ea17-d847-4290-a73a-d4a07cf14def",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                  "});"
                ],
                "_lastExecutionId": "70eea9a8-9549-4d1c-a534-995d5387d29e"
              }
            }
          ]
        },
        "parent": {
          "id": "e280a18d-2343-482f-b837-5b9c21c66a9a",
          "name": "Lists information of a Patient's data",
          "item": [
            {
              "id": "9aa20c77-2d9a-4728-a3f5-9eac377df741",
              "name": "Validate user is able to fetch patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53475fe1-79ae-41a4-9740-b70dea72d28a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status Code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "da4ce4f8-8a4b-4a3e-8f4c-feeb6ff0f7d8"
                  }
                }
              ]
            },
            {
              "id": "af174d54-ee08-4266-b011-62c643488cb3",
              "name": "Validate user is unable to fetch patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31a92968-a70e-4409-881d-932be3f453b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status Code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "40fce554-63cc-4e2f-900c-a825d9ca6cc6"
                  }
                }
              ]
            },
            {
              "id": "998a9788-9024-4936-8696-1676176d55db",
              "name": "Validate user is unable to fetch patient's data without query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ece6ea17-d847-4290-a73a-d4a07cf14def",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid Id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "70eea9a8-9549-4d1c-a534-995d5387d29e"
                  }
                }
              ]
            },
            {
              "id": "8f57385b-c484-4a66-8c85-197b708cf2f7",
              "name": "Validate user is unable to fetch patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d759a23-cf20-40b6-87d5-7f00c131f23a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6d3139dd-ac5f-4068-80bf-a6c3f2dfaaf0"
                  }
                }
              ]
            },
            {
              "id": "f736b84e-a977-493e-ae56-dfff50137950",
              "name": "Validate user is unable to fetch patient's data with invalid/expired token",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b0cd401-526c-4c8c-9718-656667ffa9f1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "46e0b6f0-8e52-45ab-90bb-da46bf45fda3"
                  }
                }
              ]
            },
            {
              "id": "3a682495-7451-4a86-baf2-5532a895c757",
              "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f4b36e86-aa58-4a30-a766-f0376256a6dd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5a7f13d1-111d-4d05-8ac4-5aaf764f2049"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "434f8c51-8c06-41c7-842b-0d0af2879a90",
          "length": 110,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3b3b6c20-37fd-4351-8add-fd20baaed577",
          "scriptId": "ece6ea17-d847-4290-a73a-d4a07cf14def",
          "execution": "70eea9a8-9549-4d1c-a534-995d5387d29e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:50)",
          "checksum": "f6d397236d2a2096969bff1717477ffb",
          "id": "46f5b8d0-91d2-475a-b4a8-6ca31d994571",
          "timestamp": 1718334833856,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 50,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "339adc5a-80ea-4124-9020-42483e17fa87",
          "name": "Validate user is able to check patient id successfully",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "387a6024-b9fa-4390-8a02-48742c43d7de",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let patientId = \"patient_\" + new Date().getTime();\r",
                  "\r",
                  "// Set the environment variable\r",
                  "pm.environment.set(\"patient_id\", patientId);\r",
                  "\r",
                  "console.log(\"Environment Patient ID set to:\", patientId);\r",
                  "\r",
                  "function getRandomString(length) {\r",
                  "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                  "    let result = '';\r",
                  "    for (let i = 0; i < length; i++) {\r",
                  "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                  "    }\r",
                  "    return result;\r",
                  "}\r",
                  "\r",
                  "// Generate a unique name using a random string\r",
                  "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                  "pm.environment.set(\"name\", name);"
                ],
                "_lastExecutionId": "19038ca6-92b2-44ee-a227-ddc8c78f46a6"
              }
            }
          ]
        },
        "parent": {
          "id": "ad358ce3-a580-441b-a975-b1fd2df65ea1",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "339adc5a-80ea-4124-9020-42483e17fa87",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "387a6024-b9fa-4390-8a02-48742c43d7de",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "19038ca6-92b2-44ee-a227-ddc8c78f46a6"
                  }
                }
              ]
            },
            {
              "id": "6fb6a935-5173-4764-9d5e-52bd11e23b60",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"{{p_info_task_id}}\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 90,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c46d4d71-c1a7-4067-a607-624057480207"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "54d95371-1a06-41a0-83a9-8f00cc8b7ab5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5a889c15-b4e3-4b3f-af22-f591d3bf9284"
                  }
                }
              ]
            },
            {
              "id": "738c694e-a5fc-4042-861e-2054c3a97873",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02173199-e967-46fb-9ced-a3b4d6f13185",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e83118b8-cd78-4922-9637-47ff6e63c5ce"
                  }
                }
              ]
            },
            {
              "id": "2f5557d9-183a-4c88-a132-872dcffa9de1",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a684acb1-0e5a-43d1-a114-17c61bf306aa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9412d997-46db-40ea-89f6-01ff197e58a1"
                  }
                }
              ]
            },
            {
              "id": "81cf2a86-3792-449d-b688-86599c8c44fc",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ecd80db7-3749-4821-a4e9-6b6834340a19",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "fb29d8de-49f5-4716-aff6-93b063e8afc7"
                  }
                }
              ]
            },
            {
              "id": "8f4a2de9-5bbb-4533-afb0-63abdb767018",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "955a99aa-cb51-4229-95e2-ecea73eefc88",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "388ac42d-9224-412c-870e-69be9596daed"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f6b6379a-07d5-4869-af12-d22f2158bfec",
          "length": 110,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3fc9a6b4-a053-44c0-a1ea-909005a6b6ea",
          "scriptId": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
          "execution": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:50)",
          "checksum": "87318289af0ba20e03127ce51ba23116",
          "id": "6838d7c4-007b-4181-9d12-4ceeeaa1e537",
          "timestamp": 1718334833858,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 50,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "339adc5a-80ea-4124-9020-42483e17fa87",
          "name": "Validate user is able to check patient id successfully",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "387a6024-b9fa-4390-8a02-48742c43d7de",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let patientId = \"patient_\" + new Date().getTime();\r",
                  "\r",
                  "// Set the environment variable\r",
                  "pm.environment.set(\"patient_id\", patientId);\r",
                  "\r",
                  "console.log(\"Environment Patient ID set to:\", patientId);\r",
                  "\r",
                  "function getRandomString(length) {\r",
                  "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                  "    let result = '';\r",
                  "    for (let i = 0; i < length; i++) {\r",
                  "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                  "    }\r",
                  "    return result;\r",
                  "}\r",
                  "\r",
                  "// Generate a unique name using a random string\r",
                  "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                  "pm.environment.set(\"name\", name);"
                ],
                "_lastExecutionId": "19038ca6-92b2-44ee-a227-ddc8c78f46a6"
              }
            }
          ]
        },
        "parent": {
          "id": "ad358ce3-a580-441b-a975-b1fd2df65ea1",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "339adc5a-80ea-4124-9020-42483e17fa87",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "387a6024-b9fa-4390-8a02-48742c43d7de",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "19038ca6-92b2-44ee-a227-ddc8c78f46a6"
                  }
                }
              ]
            },
            {
              "id": "6fb6a935-5173-4764-9d5e-52bd11e23b60",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"{{p_info_task_id}}\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 90,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c46d4d71-c1a7-4067-a607-624057480207"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "54d95371-1a06-41a0-83a9-8f00cc8b7ab5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5a889c15-b4e3-4b3f-af22-f591d3bf9284"
                  }
                }
              ]
            },
            {
              "id": "738c694e-a5fc-4042-861e-2054c3a97873",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02173199-e967-46fb-9ced-a3b4d6f13185",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e83118b8-cd78-4922-9637-47ff6e63c5ce"
                  }
                }
              ]
            },
            {
              "id": "2f5557d9-183a-4c88-a132-872dcffa9de1",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a684acb1-0e5a-43d1-a114-17c61bf306aa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9412d997-46db-40ea-89f6-01ff197e58a1"
                  }
                }
              ]
            },
            {
              "id": "81cf2a86-3792-449d-b688-86599c8c44fc",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ecd80db7-3749-4821-a4e9-6b6834340a19",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "fb29d8de-49f5-4716-aff6-93b063e8afc7"
                  }
                }
              ]
            },
            {
              "id": "8f4a2de9-5bbb-4533-afb0-63abdb767018",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "955a99aa-cb51-4229-95e2-ecea73eefc88",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "388ac42d-9224-412c-870e-69be9596daed"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f6b6379a-07d5-4869-af12-d22f2158bfec",
          "length": 110,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3fc9a6b4-a053-44c0-a1ea-909005a6b6ea",
          "scriptId": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
          "execution": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Patient id does not exist'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient id does not exist'\n   at Object.eval sandbox-script.js:3:50)",
          "checksum": "ca2259003c8ad854fd99fb917af74987",
          "id": "944495e6-647f-41a0-8ff9-8369ee96283b",
          "timestamp": 1718334833860,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 50,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "339adc5a-80ea-4124-9020-42483e17fa87",
          "name": "Validate user is able to check patient id successfully",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "387a6024-b9fa-4390-8a02-48742c43d7de",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let patientId = \"patient_\" + new Date().getTime();\r",
                  "\r",
                  "// Set the environment variable\r",
                  "pm.environment.set(\"patient_id\", patientId);\r",
                  "\r",
                  "console.log(\"Environment Patient ID set to:\", patientId);\r",
                  "\r",
                  "function getRandomString(length) {\r",
                  "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                  "    let result = '';\r",
                  "    for (let i = 0; i < length; i++) {\r",
                  "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                  "    }\r",
                  "    return result;\r",
                  "}\r",
                  "\r",
                  "// Generate a unique name using a random string\r",
                  "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                  "pm.environment.set(\"name\", name);"
                ],
                "_lastExecutionId": "19038ca6-92b2-44ee-a227-ddc8c78f46a6"
              }
            }
          ]
        },
        "parent": {
          "id": "ad358ce3-a580-441b-a975-b1fd2df65ea1",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "339adc5a-80ea-4124-9020-42483e17fa87",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "387a6024-b9fa-4390-8a02-48742c43d7de",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "19038ca6-92b2-44ee-a227-ddc8c78f46a6"
                  }
                }
              ]
            },
            {
              "id": "6fb6a935-5173-4764-9d5e-52bd11e23b60",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"{{p_info_task_id}}\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 90,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c46d4d71-c1a7-4067-a607-624057480207"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "54d95371-1a06-41a0-83a9-8f00cc8b7ab5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5a889c15-b4e3-4b3f-af22-f591d3bf9284"
                  }
                }
              ]
            },
            {
              "id": "738c694e-a5fc-4042-861e-2054c3a97873",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02173199-e967-46fb-9ced-a3b4d6f13185",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e83118b8-cd78-4922-9637-47ff6e63c5ce"
                  }
                }
              ]
            },
            {
              "id": "2f5557d9-183a-4c88-a132-872dcffa9de1",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a684acb1-0e5a-43d1-a114-17c61bf306aa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9412d997-46db-40ea-89f6-01ff197e58a1"
                  }
                }
              ]
            },
            {
              "id": "81cf2a86-3792-449d-b688-86599c8c44fc",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ecd80db7-3749-4821-a4e9-6b6834340a19",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "fb29d8de-49f5-4716-aff6-93b063e8afc7"
                  }
                }
              ]
            },
            {
              "id": "8f4a2de9-5bbb-4533-afb0-63abdb767018",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "955a99aa-cb51-4229-95e2-ecea73eefc88",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "388ac42d-9224-412c-870e-69be9596daed"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f6b6379a-07d5-4869-af12-d22f2158bfec",
          "length": 110,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3fc9a6b4-a053-44c0-a1ea-909005a6b6ea",
          "scriptId": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
          "execution": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:51)",
          "checksum": "c6661957675e37c9c26457f1074b1824",
          "id": "a27b1156-89bb-4047-9328-2fd8a802f8d2",
          "timestamp": 1718334834463,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 51,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6fb6a935-5173-4764-9d5e-52bd11e23b60",
          "name": "Validate user is able to update patient's information successfully",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\":\"{{p_info_task_id}}\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 90,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "c46d4d71-c1a7-4067-a607-624057480207"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "54d95371-1a06-41a0-83a9-8f00cc8b7ab5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5a889c15-b4e3-4b3f-af22-f591d3bf9284"
              }
            }
          ]
        },
        "parent": {
          "id": "ad358ce3-a580-441b-a975-b1fd2df65ea1",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "339adc5a-80ea-4124-9020-42483e17fa87",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "387a6024-b9fa-4390-8a02-48742c43d7de",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "19038ca6-92b2-44ee-a227-ddc8c78f46a6"
                  }
                }
              ]
            },
            {
              "id": "6fb6a935-5173-4764-9d5e-52bd11e23b60",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"{{p_info_task_id}}\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 90,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c46d4d71-c1a7-4067-a607-624057480207"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "54d95371-1a06-41a0-83a9-8f00cc8b7ab5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5a889c15-b4e3-4b3f-af22-f591d3bf9284"
                  }
                }
              ]
            },
            {
              "id": "738c694e-a5fc-4042-861e-2054c3a97873",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02173199-e967-46fb-9ced-a3b4d6f13185",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e83118b8-cd78-4922-9637-47ff6e63c5ce"
                  }
                }
              ]
            },
            {
              "id": "2f5557d9-183a-4c88-a132-872dcffa9de1",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a684acb1-0e5a-43d1-a114-17c61bf306aa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9412d997-46db-40ea-89f6-01ff197e58a1"
                  }
                }
              ]
            },
            {
              "id": "81cf2a86-3792-449d-b688-86599c8c44fc",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ecd80db7-3749-4821-a4e9-6b6834340a19",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "fb29d8de-49f5-4716-aff6-93b063e8afc7"
                  }
                }
              ]
            },
            {
              "id": "8f4a2de9-5bbb-4533-afb0-63abdb767018",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "955a99aa-cb51-4229-95e2-ecea73eefc88",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "388ac42d-9224-412c-870e-69be9596daed"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fab3ad2e-051b-4611-a4db-221c406e3b16",
          "length": 110,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b836a813-4bf4-4d47-87c5-453b21a5ed89",
          "scriptId": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
          "execution": "c46d4d71-c1a7-4067-a607-624057480207"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:51)",
          "checksum": "b76fc6f1d3e4be9131a00852be80e3f8",
          "id": "ede63c74-6da5-4ed1-93fb-ae9010c962aa",
          "timestamp": 1718334834464,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 51,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6fb6a935-5173-4764-9d5e-52bd11e23b60",
          "name": "Validate user is able to update patient's information successfully",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\":\"{{p_info_task_id}}\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 90,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "c46d4d71-c1a7-4067-a607-624057480207"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "54d95371-1a06-41a0-83a9-8f00cc8b7ab5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5a889c15-b4e3-4b3f-af22-f591d3bf9284"
              }
            }
          ]
        },
        "parent": {
          "id": "ad358ce3-a580-441b-a975-b1fd2df65ea1",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "339adc5a-80ea-4124-9020-42483e17fa87",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "387a6024-b9fa-4390-8a02-48742c43d7de",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "19038ca6-92b2-44ee-a227-ddc8c78f46a6"
                  }
                }
              ]
            },
            {
              "id": "6fb6a935-5173-4764-9d5e-52bd11e23b60",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"{{p_info_task_id}}\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 90,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c46d4d71-c1a7-4067-a607-624057480207"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "54d95371-1a06-41a0-83a9-8f00cc8b7ab5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5a889c15-b4e3-4b3f-af22-f591d3bf9284"
                  }
                }
              ]
            },
            {
              "id": "738c694e-a5fc-4042-861e-2054c3a97873",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02173199-e967-46fb-9ced-a3b4d6f13185",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e83118b8-cd78-4922-9637-47ff6e63c5ce"
                  }
                }
              ]
            },
            {
              "id": "2f5557d9-183a-4c88-a132-872dcffa9de1",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a684acb1-0e5a-43d1-a114-17c61bf306aa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9412d997-46db-40ea-89f6-01ff197e58a1"
                  }
                }
              ]
            },
            {
              "id": "81cf2a86-3792-449d-b688-86599c8c44fc",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ecd80db7-3749-4821-a4e9-6b6834340a19",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "fb29d8de-49f5-4716-aff6-93b063e8afc7"
                  }
                }
              ]
            },
            {
              "id": "8f4a2de9-5bbb-4533-afb0-63abdb767018",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "955a99aa-cb51-4229-95e2-ecea73eefc88",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "388ac42d-9224-412c-870e-69be9596daed"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fab3ad2e-051b-4611-a4db-221c406e3b16",
          "length": 110,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b836a813-4bf4-4d47-87c5-453b21a5ed89",
          "scriptId": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
          "execution": "c46d4d71-c1a7-4067-a607-624057480207"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Patient info updated successfully.'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient info updated successfully.'\n   at Object.eval sandbox-script.js:3:51)",
          "checksum": "a799224f9d6973413927090e074832f1",
          "id": "3e53db08-403c-4cc8-aa6e-cc265a61b195",
          "timestamp": 1718334834465,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 51,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "6fb6a935-5173-4764-9d5e-52bd11e23b60",
          "name": "Validate user is able to update patient's information successfully",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\":\"{{p_info_task_id}}\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 90,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "c46d4d71-c1a7-4067-a607-624057480207"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "54d95371-1a06-41a0-83a9-8f00cc8b7ab5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5a889c15-b4e3-4b3f-af22-f591d3bf9284"
              }
            }
          ]
        },
        "parent": {
          "id": "ad358ce3-a580-441b-a975-b1fd2df65ea1",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "339adc5a-80ea-4124-9020-42483e17fa87",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "387a6024-b9fa-4390-8a02-48742c43d7de",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "19038ca6-92b2-44ee-a227-ddc8c78f46a6"
                  }
                }
              ]
            },
            {
              "id": "6fb6a935-5173-4764-9d5e-52bd11e23b60",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"{{p_info_task_id}}\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 90,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c46d4d71-c1a7-4067-a607-624057480207"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "54d95371-1a06-41a0-83a9-8f00cc8b7ab5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5a889c15-b4e3-4b3f-af22-f591d3bf9284"
                  }
                }
              ]
            },
            {
              "id": "738c694e-a5fc-4042-861e-2054c3a97873",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02173199-e967-46fb-9ced-a3b4d6f13185",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e83118b8-cd78-4922-9637-47ff6e63c5ce"
                  }
                }
              ]
            },
            {
              "id": "2f5557d9-183a-4c88-a132-872dcffa9de1",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a684acb1-0e5a-43d1-a114-17c61bf306aa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9412d997-46db-40ea-89f6-01ff197e58a1"
                  }
                }
              ]
            },
            {
              "id": "81cf2a86-3792-449d-b688-86599c8c44fc",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ecd80db7-3749-4821-a4e9-6b6834340a19",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "fb29d8de-49f5-4716-aff6-93b063e8afc7"
                  }
                }
              ]
            },
            {
              "id": "8f4a2de9-5bbb-4533-afb0-63abdb767018",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "955a99aa-cb51-4229-95e2-ecea73eefc88",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "388ac42d-9224-412c-870e-69be9596daed"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fab3ad2e-051b-4611-a4db-221c406e3b16",
          "length": 110,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b836a813-4bf4-4d47-87c5-453b21a5ed89",
          "scriptId": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
          "execution": "c46d4d71-c1a7-4067-a607-624057480207"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)",
          "checksum": "11557542999287b16544abb450396c82",
          "id": "6a6cc887-e525-40f1-8cf7-72303c4cbac8",
          "timestamp": 1718334835075,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 52,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "738c694e-a5fc-4042-861e-2054c3a97873",
          "name": "Validate user is unable to update patient's information with missing required field in the body",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02173199-e967-46fb-9ced-a3b4d6f13185",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "e83118b8-cd78-4922-9637-47ff6e63c5ce"
              }
            }
          ]
        },
        "parent": {
          "id": "ad358ce3-a580-441b-a975-b1fd2df65ea1",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "339adc5a-80ea-4124-9020-42483e17fa87",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "387a6024-b9fa-4390-8a02-48742c43d7de",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "19038ca6-92b2-44ee-a227-ddc8c78f46a6"
                  }
                }
              ]
            },
            {
              "id": "6fb6a935-5173-4764-9d5e-52bd11e23b60",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"{{p_info_task_id}}\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 90,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c46d4d71-c1a7-4067-a607-624057480207"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "54d95371-1a06-41a0-83a9-8f00cc8b7ab5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5a889c15-b4e3-4b3f-af22-f591d3bf9284"
                  }
                }
              ]
            },
            {
              "id": "738c694e-a5fc-4042-861e-2054c3a97873",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02173199-e967-46fb-9ced-a3b4d6f13185",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e83118b8-cd78-4922-9637-47ff6e63c5ce"
                  }
                }
              ]
            },
            {
              "id": "2f5557d9-183a-4c88-a132-872dcffa9de1",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a684acb1-0e5a-43d1-a114-17c61bf306aa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9412d997-46db-40ea-89f6-01ff197e58a1"
                  }
                }
              ]
            },
            {
              "id": "81cf2a86-3792-449d-b688-86599c8c44fc",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ecd80db7-3749-4821-a4e9-6b6834340a19",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "fb29d8de-49f5-4716-aff6-93b063e8afc7"
                  }
                }
              ]
            },
            {
              "id": "8f4a2de9-5bbb-4533-afb0-63abdb767018",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "955a99aa-cb51-4229-95e2-ecea73eefc88",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "388ac42d-9224-412c-870e-69be9596daed"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "460c6c4d-0093-4f50-9b9a-2e2556280d8f",
          "length": 110,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3341f45b-6b79-47fb-8646-5c15c8698fc6",
          "scriptId": "02173199-e967-46fb-9ced-a3b4d6f13185",
          "execution": "e83118b8-cd78-4922-9637-47ff6e63c5ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected undefined to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:52)",
          "checksum": "f82dac17d93cd09f704b827c62be0fed",
          "id": "6a22fc7a-dedb-44db-bc27-eed449db14a3",
          "timestamp": 1718334835076,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 52,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "738c694e-a5fc-4042-861e-2054c3a97873",
          "name": "Validate user is unable to update patient's information with missing required field in the body",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02173199-e967-46fb-9ced-a3b4d6f13185",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "e83118b8-cd78-4922-9637-47ff6e63c5ce"
              }
            }
          ]
        },
        "parent": {
          "id": "ad358ce3-a580-441b-a975-b1fd2df65ea1",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "339adc5a-80ea-4124-9020-42483e17fa87",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "48f2b915-ba9f-4fb1-abdc-2f9737b72e74",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a94547fc-7b9e-4340-a633-5a5f84d667a4"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "387a6024-b9fa-4390-8a02-48742c43d7de",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "19038ca6-92b2-44ee-a227-ddc8c78f46a6"
                  }
                }
              ]
            },
            {
              "id": "6fb6a935-5173-4764-9d5e-52bd11e23b60",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"{{p_info_task_id}}\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 90,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a9ab447-9280-4a68-ac2d-1d0f69e4f0ca",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c46d4d71-c1a7-4067-a607-624057480207"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "54d95371-1a06-41a0-83a9-8f00cc8b7ab5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5a889c15-b4e3-4b3f-af22-f591d3bf9284"
                  }
                }
              ]
            },
            {
              "id": "738c694e-a5fc-4042-861e-2054c3a97873",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02173199-e967-46fb-9ced-a3b4d6f13185",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e83118b8-cd78-4922-9637-47ff6e63c5ce"
                  }
                }
              ]
            },
            {
              "id": "2f5557d9-183a-4c88-a132-872dcffa9de1",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a684acb1-0e5a-43d1-a114-17c61bf306aa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9412d997-46db-40ea-89f6-01ff197e58a1"
                  }
                }
              ]
            },
            {
              "id": "81cf2a86-3792-449d-b688-86599c8c44fc",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ecd80db7-3749-4821-a4e9-6b6834340a19",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "fb29d8de-49f5-4716-aff6-93b063e8afc7"
                  }
                }
              ]
            },
            {
              "id": "8f4a2de9-5bbb-4533-afb0-63abdb767018",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "955a99aa-cb51-4229-95e2-ecea73eefc88",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "388ac42d-9224-412c-870e-69be9596daed"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "460c6c4d-0093-4f50-9b9a-2e2556280d8f",
          "length": 110,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3341f45b-6b79-47fb-8646-5c15c8698fc6",
          "scriptId": "02173199-e967-46fb-9ced-a3b4d6f13185",
          "execution": "e83118b8-cd78-4922-9637-47ff6e63c5ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:56)",
          "checksum": "b9327fc7e4cb74aa40a438d08a6c8bfa",
          "id": "610c0376-b281-4d6d-84a7-cd3a49b2fb54",
          "timestamp": 1718334837861,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 56,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9047f605-e39e-48bc-b481-733e200ae0c4",
          "name": "Validate user is able to check patient id successfully(true)",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "591b247b-33e9-45e6-adc4-494d829459db"
              }
            }
          ]
        },
        "parent": {
          "id": "51a3edbd-57a9-48d5-abb2-9bc2ddfab130",
          "name": "Check Patient ID",
          "item": [
            {
              "id": "9047f605-e39e-48bc-b481-733e200ae0c4",
              "name": "Validate user is able to check patient id successfully(true)",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "591b247b-33e9-45e6-adc4-494d829459db"
                  }
                }
              ]
            },
            {
              "id": "47c4fd42-4015-44a2-89f3-5e36011dc7d3",
              "name": "Validate user is unable to check patient id as patient_id is missing in the body",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3f8a478-aebe-434e-ab7d-efa6812fa912",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "875b3af8-d7d9-4b40-95a5-2ecff51761c4"
                  }
                }
              ]
            },
            {
              "id": "bb61fb65-f434-4555-b2eb-ef19fe05ef22",
              "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"K3456789\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c91aec0-82eb-4432-b9c2-eadc555bbc68",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "68f27bde-5b75-4b43-8ab0-02c6162c7bdd"
                  }
                }
              ]
            },
            {
              "id": "c0e0dd77-0d83-4b26-8d11-c95148642523",
              "name": "Validate user is unable to check patient id without authorization",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "caa2031d-0f80-4e05-b038-db65c61a60a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "406649f4-d93b-425e-a98a-a8e349b22e53"
                  }
                }
              ]
            },
            {
              "id": "023a7ff0-5d88-4a4e-b122-bf458131a558",
              "name": "Validate user is unable to check patient id as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62a6184e-f7d7-48b3-b5d6-7b081164abc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ce134a7a-ea50-46d5-93c2-9157d6ced606"
                  }
                }
              ]
            },
            {
              "id": "a56cbfeb-7577-46e9-a899-961839147b3a",
              "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0619c91-95ef-44a9-ad10-08bddb414ba3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dd21d57c-186a-44be-b21c-a7f68e08f203"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8e1165b4-d31a-4438-a643-25b86750ed2f",
          "length": 110,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "da740cd3-387b-489c-9654-c06e150d1205",
          "scriptId": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
          "execution": "591b247b-33e9-45e6-adc4-494d829459db"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:56)",
          "checksum": "5d65d07f71c8517182ec382a6431af25",
          "id": "43355bda-6379-4ac5-b1f1-573ef5d754ae",
          "timestamp": 1718334837862,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 56,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9047f605-e39e-48bc-b481-733e200ae0c4",
          "name": "Validate user is able to check patient id successfully(true)",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "591b247b-33e9-45e6-adc4-494d829459db"
              }
            }
          ]
        },
        "parent": {
          "id": "51a3edbd-57a9-48d5-abb2-9bc2ddfab130",
          "name": "Check Patient ID",
          "item": [
            {
              "id": "9047f605-e39e-48bc-b481-733e200ae0c4",
              "name": "Validate user is able to check patient id successfully(true)",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "591b247b-33e9-45e6-adc4-494d829459db"
                  }
                }
              ]
            },
            {
              "id": "47c4fd42-4015-44a2-89f3-5e36011dc7d3",
              "name": "Validate user is unable to check patient id as patient_id is missing in the body",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3f8a478-aebe-434e-ab7d-efa6812fa912",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "875b3af8-d7d9-4b40-95a5-2ecff51761c4"
                  }
                }
              ]
            },
            {
              "id": "bb61fb65-f434-4555-b2eb-ef19fe05ef22",
              "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"K3456789\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c91aec0-82eb-4432-b9c2-eadc555bbc68",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "68f27bde-5b75-4b43-8ab0-02c6162c7bdd"
                  }
                }
              ]
            },
            {
              "id": "c0e0dd77-0d83-4b26-8d11-c95148642523",
              "name": "Validate user is unable to check patient id without authorization",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "caa2031d-0f80-4e05-b038-db65c61a60a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "406649f4-d93b-425e-a98a-a8e349b22e53"
                  }
                }
              ]
            },
            {
              "id": "023a7ff0-5d88-4a4e-b122-bf458131a558",
              "name": "Validate user is unable to check patient id as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62a6184e-f7d7-48b3-b5d6-7b081164abc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ce134a7a-ea50-46d5-93c2-9157d6ced606"
                  }
                }
              ]
            },
            {
              "id": "a56cbfeb-7577-46e9-a899-961839147b3a",
              "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0619c91-95ef-44a9-ad10-08bddb414ba3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dd21d57c-186a-44be-b21c-a7f68e08f203"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8e1165b4-d31a-4438-a643-25b86750ed2f",
          "length": 110,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "da740cd3-387b-489c-9654-c06e150d1205",
          "scriptId": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
          "execution": "591b247b-33e9-45e6-adc4-494d829459db"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Patient id already exists.'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient id already exists.'\n   at Object.eval sandbox-script.js:3:56)",
          "checksum": "94b8dba5efda971ab677f01880573434",
          "id": "f148fcdb-8b45-47f9-b287-a30d3828f7b1",
          "timestamp": 1718334837863,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 56,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "9047f605-e39e-48bc-b481-733e200ae0c4",
          "name": "Validate user is able to check patient id successfully(true)",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "591b247b-33e9-45e6-adc4-494d829459db"
              }
            }
          ]
        },
        "parent": {
          "id": "51a3edbd-57a9-48d5-abb2-9bc2ddfab130",
          "name": "Check Patient ID",
          "item": [
            {
              "id": "9047f605-e39e-48bc-b481-733e200ae0c4",
              "name": "Validate user is able to check patient id successfully(true)",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "591b247b-33e9-45e6-adc4-494d829459db"
                  }
                }
              ]
            },
            {
              "id": "47c4fd42-4015-44a2-89f3-5e36011dc7d3",
              "name": "Validate user is unable to check patient id as patient_id is missing in the body",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3f8a478-aebe-434e-ab7d-efa6812fa912",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "875b3af8-d7d9-4b40-95a5-2ecff51761c4"
                  }
                }
              ]
            },
            {
              "id": "bb61fb65-f434-4555-b2eb-ef19fe05ef22",
              "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"K3456789\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c91aec0-82eb-4432-b9c2-eadc555bbc68",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "68f27bde-5b75-4b43-8ab0-02c6162c7bdd"
                  }
                }
              ]
            },
            {
              "id": "c0e0dd77-0d83-4b26-8d11-c95148642523",
              "name": "Validate user is unable to check patient id without authorization",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "caa2031d-0f80-4e05-b038-db65c61a60a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "406649f4-d93b-425e-a98a-a8e349b22e53"
                  }
                }
              ]
            },
            {
              "id": "023a7ff0-5d88-4a4e-b122-bf458131a558",
              "name": "Validate user is unable to check patient id as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62a6184e-f7d7-48b3-b5d6-7b081164abc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ce134a7a-ea50-46d5-93c2-9157d6ced606"
                  }
                }
              ]
            },
            {
              "id": "a56cbfeb-7577-46e9-a899-961839147b3a",
              "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0619c91-95ef-44a9-ad10-08bddb414ba3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dd21d57c-186a-44be-b21c-a7f68e08f203"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8e1165b4-d31a-4438-a643-25b86750ed2f",
          "length": 110,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "da740cd3-387b-489c-9654-c06e150d1205",
          "scriptId": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
          "execution": "591b247b-33e9-45e6-adc4-494d829459db"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)",
          "checksum": "90fe63ee3523c5eb0266e89693a20b66",
          "id": "3b3f078c-9598-4cd4-83d2-9ea6b754dda1",
          "timestamp": 1718334838497,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 57,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "47c4fd42-4015-44a2-89f3-5e36011dc7d3",
          "name": "Validate user is unable to check patient id as patient_id is missing in the body",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a3f8a478-aebe-434e-ab7d-efa6812fa912",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "875b3af8-d7d9-4b40-95a5-2ecff51761c4"
              }
            }
          ]
        },
        "parent": {
          "id": "51a3edbd-57a9-48d5-abb2-9bc2ddfab130",
          "name": "Check Patient ID",
          "item": [
            {
              "id": "9047f605-e39e-48bc-b481-733e200ae0c4",
              "name": "Validate user is able to check patient id successfully(true)",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "591b247b-33e9-45e6-adc4-494d829459db"
                  }
                }
              ]
            },
            {
              "id": "47c4fd42-4015-44a2-89f3-5e36011dc7d3",
              "name": "Validate user is unable to check patient id as patient_id is missing in the body",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3f8a478-aebe-434e-ab7d-efa6812fa912",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "875b3af8-d7d9-4b40-95a5-2ecff51761c4"
                  }
                }
              ]
            },
            {
              "id": "bb61fb65-f434-4555-b2eb-ef19fe05ef22",
              "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"K3456789\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c91aec0-82eb-4432-b9c2-eadc555bbc68",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "68f27bde-5b75-4b43-8ab0-02c6162c7bdd"
                  }
                }
              ]
            },
            {
              "id": "c0e0dd77-0d83-4b26-8d11-c95148642523",
              "name": "Validate user is unable to check patient id without authorization",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "caa2031d-0f80-4e05-b038-db65c61a60a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "406649f4-d93b-425e-a98a-a8e349b22e53"
                  }
                }
              ]
            },
            {
              "id": "023a7ff0-5d88-4a4e-b122-bf458131a558",
              "name": "Validate user is unable to check patient id as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62a6184e-f7d7-48b3-b5d6-7b081164abc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ce134a7a-ea50-46d5-93c2-9157d6ced606"
                  }
                }
              ]
            },
            {
              "id": "a56cbfeb-7577-46e9-a899-961839147b3a",
              "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0619c91-95ef-44a9-ad10-08bddb414ba3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dd21d57c-186a-44be-b21c-a7f68e08f203"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "be75a051-f418-4625-9314-6492fcc7fbba",
          "length": 110,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1e8cc0c6-a013-48e9-b108-4769fce026a7",
          "scriptId": "a3f8a478-aebe-434e-ab7d-efa6812fa912",
          "execution": "875b3af8-d7d9-4b40-95a5-2ecff51761c4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:57)",
          "checksum": "18d20e9b89c7a4ed6da066d312b7205a",
          "id": "f2dd2316-23dd-4008-abd2-c7f2c0f9fef5",
          "timestamp": 1718334838499,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 57,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "47c4fd42-4015-44a2-89f3-5e36011dc7d3",
          "name": "Validate user is unable to check patient id as patient_id is missing in the body",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a3f8a478-aebe-434e-ab7d-efa6812fa912",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "875b3af8-d7d9-4b40-95a5-2ecff51761c4"
              }
            }
          ]
        },
        "parent": {
          "id": "51a3edbd-57a9-48d5-abb2-9bc2ddfab130",
          "name": "Check Patient ID",
          "item": [
            {
              "id": "9047f605-e39e-48bc-b481-733e200ae0c4",
              "name": "Validate user is able to check patient id successfully(true)",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "591b247b-33e9-45e6-adc4-494d829459db"
                  }
                }
              ]
            },
            {
              "id": "47c4fd42-4015-44a2-89f3-5e36011dc7d3",
              "name": "Validate user is unable to check patient id as patient_id is missing in the body",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3f8a478-aebe-434e-ab7d-efa6812fa912",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "875b3af8-d7d9-4b40-95a5-2ecff51761c4"
                  }
                }
              ]
            },
            {
              "id": "bb61fb65-f434-4555-b2eb-ef19fe05ef22",
              "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"K3456789\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c91aec0-82eb-4432-b9c2-eadc555bbc68",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "68f27bde-5b75-4b43-8ab0-02c6162c7bdd"
                  }
                }
              ]
            },
            {
              "id": "c0e0dd77-0d83-4b26-8d11-c95148642523",
              "name": "Validate user is unable to check patient id without authorization",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "caa2031d-0f80-4e05-b038-db65c61a60a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "406649f4-d93b-425e-a98a-a8e349b22e53"
                  }
                }
              ]
            },
            {
              "id": "023a7ff0-5d88-4a4e-b122-bf458131a558",
              "name": "Validate user is unable to check patient id as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62a6184e-f7d7-48b3-b5d6-7b081164abc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ce134a7a-ea50-46d5-93c2-9157d6ced606"
                  }
                }
              ]
            },
            {
              "id": "a56cbfeb-7577-46e9-a899-961839147b3a",
              "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0619c91-95ef-44a9-ad10-08bddb414ba3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dd21d57c-186a-44be-b21c-a7f68e08f203"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "be75a051-f418-4625-9314-6492fcc7fbba",
          "length": 110,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1e8cc0c6-a013-48e9-b108-4769fce026a7",
          "scriptId": "a3f8a478-aebe-434e-ab7d-efa6812fa912",
          "execution": "875b3af8-d7d9-4b40-95a5-2ecff51761c4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:58)",
          "checksum": "223a2cf0f47c3fb4224427db3e1b682b",
          "id": "1ce5cee8-985a-42df-b8c2-e4001f9cad3a",
          "timestamp": 1718334839183,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 58,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "bb61fb65-f434-4555-b2eb-ef19fe05ef22",
          "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"K3456789\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3c91aec0-82eb-4432-b9c2-eadc555bbc68",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                  "});"
                ],
                "_lastExecutionId": "68f27bde-5b75-4b43-8ab0-02c6162c7bdd"
              }
            }
          ]
        },
        "parent": {
          "id": "51a3edbd-57a9-48d5-abb2-9bc2ddfab130",
          "name": "Check Patient ID",
          "item": [
            {
              "id": "9047f605-e39e-48bc-b481-733e200ae0c4",
              "name": "Validate user is able to check patient id successfully(true)",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "591b247b-33e9-45e6-adc4-494d829459db"
                  }
                }
              ]
            },
            {
              "id": "47c4fd42-4015-44a2-89f3-5e36011dc7d3",
              "name": "Validate user is unable to check patient id as patient_id is missing in the body",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3f8a478-aebe-434e-ab7d-efa6812fa912",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "875b3af8-d7d9-4b40-95a5-2ecff51761c4"
                  }
                }
              ]
            },
            {
              "id": "bb61fb65-f434-4555-b2eb-ef19fe05ef22",
              "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"K3456789\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c91aec0-82eb-4432-b9c2-eadc555bbc68",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "68f27bde-5b75-4b43-8ab0-02c6162c7bdd"
                  }
                }
              ]
            },
            {
              "id": "c0e0dd77-0d83-4b26-8d11-c95148642523",
              "name": "Validate user is unable to check patient id without authorization",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "caa2031d-0f80-4e05-b038-db65c61a60a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "406649f4-d93b-425e-a98a-a8e349b22e53"
                  }
                }
              ]
            },
            {
              "id": "023a7ff0-5d88-4a4e-b122-bf458131a558",
              "name": "Validate user is unable to check patient id as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62a6184e-f7d7-48b3-b5d6-7b081164abc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ce134a7a-ea50-46d5-93c2-9157d6ced606"
                  }
                }
              ]
            },
            {
              "id": "a56cbfeb-7577-46e9-a899-961839147b3a",
              "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0619c91-95ef-44a9-ad10-08bddb414ba3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dd21d57c-186a-44be-b21c-a7f68e08f203"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "51b4b8be-7896-4494-8d78-f8abc8e7aff5",
          "length": 110,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b9c4d8b8-dc3c-4c5e-899d-5e32b99847e3",
          "scriptId": "3c91aec0-82eb-4432-b9c2-eadc555bbc68",
          "execution": "68f27bde-5b75-4b43-8ab0-02c6162c7bdd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Patient id does not exist'",
          "stack": "AssertionError: expected undefined to deeply equal 'Patient id does not exist'\n   at Object.eval sandbox-script.js:2:58)",
          "checksum": "e7e4416de74ffe9f365d215eeaeec1a2",
          "id": "123c7e1c-fcaf-4370-98e1-538163cb51d2",
          "timestamp": 1718334839184,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 58,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "bb61fb65-f434-4555-b2eb-ef19fe05ef22",
          "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"K3456789\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3c91aec0-82eb-4432-b9c2-eadc555bbc68",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                  "});"
                ],
                "_lastExecutionId": "68f27bde-5b75-4b43-8ab0-02c6162c7bdd"
              }
            }
          ]
        },
        "parent": {
          "id": "51a3edbd-57a9-48d5-abb2-9bc2ddfab130",
          "name": "Check Patient ID",
          "item": [
            {
              "id": "9047f605-e39e-48bc-b481-733e200ae0c4",
              "name": "Validate user is able to check patient id successfully(true)",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "591b247b-33e9-45e6-adc4-494d829459db"
                  }
                }
              ]
            },
            {
              "id": "47c4fd42-4015-44a2-89f3-5e36011dc7d3",
              "name": "Validate user is unable to check patient id as patient_id is missing in the body",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3f8a478-aebe-434e-ab7d-efa6812fa912",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "875b3af8-d7d9-4b40-95a5-2ecff51761c4"
                  }
                }
              ]
            },
            {
              "id": "bb61fb65-f434-4555-b2eb-ef19fe05ef22",
              "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"K3456789\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c91aec0-82eb-4432-b9c2-eadc555bbc68",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "68f27bde-5b75-4b43-8ab0-02c6162c7bdd"
                  }
                }
              ]
            },
            {
              "id": "c0e0dd77-0d83-4b26-8d11-c95148642523",
              "name": "Validate user is unable to check patient id without authorization",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "caa2031d-0f80-4e05-b038-db65c61a60a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "406649f4-d93b-425e-a98a-a8e349b22e53"
                  }
                }
              ]
            },
            {
              "id": "023a7ff0-5d88-4a4e-b122-bf458131a558",
              "name": "Validate user is unable to check patient id as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62a6184e-f7d7-48b3-b5d6-7b081164abc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ce134a7a-ea50-46d5-93c2-9157d6ced606"
                  }
                }
              ]
            },
            {
              "id": "a56cbfeb-7577-46e9-a899-961839147b3a",
              "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0619c91-95ef-44a9-ad10-08bddb414ba3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dd21d57c-186a-44be-b21c-a7f68e08f203"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "51b4b8be-7896-4494-8d78-f8abc8e7aff5",
          "length": 110,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b9c4d8b8-dc3c-4c5e-899d-5e32b99847e3",
          "scriptId": "3c91aec0-82eb-4432-b9c2-eadc555bbc68",
          "execution": "68f27bde-5b75-4b43-8ab0-02c6162c7bdd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Method Not Allowed'",
          "stack": "AssertionError: expected undefined to deeply equal 'Method Not Allowed'\n   at Object.eval sandbox-script.js:2:61)",
          "checksum": "319c68cea1d83a4840c9acd0efb25337",
          "id": "fb2739b4-2c3e-4722-aa06-293d98246d6a",
          "timestamp": 1718334841238,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 61,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a56cbfeb-7577-46e9-a899-961839147b3a",
          "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f0619c91-95ef-44a9-ad10-08bddb414ba3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "dd21d57c-186a-44be-b21c-a7f68e08f203"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "51a3edbd-57a9-48d5-abb2-9bc2ddfab130",
          "name": "Check Patient ID",
          "item": [
            {
              "id": "9047f605-e39e-48bc-b481-733e200ae0c4",
              "name": "Validate user is able to check patient id successfully(true)",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13b7489a-c3b2-40a9-bfed-edf0a165e854",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "591b247b-33e9-45e6-adc4-494d829459db"
                  }
                }
              ]
            },
            {
              "id": "47c4fd42-4015-44a2-89f3-5e36011dc7d3",
              "name": "Validate user is unable to check patient id as patient_id is missing in the body",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3f8a478-aebe-434e-ab7d-efa6812fa912",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "875b3af8-d7d9-4b40-95a5-2ecff51761c4"
                  }
                }
              ]
            },
            {
              "id": "bb61fb65-f434-4555-b2eb-ef19fe05ef22",
              "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"K3456789\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c91aec0-82eb-4432-b9c2-eadc555bbc68",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "68f27bde-5b75-4b43-8ab0-02c6162c7bdd"
                  }
                }
              ]
            },
            {
              "id": "c0e0dd77-0d83-4b26-8d11-c95148642523",
              "name": "Validate user is unable to check patient id without authorization",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "caa2031d-0f80-4e05-b038-db65c61a60a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "406649f4-d93b-425e-a98a-a8e349b22e53"
                  }
                }
              ]
            },
            {
              "id": "023a7ff0-5d88-4a4e-b122-bf458131a558",
              "name": "Validate user is unable to check patient id as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62a6184e-f7d7-48b3-b5d6-7b081164abc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ce134a7a-ea50-46d5-93c2-9157d6ced606"
                  }
                }
              ]
            },
            {
              "id": "a56cbfeb-7577-46e9-a899-961839147b3a",
              "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0619c91-95ef-44a9-ad10-08bddb414ba3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dd21d57c-186a-44be-b21c-a7f68e08f203"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b62f48ac-7db3-41e0-ad5d-9e67aba089ba",
          "length": 110,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4161d224-3284-4fcb-ab4e-705acb3a6e91",
          "scriptId": "f0619c91-95ef-44a9-ad10-08bddb414ba3",
          "execution": "dd21d57c-186a-44be-b21c-a7f68e08f203"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:62)",
          "checksum": "b0faf9f333c1d4459ecf6837e7f481b9",
          "id": "a2b41eb1-e373-4d46-a6b6-75f703953072",
          "timestamp": 1718334841592,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 62,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f16ecb25-9ecf-47b3-93dc-a0dedf9c14a8",
          "name": "Validate user is able to search patients successfully",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "47594730-b3d5-4cb0-aa6f-992b90580732"
              }
            }
          ]
        },
        "parent": {
          "id": "5c786be3-0a8c-4b82-90e7-e6240cd8f7d7",
          "name": "Search patients",
          "item": [
            {
              "id": "f16ecb25-9ecf-47b3-93dc-a0dedf9c14a8",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "47594730-b3d5-4cb0-aa6f-992b90580732"
                  }
                }
              ]
            },
            {
              "id": "7eedc926-7fad-4199-9d7a-2462ee8a6822",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "74aa99e9-4048-4506-9146-e638aed5c9ac"
                  }
                }
              ]
            },
            {
              "id": "46f162b1-5947-4184-a009-25ae39339b52",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7fbb2e99-dba4-49c0-b52b-013f44204c31",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a16bccef-d2b8-4b2a-b465-f55dd723d951"
                  }
                }
              ]
            },
            {
              "id": "79d7ef39-1874-4479-a790-a3f0262eece1",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f956a5d7-ec5a-40e9-9cef-3076f8c43808",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "24c52c84-bf48-4c9e-b6dd-7e903b8bcf6c"
                  }
                }
              ]
            },
            {
              "id": "7bd7370d-95b9-4acb-b8ca-793bfbebca88",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "956dc782-3cbe-4053-8f4d-50256ccddd51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b8ec6bce-dbb3-480a-94f4-a1f785684fa4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a9b5e400-1704-4f76-90da-edd864c87c60",
          "length": 110,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b33cdb90-cd1c-4a7b-b559-22a00d5db909",
          "scriptId": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
          "execution": "47594730-b3d5-4cb0-aa6f-992b90580732"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:62)",
          "checksum": "53f5480b299fc21ab03612d09ae1f180",
          "id": "6759282d-9349-4be9-859d-3a893e8eea0d",
          "timestamp": 1718334841593,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 62,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f16ecb25-9ecf-47b3-93dc-a0dedf9c14a8",
          "name": "Validate user is able to search patients successfully",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "47594730-b3d5-4cb0-aa6f-992b90580732"
              }
            }
          ]
        },
        "parent": {
          "id": "5c786be3-0a8c-4b82-90e7-e6240cd8f7d7",
          "name": "Search patients",
          "item": [
            {
              "id": "f16ecb25-9ecf-47b3-93dc-a0dedf9c14a8",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "47594730-b3d5-4cb0-aa6f-992b90580732"
                  }
                }
              ]
            },
            {
              "id": "7eedc926-7fad-4199-9d7a-2462ee8a6822",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "74aa99e9-4048-4506-9146-e638aed5c9ac"
                  }
                }
              ]
            },
            {
              "id": "46f162b1-5947-4184-a009-25ae39339b52",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7fbb2e99-dba4-49c0-b52b-013f44204c31",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a16bccef-d2b8-4b2a-b465-f55dd723d951"
                  }
                }
              ]
            },
            {
              "id": "79d7ef39-1874-4479-a790-a3f0262eece1",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f956a5d7-ec5a-40e9-9cef-3076f8c43808",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "24c52c84-bf48-4c9e-b6dd-7e903b8bcf6c"
                  }
                }
              ]
            },
            {
              "id": "7bd7370d-95b9-4acb-b8ca-793bfbebca88",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "956dc782-3cbe-4053-8f4d-50256ccddd51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b8ec6bce-dbb3-480a-94f4-a1f785684fa4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a9b5e400-1704-4f76-90da-edd864c87c60",
          "length": 110,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b33cdb90-cd1c-4a7b-b559-22a00d5db909",
          "scriptId": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
          "execution": "47594730-b3d5-4cb0-aa6f-992b90580732"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Search items fetched successfully'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Search items fetched successfully'\n   at Object.eval sandbox-script.js:3:62)",
          "checksum": "aec7b2e3dbc18c076a308d48279d7596",
          "id": "058dcd46-e893-4402-9256-780b4194abdf",
          "timestamp": 1718334841594,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 62,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "f16ecb25-9ecf-47b3-93dc-a0dedf9c14a8",
          "name": "Validate user is able to search patients successfully",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "47594730-b3d5-4cb0-aa6f-992b90580732"
              }
            }
          ]
        },
        "parent": {
          "id": "5c786be3-0a8c-4b82-90e7-e6240cd8f7d7",
          "name": "Search patients",
          "item": [
            {
              "id": "f16ecb25-9ecf-47b3-93dc-a0dedf9c14a8",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "47594730-b3d5-4cb0-aa6f-992b90580732"
                  }
                }
              ]
            },
            {
              "id": "7eedc926-7fad-4199-9d7a-2462ee8a6822",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "74aa99e9-4048-4506-9146-e638aed5c9ac"
                  }
                }
              ]
            },
            {
              "id": "46f162b1-5947-4184-a009-25ae39339b52",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7fbb2e99-dba4-49c0-b52b-013f44204c31",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a16bccef-d2b8-4b2a-b465-f55dd723d951"
                  }
                }
              ]
            },
            {
              "id": "79d7ef39-1874-4479-a790-a3f0262eece1",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f956a5d7-ec5a-40e9-9cef-3076f8c43808",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "24c52c84-bf48-4c9e-b6dd-7e903b8bcf6c"
                  }
                }
              ]
            },
            {
              "id": "7bd7370d-95b9-4acb-b8ca-793bfbebca88",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "956dc782-3cbe-4053-8f4d-50256ccddd51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b8ec6bce-dbb3-480a-94f4-a1f785684fa4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a9b5e400-1704-4f76-90da-edd864c87c60",
          "length": 110,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b33cdb90-cd1c-4a7b-b559-22a00d5db909",
          "scriptId": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
          "execution": "47594730-b3d5-4cb0-aa6f-992b90580732"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:63)",
          "checksum": "f4f1975d575abb06d0db265dd4bfccd8",
          "id": "92f7ad07-30bd-4317-aa05-60524af1e14d",
          "timestamp": 1718334841937,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 63,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7eedc926-7fad-4199-9d7a-2462ee8a6822",
          "name": "Validate user is able to search patients if optional parameters are missing",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                },
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "74aa99e9-4048-4506-9146-e638aed5c9ac"
              }
            }
          ]
        },
        "parent": {
          "id": "5c786be3-0a8c-4b82-90e7-e6240cd8f7d7",
          "name": "Search patients",
          "item": [
            {
              "id": "f16ecb25-9ecf-47b3-93dc-a0dedf9c14a8",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "47594730-b3d5-4cb0-aa6f-992b90580732"
                  }
                }
              ]
            },
            {
              "id": "7eedc926-7fad-4199-9d7a-2462ee8a6822",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "74aa99e9-4048-4506-9146-e638aed5c9ac"
                  }
                }
              ]
            },
            {
              "id": "46f162b1-5947-4184-a009-25ae39339b52",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7fbb2e99-dba4-49c0-b52b-013f44204c31",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a16bccef-d2b8-4b2a-b465-f55dd723d951"
                  }
                }
              ]
            },
            {
              "id": "79d7ef39-1874-4479-a790-a3f0262eece1",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f956a5d7-ec5a-40e9-9cef-3076f8c43808",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "24c52c84-bf48-4c9e-b6dd-7e903b8bcf6c"
                  }
                }
              ]
            },
            {
              "id": "7bd7370d-95b9-4acb-b8ca-793bfbebca88",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "956dc782-3cbe-4053-8f4d-50256ccddd51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b8ec6bce-dbb3-480a-94f4-a1f785684fa4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e2c5e8c8-31bd-4adc-9c30-e6b5313b3c08",
          "length": 110,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c2a3746f-7efa-494d-b419-d965db50dab5",
          "scriptId": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
          "execution": "74aa99e9-4048-4506-9146-e638aed5c9ac"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'error' to deeply equal 'success'",
          "stack": "AssertionError: expected 'error' to deeply equal 'success'\n   at Object.eval sandbox-script.js:2:63)",
          "checksum": "6d15252bc080b606086661a8cfcfcd55",
          "id": "e12c0c55-cf10-436b-b031-d822a420b4c5",
          "timestamp": 1718334841938,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 63,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "7eedc926-7fad-4199-9d7a-2462ee8a6822",
          "name": "Validate user is able to search patients if optional parameters are missing",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                },
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "74aa99e9-4048-4506-9146-e638aed5c9ac"
              }
            }
          ]
        },
        "parent": {
          "id": "5c786be3-0a8c-4b82-90e7-e6240cd8f7d7",
          "name": "Search patients",
          "item": [
            {
              "id": "f16ecb25-9ecf-47b3-93dc-a0dedf9c14a8",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "47594730-b3d5-4cb0-aa6f-992b90580732"
                  }
                }
              ]
            },
            {
              "id": "7eedc926-7fad-4199-9d7a-2462ee8a6822",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "74aa99e9-4048-4506-9146-e638aed5c9ac"
                  }
                }
              ]
            },
            {
              "id": "46f162b1-5947-4184-a009-25ae39339b52",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7fbb2e99-dba4-49c0-b52b-013f44204c31",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a16bccef-d2b8-4b2a-b465-f55dd723d951"
                  }
                }
              ]
            },
            {
              "id": "79d7ef39-1874-4479-a790-a3f0262eece1",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f956a5d7-ec5a-40e9-9cef-3076f8c43808",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "24c52c84-bf48-4c9e-b6dd-7e903b8bcf6c"
                  }
                }
              ]
            },
            {
              "id": "7bd7370d-95b9-4acb-b8ca-793bfbebca88",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "956dc782-3cbe-4053-8f4d-50256ccddd51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b8ec6bce-dbb3-480a-94f4-a1f785684fa4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e2c5e8c8-31bd-4adc-9c30-e6b5313b3c08",
          "length": 110,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c2a3746f-7efa-494d-b419-d965db50dab5",
          "scriptId": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
          "execution": "74aa99e9-4048-4506-9146-e638aed5c9ac"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Search items fetched successfully'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Search items fetched successfully'\n   at Object.eval sandbox-script.js:3:63)",
          "checksum": "f6cd7677b8d7647e89dbff669471c6da",
          "id": "72719bab-8b36-491a-a42f-7fd4792d0535",
          "timestamp": 1718334841938,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 63,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "7eedc926-7fad-4199-9d7a-2462ee8a6822",
          "name": "Validate user is able to search patients if optional parameters are missing",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                },
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "74aa99e9-4048-4506-9146-e638aed5c9ac"
              }
            }
          ]
        },
        "parent": {
          "id": "5c786be3-0a8c-4b82-90e7-e6240cd8f7d7",
          "name": "Search patients",
          "item": [
            {
              "id": "f16ecb25-9ecf-47b3-93dc-a0dedf9c14a8",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "47594730-b3d5-4cb0-aa6f-992b90580732"
                  }
                }
              ]
            },
            {
              "id": "7eedc926-7fad-4199-9d7a-2462ee8a6822",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "74aa99e9-4048-4506-9146-e638aed5c9ac"
                  }
                }
              ]
            },
            {
              "id": "46f162b1-5947-4184-a009-25ae39339b52",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7fbb2e99-dba4-49c0-b52b-013f44204c31",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a16bccef-d2b8-4b2a-b465-f55dd723d951"
                  }
                }
              ]
            },
            {
              "id": "79d7ef39-1874-4479-a790-a3f0262eece1",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f956a5d7-ec5a-40e9-9cef-3076f8c43808",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "24c52c84-bf48-4c9e-b6dd-7e903b8bcf6c"
                  }
                }
              ]
            },
            {
              "id": "7bd7370d-95b9-4acb-b8ca-793bfbebca88",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "956dc782-3cbe-4053-8f4d-50256ccddd51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b8ec6bce-dbb3-480a-94f4-a1f785684fa4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e2c5e8c8-31bd-4adc-9c30-e6b5313b3c08",
          "length": 110,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c2a3746f-7efa-494d-b419-d965db50dab5",
          "scriptId": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
          "execution": "74aa99e9-4048-4506-9146-e638aed5c9ac"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)",
          "checksum": "7a87aacf9caf5f903f2097aa5dbd0b2c",
          "id": "4afaced9-5086-467c-9eef-15959d73dd0b",
          "timestamp": 1718334842383,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 64,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "46f162b1-5947-4184-a009-25ae39339b52",
          "name": "Validate user is unable to search patients as required parameter is missing",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7fbb2e99-dba4-49c0-b52b-013f44204c31",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a16bccef-d2b8-4b2a-b465-f55dd723d951"
              }
            }
          ]
        },
        "parent": {
          "id": "5c786be3-0a8c-4b82-90e7-e6240cd8f7d7",
          "name": "Search patients",
          "item": [
            {
              "id": "f16ecb25-9ecf-47b3-93dc-a0dedf9c14a8",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "47594730-b3d5-4cb0-aa6f-992b90580732"
                  }
                }
              ]
            },
            {
              "id": "7eedc926-7fad-4199-9d7a-2462ee8a6822",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "74aa99e9-4048-4506-9146-e638aed5c9ac"
                  }
                }
              ]
            },
            {
              "id": "46f162b1-5947-4184-a009-25ae39339b52",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7fbb2e99-dba4-49c0-b52b-013f44204c31",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a16bccef-d2b8-4b2a-b465-f55dd723d951"
                  }
                }
              ]
            },
            {
              "id": "79d7ef39-1874-4479-a790-a3f0262eece1",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f956a5d7-ec5a-40e9-9cef-3076f8c43808",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "24c52c84-bf48-4c9e-b6dd-7e903b8bcf6c"
                  }
                }
              ]
            },
            {
              "id": "7bd7370d-95b9-4acb-b8ca-793bfbebca88",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "956dc782-3cbe-4053-8f4d-50256ccddd51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b8ec6bce-dbb3-480a-94f4-a1f785684fa4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ba81f721-f9c1-4a5d-afd4-26be02243ed3",
          "length": 110,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "00edbe38-e39e-4538-b9ff-79079fdb3beb",
          "scriptId": "7fbb2e99-dba4-49c0-b52b-013f44204c31",
          "execution": "a16bccef-d2b8-4b2a-b465-f55dd723d951"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:64)",
          "checksum": "c0d35d2a9bcfdbb17295905bba68a019",
          "id": "824ab438-1221-41cd-83f9-577d3cdded84",
          "timestamp": 1718334842384,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 64,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "46f162b1-5947-4184-a009-25ae39339b52",
          "name": "Validate user is unable to search patients as required parameter is missing",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7fbb2e99-dba4-49c0-b52b-013f44204c31",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a16bccef-d2b8-4b2a-b465-f55dd723d951"
              }
            }
          ]
        },
        "parent": {
          "id": "5c786be3-0a8c-4b82-90e7-e6240cd8f7d7",
          "name": "Search patients",
          "item": [
            {
              "id": "f16ecb25-9ecf-47b3-93dc-a0dedf9c14a8",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0ee3931c-1a7c-4a72-9c2c-c66ccd1bbfae",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "47594730-b3d5-4cb0-aa6f-992b90580732"
                  }
                }
              ]
            },
            {
              "id": "7eedc926-7fad-4199-9d7a-2462ee8a6822",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3f5fc7b2-91ed-4e6a-a326-8faee489b345",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "74aa99e9-4048-4506-9146-e638aed5c9ac"
                  }
                }
              ]
            },
            {
              "id": "46f162b1-5947-4184-a009-25ae39339b52",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7fbb2e99-dba4-49c0-b52b-013f44204c31",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a16bccef-d2b8-4b2a-b465-f55dd723d951"
                  }
                }
              ]
            },
            {
              "id": "79d7ef39-1874-4479-a790-a3f0262eece1",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f956a5d7-ec5a-40e9-9cef-3076f8c43808",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "24c52c84-bf48-4c9e-b6dd-7e903b8bcf6c"
                  }
                }
              ]
            },
            {
              "id": "7bd7370d-95b9-4acb-b8ca-793bfbebca88",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "956dc782-3cbe-4053-8f4d-50256ccddd51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b8ec6bce-dbb3-480a-94f4-a1f785684fa4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ba81f721-f9c1-4a5d-afd4-26be02243ed3",
          "length": 110,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "00edbe38-e39e-4538-b9ff-79079fdb3beb",
          "scriptId": "7fbb2e99-dba4-49c0-b52b-013f44204c31",
          "execution": "a16bccef-d2b8-4b2a-b465-f55dd723d951"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:67)",
          "checksum": "9599ac48095270db92f17981a44c48a4",
          "id": "a49b8ffe-0b5b-4a34-ba7a-512fda934362",
          "timestamp": 1718334843505,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 67,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "aecc5091-5aea-4217-a813-d949a407a401",
          "name": "Validate user is able to cancel patient flow successfully",
          "request": {
            "url": {
              "path": [
                "cancel-patient-flow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "42292597-18f7-43dd-8a5d-590c7084f79b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Cancellation successful\");\r",
                  "});"
                ],
                "_lastExecutionId": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
              }
            }
          ]
        },
        "parent": {
          "id": "64be51c1-b2f9-444b-beb0-76b78ba367bf",
          "name": "Cancel patient flow",
          "item": [
            {
              "id": "aecc5091-5aea-4217-a813-d949a407a401",
              "name": "Validate user is able to cancel patient flow successfully",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42292597-18f7-43dd-8a5d-590c7084f79b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Cancellation successful\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
                  }
                }
              ]
            },
            {
              "id": "1b2d5a6c-e13e-4252-b2fb-869426c29cdc",
              "name": "Validate user is unable to cancel patient flow as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d99f95-62f1-4a02-94c6-dde3ab9e0fbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f20ffbe6-aafa-4a26-8f00-91b4d46fce04"
                  }
                }
              ]
            },
            {
              "id": "152c59fa-c48a-425c-a5a8-e0e1f5381dc7",
              "name": "Validate user is unable to cancel patient flow without Authorization",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a615609-311c-464c-b25b-552a5280d3c2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6e92fb29-e3ac-4f37-b8e0-5ff201640dbb"
                  }
                }
              ]
            },
            {
              "id": "9f66e43b-7718-4c08-b6b0-6ceeff23fa07",
              "name": "Validate user is unable to cancel patient flow as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "103550ce-f8b1-4f59-9c5d-517a98c9a741",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "07280de3-1f90-482b-b0f6-1a06f17a43af"
                  }
                }
              ]
            },
            {
              "id": "28feff29-728e-415d-bbf9-abb71c435e28",
              "name": "Validate user is unable to cancel patient flow as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bceb5a5c-2b93-4d81-862c-0022994ee72a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0155b274-cc30-4d4f-afaa-120820afbb54"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8f4344ae-dd20-4fc5-a0ba-e467ba19a804",
          "length": 110,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6e1fd355-44c2-4ab8-8285-428f7f0c275b",
          "scriptId": "42292597-18f7-43dd-8a5d-590c7084f79b",
          "execution": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:67)",
          "checksum": "8f61145cf87abb8d1c1672e32661a436",
          "id": "417068d0-b3b8-4cdf-b39c-2d96e5731f21",
          "timestamp": 1718334843507,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 67,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "aecc5091-5aea-4217-a813-d949a407a401",
          "name": "Validate user is able to cancel patient flow successfully",
          "request": {
            "url": {
              "path": [
                "cancel-patient-flow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "42292597-18f7-43dd-8a5d-590c7084f79b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Cancellation successful\");\r",
                  "});"
                ],
                "_lastExecutionId": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
              }
            }
          ]
        },
        "parent": {
          "id": "64be51c1-b2f9-444b-beb0-76b78ba367bf",
          "name": "Cancel patient flow",
          "item": [
            {
              "id": "aecc5091-5aea-4217-a813-d949a407a401",
              "name": "Validate user is able to cancel patient flow successfully",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42292597-18f7-43dd-8a5d-590c7084f79b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Cancellation successful\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
                  }
                }
              ]
            },
            {
              "id": "1b2d5a6c-e13e-4252-b2fb-869426c29cdc",
              "name": "Validate user is unable to cancel patient flow as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d99f95-62f1-4a02-94c6-dde3ab9e0fbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f20ffbe6-aafa-4a26-8f00-91b4d46fce04"
                  }
                }
              ]
            },
            {
              "id": "152c59fa-c48a-425c-a5a8-e0e1f5381dc7",
              "name": "Validate user is unable to cancel patient flow without Authorization",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a615609-311c-464c-b25b-552a5280d3c2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6e92fb29-e3ac-4f37-b8e0-5ff201640dbb"
                  }
                }
              ]
            },
            {
              "id": "9f66e43b-7718-4c08-b6b0-6ceeff23fa07",
              "name": "Validate user is unable to cancel patient flow as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "103550ce-f8b1-4f59-9c5d-517a98c9a741",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "07280de3-1f90-482b-b0f6-1a06f17a43af"
                  }
                }
              ]
            },
            {
              "id": "28feff29-728e-415d-bbf9-abb71c435e28",
              "name": "Validate user is unable to cancel patient flow as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bceb5a5c-2b93-4d81-862c-0022994ee72a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0155b274-cc30-4d4f-afaa-120820afbb54"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8f4344ae-dd20-4fc5-a0ba-e467ba19a804",
          "length": 110,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6e1fd355-44c2-4ab8-8285-428f7f0c275b",
          "scriptId": "42292597-18f7-43dd-8a5d-590c7084f79b",
          "execution": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'error' to deeply equal 'success'",
          "stack": "AssertionError: expected 'error' to deeply equal 'success'\n   at Object.eval sandbox-script.js:3:67)",
          "checksum": "cebe6abacf14669dcd8161953a993e77",
          "id": "0fb83982-3b0e-4a3c-8c83-4ac0e6e09a8a",
          "timestamp": 1718334843508,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 67,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "aecc5091-5aea-4217-a813-d949a407a401",
          "name": "Validate user is able to cancel patient flow successfully",
          "request": {
            "url": {
              "path": [
                "cancel-patient-flow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "42292597-18f7-43dd-8a5d-590c7084f79b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Cancellation successful\");\r",
                  "});"
                ],
                "_lastExecutionId": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
              }
            }
          ]
        },
        "parent": {
          "id": "64be51c1-b2f9-444b-beb0-76b78ba367bf",
          "name": "Cancel patient flow",
          "item": [
            {
              "id": "aecc5091-5aea-4217-a813-d949a407a401",
              "name": "Validate user is able to cancel patient flow successfully",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42292597-18f7-43dd-8a5d-590c7084f79b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Cancellation successful\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
                  }
                }
              ]
            },
            {
              "id": "1b2d5a6c-e13e-4252-b2fb-869426c29cdc",
              "name": "Validate user is unable to cancel patient flow as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d99f95-62f1-4a02-94c6-dde3ab9e0fbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f20ffbe6-aafa-4a26-8f00-91b4d46fce04"
                  }
                }
              ]
            },
            {
              "id": "152c59fa-c48a-425c-a5a8-e0e1f5381dc7",
              "name": "Validate user is unable to cancel patient flow without Authorization",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a615609-311c-464c-b25b-552a5280d3c2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6e92fb29-e3ac-4f37-b8e0-5ff201640dbb"
                  }
                }
              ]
            },
            {
              "id": "9f66e43b-7718-4c08-b6b0-6ceeff23fa07",
              "name": "Validate user is unable to cancel patient flow as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "103550ce-f8b1-4f59-9c5d-517a98c9a741",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "07280de3-1f90-482b-b0f6-1a06f17a43af"
                  }
                }
              ]
            },
            {
              "id": "28feff29-728e-415d-bbf9-abb71c435e28",
              "name": "Validate user is unable to cancel patient flow as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bceb5a5c-2b93-4d81-862c-0022994ee72a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0155b274-cc30-4d4f-afaa-120820afbb54"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8f4344ae-dd20-4fc5-a0ba-e467ba19a804",
          "length": 110,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6e1fd355-44c2-4ab8-8285-428f7f0c275b",
          "scriptId": "42292597-18f7-43dd-8a5d-590c7084f79b",
          "execution": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Cancellation successful'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Cancellation successful'\n   at Object.eval sandbox-script.js:4:67)",
          "checksum": "6e8a53ce10f7f83e548557004f5ed56f",
          "id": "45989612-6a57-4650-b1ec-f4d605f981de",
          "timestamp": 1718334843509,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 67,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "aecc5091-5aea-4217-a813-d949a407a401",
          "name": "Validate user is able to cancel patient flow successfully",
          "request": {
            "url": {
              "path": [
                "cancel-patient-flow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "42292597-18f7-43dd-8a5d-590c7084f79b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Cancellation successful\");\r",
                  "});"
                ],
                "_lastExecutionId": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
              }
            }
          ]
        },
        "parent": {
          "id": "64be51c1-b2f9-444b-beb0-76b78ba367bf",
          "name": "Cancel patient flow",
          "item": [
            {
              "id": "aecc5091-5aea-4217-a813-d949a407a401",
              "name": "Validate user is able to cancel patient flow successfully",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42292597-18f7-43dd-8a5d-590c7084f79b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Cancellation successful\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
                  }
                }
              ]
            },
            {
              "id": "1b2d5a6c-e13e-4252-b2fb-869426c29cdc",
              "name": "Validate user is unable to cancel patient flow as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d99f95-62f1-4a02-94c6-dde3ab9e0fbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f20ffbe6-aafa-4a26-8f00-91b4d46fce04"
                  }
                }
              ]
            },
            {
              "id": "152c59fa-c48a-425c-a5a8-e0e1f5381dc7",
              "name": "Validate user is unable to cancel patient flow without Authorization",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a615609-311c-464c-b25b-552a5280d3c2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6e92fb29-e3ac-4f37-b8e0-5ff201640dbb"
                  }
                }
              ]
            },
            {
              "id": "9f66e43b-7718-4c08-b6b0-6ceeff23fa07",
              "name": "Validate user is unable to cancel patient flow as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "103550ce-f8b1-4f59-9c5d-517a98c9a741",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "07280de3-1f90-482b-b0f6-1a06f17a43af"
                  }
                }
              ]
            },
            {
              "id": "28feff29-728e-415d-bbf9-abb71c435e28",
              "name": "Validate user is unable to cancel patient flow as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bceb5a5c-2b93-4d81-862c-0022994ee72a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0155b274-cc30-4d4f-afaa-120820afbb54"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8f4344ae-dd20-4fc5-a0ba-e467ba19a804",
          "length": 110,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6e1fd355-44c2-4ab8-8285-428f7f0c275b",
          "scriptId": "42292597-18f7-43dd-8a5d-590c7084f79b",
          "execution": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)",
          "checksum": "a8d3925ba11c0733619f9d1d8ad54272",
          "id": "dde091e4-e890-4f09-ba8b-0efffd3fd635",
          "timestamp": 1718334844020,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 68,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1b2d5a6c-e13e-4252-b2fb-869426c29cdc",
          "name": "Validate user is unable to cancel patient flow as required parameter is missing",
          "request": {
            "url": {
              "path": [
                "cancel-patient-flow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e5d99f95-62f1-4a02-94c6-dde3ab9e0fbb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "f20ffbe6-aafa-4a26-8f00-91b4d46fce04"
              }
            }
          ]
        },
        "parent": {
          "id": "64be51c1-b2f9-444b-beb0-76b78ba367bf",
          "name": "Cancel patient flow",
          "item": [
            {
              "id": "aecc5091-5aea-4217-a813-d949a407a401",
              "name": "Validate user is able to cancel patient flow successfully",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42292597-18f7-43dd-8a5d-590c7084f79b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Cancellation successful\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
                  }
                }
              ]
            },
            {
              "id": "1b2d5a6c-e13e-4252-b2fb-869426c29cdc",
              "name": "Validate user is unable to cancel patient flow as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d99f95-62f1-4a02-94c6-dde3ab9e0fbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f20ffbe6-aafa-4a26-8f00-91b4d46fce04"
                  }
                }
              ]
            },
            {
              "id": "152c59fa-c48a-425c-a5a8-e0e1f5381dc7",
              "name": "Validate user is unable to cancel patient flow without Authorization",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a615609-311c-464c-b25b-552a5280d3c2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6e92fb29-e3ac-4f37-b8e0-5ff201640dbb"
                  }
                }
              ]
            },
            {
              "id": "9f66e43b-7718-4c08-b6b0-6ceeff23fa07",
              "name": "Validate user is unable to cancel patient flow as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "103550ce-f8b1-4f59-9c5d-517a98c9a741",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "07280de3-1f90-482b-b0f6-1a06f17a43af"
                  }
                }
              ]
            },
            {
              "id": "28feff29-728e-415d-bbf9-abb71c435e28",
              "name": "Validate user is unable to cancel patient flow as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bceb5a5c-2b93-4d81-862c-0022994ee72a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0155b274-cc30-4d4f-afaa-120820afbb54"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e87e9579-80c6-4223-9c62-026ff1757aed",
          "length": 110,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9e3f29f8-1d20-4ffe-9b3f-0a38e89434b1",
          "scriptId": "e5d99f95-62f1-4a02-94c6-dde3ab9e0fbb",
          "execution": "f20ffbe6-aafa-4a26-8f00-91b4d46fce04"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:68)",
          "checksum": "be359408d6b3c0a8150ee2f3862c57e2",
          "id": "f15bc30e-02f6-46ab-a3c3-c9be86ba1862",
          "timestamp": 1718334844021,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 68,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "1b2d5a6c-e13e-4252-b2fb-869426c29cdc",
          "name": "Validate user is unable to cancel patient flow as required parameter is missing",
          "request": {
            "url": {
              "path": [
                "cancel-patient-flow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e5d99f95-62f1-4a02-94c6-dde3ab9e0fbb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "f20ffbe6-aafa-4a26-8f00-91b4d46fce04"
              }
            }
          ]
        },
        "parent": {
          "id": "64be51c1-b2f9-444b-beb0-76b78ba367bf",
          "name": "Cancel patient flow",
          "item": [
            {
              "id": "aecc5091-5aea-4217-a813-d949a407a401",
              "name": "Validate user is able to cancel patient flow successfully",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42292597-18f7-43dd-8a5d-590c7084f79b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Cancellation successful\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9dba4c16-25f0-4f13-9972-a3a3b83aab07"
                  }
                }
              ]
            },
            {
              "id": "1b2d5a6c-e13e-4252-b2fb-869426c29cdc",
              "name": "Validate user is unable to cancel patient flow as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5d99f95-62f1-4a02-94c6-dde3ab9e0fbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f20ffbe6-aafa-4a26-8f00-91b4d46fce04"
                  }
                }
              ]
            },
            {
              "id": "152c59fa-c48a-425c-a5a8-e0e1f5381dc7",
              "name": "Validate user is unable to cancel patient flow without Authorization",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a615609-311c-464c-b25b-552a5280d3c2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6e92fb29-e3ac-4f37-b8e0-5ff201640dbb"
                  }
                }
              ]
            },
            {
              "id": "9f66e43b-7718-4c08-b6b0-6ceeff23fa07",
              "name": "Validate user is unable to cancel patient flow as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "103550ce-f8b1-4f59-9c5d-517a98c9a741",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "07280de3-1f90-482b-b0f6-1a06f17a43af"
                  }
                }
              ]
            },
            {
              "id": "28feff29-728e-415d-bbf9-abb71c435e28",
              "name": "Validate user is unable to cancel patient flow as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "cancel-patient-flow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bceb5a5c-2b93-4d81-862c-0022994ee72a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0155b274-cc30-4d4f-afaa-120820afbb54"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e87e9579-80c6-4223-9c62-026ff1757aed",
          "length": 110,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9e3f29f8-1d20-4ffe-9b3f-0a38e89434b1",
          "scriptId": "e5d99f95-62f1-4a02-94c6-dde3ab9e0fbb",
          "execution": "f20ffbe6-aafa-4a26-8f00-91b4d46fce04"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { detail: 'Not Found' } to have property 'status'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'status'\n   at Object.eval sandbox-script.js:1:72)",
          "checksum": "da10acd09d70a5698c3c57d17c76d46e",
          "id": "e08dd3b4-e25c-4668-9f1d-14bd84f1180d",
          "timestamp": 1718334845540,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 72,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
          "name": "Validate user is able to get current user task info successfully",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": "{{task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                  "});"
                ],
                "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
              }
            }
          ]
        },
        "parent": {
          "id": "5171d9cd-76d8-4f9d-a519-01faa75793b6",
          "name": "Get current user task info",
          "item": [
            {
              "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
                  }
                }
              ]
            },
            {
              "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
                  }
                }
              ]
            },
            {
              "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
                  }
                }
              ]
            },
            {
              "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "29adc661-afab-4e97-9e1a-ab61a9b50a0d",
          "length": 110,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c6d96642-9ef6-4527-acd2-f48da40bd48b",
          "scriptId": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
          "execution": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:2:72)",
          "checksum": "8d22b045cf6c48685355276acef0de34",
          "id": "ad6371ab-eeb8-45eb-a6e1-965de624537d",
          "timestamp": 1718334845541,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 72,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
          "name": "Validate user is able to get current user task info successfully",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": "{{task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                  "});"
                ],
                "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
              }
            }
          ]
        },
        "parent": {
          "id": "5171d9cd-76d8-4f9d-a519-01faa75793b6",
          "name": "Get current user task info",
          "item": [
            {
              "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
                  }
                }
              ]
            },
            {
              "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
                  }
                }
              ]
            },
            {
              "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
                  }
                }
              ]
            },
            {
              "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "29adc661-afab-4e97-9e1a-ab61a9b50a0d",
          "length": 110,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c6d96642-9ef6-4527-acd2-f48da40bd48b",
          "scriptId": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
          "execution": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'success'",
          "stack": "AssertionError: expected undefined to deeply equal 'success'\n   at Object.eval sandbox-script.js:3:72)",
          "checksum": "3d17ef9362fcabaa60c339ae6d72ac46",
          "id": "fb07b42a-58eb-411c-a17b-7658d1b37bee",
          "timestamp": 1718334845542,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 72,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
          "name": "Validate user is able to get current user task info successfully",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": "{{task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                  "});"
                ],
                "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
              }
            }
          ]
        },
        "parent": {
          "id": "5171d9cd-76d8-4f9d-a519-01faa75793b6",
          "name": "Get current user task info",
          "item": [
            {
              "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
                  }
                }
              ]
            },
            {
              "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
                  }
                }
              ]
            },
            {
              "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
                  }
                }
              ]
            },
            {
              "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "29adc661-afab-4e97-9e1a-ab61a9b50a0d",
          "length": 110,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c6d96642-9ef6-4527-acd2-f48da40bd48b",
          "scriptId": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
          "execution": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal ''",
          "stack": "AssertionError: expected undefined to deeply equal ''\n   at Object.eval sandbox-script.js:4:72)",
          "checksum": "d936aa2c2c16325ae9a6ed4451d55540",
          "id": "ee78c05d-b137-4c5b-96a4-33926d1860b3",
          "timestamp": 1718334845542,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 72,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
          "name": "Validate user is able to get current user task info successfully",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": "{{task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                  "});"
                ],
                "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
              }
            }
          ]
        },
        "parent": {
          "id": "5171d9cd-76d8-4f9d-a519-01faa75793b6",
          "name": "Get current user task info",
          "item": [
            {
              "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
                  }
                }
              ]
            },
            {
              "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
                  }
                }
              ]
            },
            {
              "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
                  }
                }
              ]
            },
            {
              "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "29adc661-afab-4e97-9e1a-ab61a9b50a0d",
          "length": 110,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c6d96642-9ef6-4527-acd2-f48da40bd48b",
          "scriptId": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
          "execution": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 401 but got 404",
          "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:73)",
          "checksum": "9d60537e81180721e5e4ad0582c87a11",
          "id": "4f47f3ad-4df2-4887-ba21-a7a1e73f61a2",
          "timestamp": 1718334845893,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 73,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
          "name": "Validate user is unable to get current user task info without authorization",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
              }
            }
          ]
        },
        "parent": {
          "id": "5171d9cd-76d8-4f9d-a519-01faa75793b6",
          "name": "Get current user task info",
          "item": [
            {
              "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
                  }
                }
              ]
            },
            {
              "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
                  }
                }
              ]
            },
            {
              "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
                  }
                }
              ]
            },
            {
              "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f2fb1f0f-74b2-49cb-9247-0b195be99de2",
          "length": 110,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b9f66228-a167-406b-aaad-297ad0ca5aaa",
          "scriptId": "269fad22-97dc-4aed-907a-f4ed65e10125",
          "execution": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'error'",
          "stack": "AssertionError: expected undefined to deeply equal 'error'\n   at Object.eval sandbox-script.js:2:73)",
          "checksum": "60f7973cbb207f83475de50dd44f4e78",
          "id": "68565f22-6aed-4f13-846a-f966f0afbd76",
          "timestamp": 1718334845894,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 73,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
          "name": "Validate user is unable to get current user task info without authorization",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
              }
            }
          ]
        },
        "parent": {
          "id": "5171d9cd-76d8-4f9d-a519-01faa75793b6",
          "name": "Get current user task info",
          "item": [
            {
              "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
                  }
                }
              ]
            },
            {
              "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
                  }
                }
              ]
            },
            {
              "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
                  }
                }
              ]
            },
            {
              "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f2fb1f0f-74b2-49cb-9247-0b195be99de2",
          "length": 110,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b9f66228-a167-406b-aaad-297ad0ca5aaa",
          "scriptId": "269fad22-97dc-4aed-907a-f4ed65e10125",
          "execution": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Token is invalid or expired'",
          "stack": "AssertionError: expected undefined to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:3:73)",
          "checksum": "3fba2e808daad22a8eef110f45275c0a",
          "id": "e470a11c-3d98-4b2c-ad5f-86fae28b37be",
          "timestamp": 1718334845895,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 73,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
          "name": "Validate user is unable to get current user task info without authorization",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
              }
            }
          ]
        },
        "parent": {
          "id": "5171d9cd-76d8-4f9d-a519-01faa75793b6",
          "name": "Get current user task info",
          "item": [
            {
              "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
                  }
                }
              ]
            },
            {
              "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
                  }
                }
              ]
            },
            {
              "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
                  }
                }
              ]
            },
            {
              "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f2fb1f0f-74b2-49cb-9247-0b195be99de2",
          "length": 110,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b9f66228-a167-406b-aaad-297ad0ca5aaa",
          "scriptId": "269fad22-97dc-4aed-907a-f4ed65e10125",
          "execution": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 401 but got 404",
          "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:74)",
          "checksum": "d340b05ebaff64e95e3bb5e56256d7c1",
          "id": "c64731c0-05f4-49c1-b5f1-7687feb8fd7a",
          "timestamp": 1718334846273,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 74,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
          "name": "Validate user is unable to get current user task info as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
              }
            }
          ]
        },
        "parent": {
          "id": "5171d9cd-76d8-4f9d-a519-01faa75793b6",
          "name": "Get current user task info",
          "item": [
            {
              "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
                  }
                }
              ]
            },
            {
              "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
                  }
                }
              ]
            },
            {
              "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
                  }
                }
              ]
            },
            {
              "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cb931c92-bd49-42ef-8533-f1d77b777f0b",
          "length": 110,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "668dd5c7-1e29-4d8b-8f68-d4ffd7f851b4",
          "scriptId": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
          "execution": "1233975a-da13-4ba5-a214-de4201325b60"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'error'",
          "stack": "AssertionError: expected undefined to deeply equal 'error'\n   at Object.eval sandbox-script.js:2:74)",
          "checksum": "098ebf2329cb960852ef895c9837ea5e",
          "id": "3fb98c3b-a6c0-4910-82dc-d3270636f707",
          "timestamp": 1718334846274,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 74,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
          "name": "Validate user is unable to get current user task info as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
              }
            }
          ]
        },
        "parent": {
          "id": "5171d9cd-76d8-4f9d-a519-01faa75793b6",
          "name": "Get current user task info",
          "item": [
            {
              "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
                  }
                }
              ]
            },
            {
              "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
                  }
                }
              ]
            },
            {
              "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
                  }
                }
              ]
            },
            {
              "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cb931c92-bd49-42ef-8533-f1d77b777f0b",
          "length": 110,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "668dd5c7-1e29-4d8b-8f68-d4ffd7f851b4",
          "scriptId": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
          "execution": "1233975a-da13-4ba5-a214-de4201325b60"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Token is invalid or expired'",
          "stack": "AssertionError: expected undefined to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:3:74)",
          "checksum": "555a9f26656818f5579c870900974992",
          "id": "aaf7b389-20e5-4744-9c87-34fc6a8a6ce4",
          "timestamp": 1718334846275,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 74,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
          "name": "Validate user is unable to get current user task info as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
              }
            }
          ]
        },
        "parent": {
          "id": "5171d9cd-76d8-4f9d-a519-01faa75793b6",
          "name": "Get current user task info",
          "item": [
            {
              "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
                  }
                }
              ]
            },
            {
              "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
                  }
                }
              ]
            },
            {
              "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
                  }
                }
              ]
            },
            {
              "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cb931c92-bd49-42ef-8533-f1d77b777f0b",
          "length": 110,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "668dd5c7-1e29-4d8b-8f68-d4ffd7f851b4",
          "scriptId": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
          "execution": "1233975a-da13-4ba5-a214-de4201325b60"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 405 but got 404",
          "stack": "AssertionError: expected response to have status code 405 but got 404\n   at Object.eval sandbox-script.js:1:75)",
          "checksum": "92aa558d8eb9435d4073ef2ea10306b0",
          "id": "4221073b-be81-44c3-b1af-045c3c63cb29",
          "timestamp": 1718334846667,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 75,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
          "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
              }
            }
          ]
        },
        "parent": {
          "id": "5171d9cd-76d8-4f9d-a519-01faa75793b6",
          "name": "Get current user task info",
          "item": [
            {
              "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
                  }
                }
              ]
            },
            {
              "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
                  }
                }
              ]
            },
            {
              "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
                  }
                }
              ]
            },
            {
              "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9a32fe18-f4c3-4ef2-a0b4-325131d87b51",
          "length": 110,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "41c29ace-5a2f-41f7-9e74-f6febefee2bf",
          "scriptId": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
          "execution": "7df41ab2-810e-4718-9501-5ade9224bc49"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Not Found' to deeply equal 'Method Not Allowed'",
          "stack": "AssertionError: expected 'Not Found' to deeply equal 'Method Not Allowed'\n   at Object.eval sandbox-script.js:2:75)",
          "checksum": "273f112135378be16833e321fe5b02b2",
          "id": "0c03bb0b-7460-465b-b326-ba4f78b36c60",
          "timestamp": 1718334846668,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 75,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
          "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "get-curent-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
              }
            }
          ]
        },
        "parent": {
          "id": "5171d9cd-76d8-4f9d-a519-01faa75793b6",
          "name": "Get current user task info",
          "item": [
            {
              "id": "b484e971-6956-4ccf-b869-7803bf94acb8",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3de5df7-534f-4262-a419-e9b375d6cf5d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b8f73aa1-9a5c-4dec-b3a4-48753e73fb94"
                  }
                }
              ]
            },
            {
              "id": "aa19bb39-dafd-4767-9d63-6f44a6e5ec1f",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "269fad22-97dc-4aed-907a-f4ed65e10125",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ba7fbb0c-3dc3-471e-a38e-7859e09d31cd"
                  }
                }
              ]
            },
            {
              "id": "63cb44d0-cda1-4550-990d-c52bf41070d2",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5227f6cb-3441-45b5-b86b-2eb8314d7f01",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1233975a-da13-4ba5-a214-de4201325b60"
                  }
                }
              ]
            },
            {
              "id": "82f9062e-baf7-40e2-bd92-b1a4edac59d1",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-curent-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7df41ab2-810e-4718-9501-5ade9224bc49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9a32fe18-f4c3-4ef2-a0b4-325131d87b51",
          "length": 110,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "41c29ace-5a2f-41f7-9e74-f6febefee2bf",
          "scriptId": "4249b879-6916-4cdf-8b2f-bf98b4032fc5",
          "execution": "7df41ab2-810e-4718-9501-5ade9224bc49"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:76)",
          "checksum": "81d7e26057da650adb91efc06a399968",
          "id": "8356d749-2856-45fa-ac5e-e626b4aad361",
          "timestamp": 1718334847079,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 76,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cfafe81a-21aa-4306-aac0-214c555aed73",
          "name": "Validate user is able to start variant processing successfully",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
              }
            }
          ]
        },
        "parent": {
          "id": "d953cf86-aee6-4066-8833-299833647bae",
          "name": "Start variant processing",
          "item": [
            {
              "id": "cfafe81a-21aa-4306-aac0-214c555aed73",
              "name": "Validate user is able to start variant processing successfully",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
                  }
                }
              ]
            },
            {
              "id": "9ccbecf8-9832-4511-b0bd-9418d9cccc98",
              "name": "Validate user is unable to start variant processing as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40bf9df3-7815-4a46-8eb7-e2517fec8dd1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "92d82f68-7863-4708-a979-b09c7c33301d"
                  }
                }
              ]
            },
            {
              "id": "73edec2d-eb86-4c80-8ea7-3b3cd3c093a3",
              "name": "Validate user is unable to start variant processing without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceacdfa2-1aaf-4e31-af08-9019654add44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "79a0f4b1-cbc0-4a95-952b-54992f6c3d8e"
                  }
                }
              ]
            },
            {
              "id": "74592aa0-a71c-4bcc-ba3f-fd00ced68751",
              "name": "Validate user is unable to start variant processing as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38d6c22d-f4e1-4e05-9a36-6c306582a978",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "46ffc7cf-1067-45c0-af66-99d67c13f742"
                  }
                }
              ]
            },
            {
              "id": "48d1013f-25ad-419a-b103-e4ae9b462c33",
              "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1c1efe4-60d6-4c48-813f-9cc0691043e5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8abc00bc-b2ed-48b7-a8b9-260525adfa26"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "253d05bd-8546-49c2-b58e-9c9f3e972cf3",
          "length": 110,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c20be6ae-cbfd-4d71-a3f9-509b16b8abc1",
          "scriptId": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
          "execution": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:76)",
          "checksum": "5957d71f6bbf2a45419835b1e9590b98",
          "id": "adb2abca-5f7a-4578-9702-2b6421337694",
          "timestamp": 1718334847081,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 76,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "cfafe81a-21aa-4306-aac0-214c555aed73",
          "name": "Validate user is able to start variant processing successfully",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
              }
            }
          ]
        },
        "parent": {
          "id": "d953cf86-aee6-4066-8833-299833647bae",
          "name": "Start variant processing",
          "item": [
            {
              "id": "cfafe81a-21aa-4306-aac0-214c555aed73",
              "name": "Validate user is able to start variant processing successfully",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
                  }
                }
              ]
            },
            {
              "id": "9ccbecf8-9832-4511-b0bd-9418d9cccc98",
              "name": "Validate user is unable to start variant processing as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40bf9df3-7815-4a46-8eb7-e2517fec8dd1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "92d82f68-7863-4708-a979-b09c7c33301d"
                  }
                }
              ]
            },
            {
              "id": "73edec2d-eb86-4c80-8ea7-3b3cd3c093a3",
              "name": "Validate user is unable to start variant processing without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceacdfa2-1aaf-4e31-af08-9019654add44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "79a0f4b1-cbc0-4a95-952b-54992f6c3d8e"
                  }
                }
              ]
            },
            {
              "id": "74592aa0-a71c-4bcc-ba3f-fd00ced68751",
              "name": "Validate user is unable to start variant processing as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38d6c22d-f4e1-4e05-9a36-6c306582a978",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "46ffc7cf-1067-45c0-af66-99d67c13f742"
                  }
                }
              ]
            },
            {
              "id": "48d1013f-25ad-419a-b103-e4ae9b462c33",
              "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1c1efe4-60d6-4c48-813f-9cc0691043e5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8abc00bc-b2ed-48b7-a8b9-260525adfa26"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "253d05bd-8546-49c2-b58e-9c9f3e972cf3",
          "length": 110,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c20be6ae-cbfd-4d71-a3f9-509b16b8abc1",
          "scriptId": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
          "execution": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'error' to deeply equal 'success'",
          "stack": "AssertionError: expected 'error' to deeply equal 'success'\n   at Object.eval sandbox-script.js:3:76)",
          "checksum": "042183e5ed2462c45a2d889d1d0efe14",
          "id": "529bb4c4-7f2a-4cc2-81c4-8f54cae9f27d",
          "timestamp": 1718334847082,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 76,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "cfafe81a-21aa-4306-aac0-214c555aed73",
          "name": "Validate user is able to start variant processing successfully",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
              }
            }
          ]
        },
        "parent": {
          "id": "d953cf86-aee6-4066-8833-299833647bae",
          "name": "Start variant processing",
          "item": [
            {
              "id": "cfafe81a-21aa-4306-aac0-214c555aed73",
              "name": "Validate user is able to start variant processing successfully",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
                  }
                }
              ]
            },
            {
              "id": "9ccbecf8-9832-4511-b0bd-9418d9cccc98",
              "name": "Validate user is unable to start variant processing as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40bf9df3-7815-4a46-8eb7-e2517fec8dd1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "92d82f68-7863-4708-a979-b09c7c33301d"
                  }
                }
              ]
            },
            {
              "id": "73edec2d-eb86-4c80-8ea7-3b3cd3c093a3",
              "name": "Validate user is unable to start variant processing without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceacdfa2-1aaf-4e31-af08-9019654add44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "79a0f4b1-cbc0-4a95-952b-54992f6c3d8e"
                  }
                }
              ]
            },
            {
              "id": "74592aa0-a71c-4bcc-ba3f-fd00ced68751",
              "name": "Validate user is unable to start variant processing as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38d6c22d-f4e1-4e05-9a36-6c306582a978",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "46ffc7cf-1067-45c0-af66-99d67c13f742"
                  }
                }
              ]
            },
            {
              "id": "48d1013f-25ad-419a-b103-e4ae9b462c33",
              "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1c1efe4-60d6-4c48-813f-9cc0691043e5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8abc00bc-b2ed-48b7-a8b9-260525adfa26"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "253d05bd-8546-49c2-b58e-9c9f3e972cf3",
          "length": 110,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c20be6ae-cbfd-4d71-a3f9-509b16b8abc1",
          "scriptId": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
          "execution": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Variant file(s) processed successfully'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Variant file(s) processed successfully'\n   at Object.eval sandbox-script.js:4:76)",
          "checksum": "3a7ceba0be26039518fdfef1f4c90a85",
          "id": "8654e638-1dfe-46b3-93b8-a535b438e89b",
          "timestamp": 1718334847083,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 76,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "cfafe81a-21aa-4306-aac0-214c555aed73",
          "name": "Validate user is able to start variant processing successfully",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
              }
            }
          ]
        },
        "parent": {
          "id": "d953cf86-aee6-4066-8833-299833647bae",
          "name": "Start variant processing",
          "item": [
            {
              "id": "cfafe81a-21aa-4306-aac0-214c555aed73",
              "name": "Validate user is able to start variant processing successfully",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
                  }
                }
              ]
            },
            {
              "id": "9ccbecf8-9832-4511-b0bd-9418d9cccc98",
              "name": "Validate user is unable to start variant processing as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40bf9df3-7815-4a46-8eb7-e2517fec8dd1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "92d82f68-7863-4708-a979-b09c7c33301d"
                  }
                }
              ]
            },
            {
              "id": "73edec2d-eb86-4c80-8ea7-3b3cd3c093a3",
              "name": "Validate user is unable to start variant processing without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceacdfa2-1aaf-4e31-af08-9019654add44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "79a0f4b1-cbc0-4a95-952b-54992f6c3d8e"
                  }
                }
              ]
            },
            {
              "id": "74592aa0-a71c-4bcc-ba3f-fd00ced68751",
              "name": "Validate user is unable to start variant processing as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38d6c22d-f4e1-4e05-9a36-6c306582a978",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "46ffc7cf-1067-45c0-af66-99d67c13f742"
                  }
                }
              ]
            },
            {
              "id": "48d1013f-25ad-419a-b103-e4ae9b462c33",
              "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1c1efe4-60d6-4c48-813f-9cc0691043e5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8abc00bc-b2ed-48b7-a8b9-260525adfa26"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "253d05bd-8546-49c2-b58e-9c9f3e972cf3",
          "length": 110,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c20be6ae-cbfd-4d71-a3f9-509b16b8abc1",
          "scriptId": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
          "execution": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)",
          "checksum": "df5d274077a016236af96e7344fb301b",
          "id": "f2128e45-8cef-41ff-9292-84747d80cad5",
          "timestamp": 1718334847507,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 77,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9ccbecf8-9832-4511-b0bd-9418d9cccc98",
          "name": "Validate user is unable to start variant processing as required parameter is missing",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40bf9df3-7815-4a46-8eb7-e2517fec8dd1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "92d82f68-7863-4708-a979-b09c7c33301d"
              }
            }
          ]
        },
        "parent": {
          "id": "d953cf86-aee6-4066-8833-299833647bae",
          "name": "Start variant processing",
          "item": [
            {
              "id": "cfafe81a-21aa-4306-aac0-214c555aed73",
              "name": "Validate user is able to start variant processing successfully",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
                  }
                }
              ]
            },
            {
              "id": "9ccbecf8-9832-4511-b0bd-9418d9cccc98",
              "name": "Validate user is unable to start variant processing as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40bf9df3-7815-4a46-8eb7-e2517fec8dd1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "92d82f68-7863-4708-a979-b09c7c33301d"
                  }
                }
              ]
            },
            {
              "id": "73edec2d-eb86-4c80-8ea7-3b3cd3c093a3",
              "name": "Validate user is unable to start variant processing without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceacdfa2-1aaf-4e31-af08-9019654add44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "79a0f4b1-cbc0-4a95-952b-54992f6c3d8e"
                  }
                }
              ]
            },
            {
              "id": "74592aa0-a71c-4bcc-ba3f-fd00ced68751",
              "name": "Validate user is unable to start variant processing as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38d6c22d-f4e1-4e05-9a36-6c306582a978",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "46ffc7cf-1067-45c0-af66-99d67c13f742"
                  }
                }
              ]
            },
            {
              "id": "48d1013f-25ad-419a-b103-e4ae9b462c33",
              "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1c1efe4-60d6-4c48-813f-9cc0691043e5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8abc00bc-b2ed-48b7-a8b9-260525adfa26"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "266986b0-167a-4bfd-84c6-8f8607c28e2e",
          "length": 110,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "600f6688-2f47-4c4d-9fb8-6f87afd668ca",
          "scriptId": "40bf9df3-7815-4a46-8eb7-e2517fec8dd1",
          "execution": "92d82f68-7863-4708-a979-b09c7c33301d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:77)",
          "checksum": "93fc71aafde96223cdf53bdb401d5a3c",
          "id": "dbb6f4a8-9447-4e28-a86d-883b40bd3008",
          "timestamp": 1718334847509,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 77,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "9ccbecf8-9832-4511-b0bd-9418d9cccc98",
          "name": "Validate user is unable to start variant processing as required parameter is missing",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40bf9df3-7815-4a46-8eb7-e2517fec8dd1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "92d82f68-7863-4708-a979-b09c7c33301d"
              }
            }
          ]
        },
        "parent": {
          "id": "d953cf86-aee6-4066-8833-299833647bae",
          "name": "Start variant processing",
          "item": [
            {
              "id": "cfafe81a-21aa-4306-aac0-214c555aed73",
              "name": "Validate user is able to start variant processing successfully",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3fe6ecb-c01a-488e-9254-551f85a48b3c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2f98aa9a-66c1-443b-b2f7-36b404b99a44"
                  }
                }
              ]
            },
            {
              "id": "9ccbecf8-9832-4511-b0bd-9418d9cccc98",
              "name": "Validate user is unable to start variant processing as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40bf9df3-7815-4a46-8eb7-e2517fec8dd1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "92d82f68-7863-4708-a979-b09c7c33301d"
                  }
                }
              ]
            },
            {
              "id": "73edec2d-eb86-4c80-8ea7-3b3cd3c093a3",
              "name": "Validate user is unable to start variant processing without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceacdfa2-1aaf-4e31-af08-9019654add44",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "79a0f4b1-cbc0-4a95-952b-54992f6c3d8e"
                  }
                }
              ]
            },
            {
              "id": "74592aa0-a71c-4bcc-ba3f-fd00ced68751",
              "name": "Validate user is unable to start variant processing as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38d6c22d-f4e1-4e05-9a36-6c306582a978",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "46ffc7cf-1067-45c0-af66-99d67c13f742"
                  }
                }
              ]
            },
            {
              "id": "48d1013f-25ad-419a-b103-e4ae9b462c33",
              "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1c1efe4-60d6-4c48-813f-9cc0691043e5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8abc00bc-b2ed-48b7-a8b9-260525adfa26"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "266986b0-167a-4bfd-84c6-8f8607c28e2e",
          "length": 110,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "600f6688-2f47-4c4d-9fb8-6f87afd668ca",
          "scriptId": "40bf9df3-7815-4a46-8eb7-e2517fec8dd1",
          "execution": "92d82f68-7863-4708-a979-b09c7c33301d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response is an array",
          "message": "expected { status: 'error', …(1) } to be an array",
          "stack": "AssertionError: expected { status: 'error', …(1) } to be an array\n   at Object.eval sandbox-script.js:1:81)",
          "checksum": "80b823bef65c222506ac4d5456180a01",
          "id": "47bdaf7a-0ecb-4ce7-8191-ce1bcee709ad",
          "timestamp": 1718334848983,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 81,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "638dbcfd-9c0d-4f8f-82b1-5ffda2e6031d",
          "name": "Validate user is able to display patient demograph dropdown successfully",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "tmb"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02824625-d2af-436e-86cd-ea0421175fb3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c9d3752a-6bbf-449a-a312-d47670ff34ec"
              }
            }
          ]
        },
        "parent": {
          "id": "29b5f44f-6467-418b-8709-83e00450b300",
          "name": "Patient demograph dropdown",
          "item": [
            {
              "id": "638dbcfd-9c0d-4f8f-82b1-5ffda2e6031d",
              "name": "Validate user is able to display patient demograph dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02824625-d2af-436e-86cd-ea0421175fb3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c9d3752a-6bbf-449a-a312-d47670ff34ec"
                  }
                }
              ]
            },
            {
              "id": "0a26db68-b700-4ee5-ab77-201e5510771d",
              "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8233d493-1ba3-4eeb-89da-b6bbe8eced0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c0a380c3-54ef-4661-93bd-9b55e7c539f4"
                  }
                }
              ]
            },
            {
              "id": "91c518e1-2a78-45e7-8857-bfe1a7335bb9",
              "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ce88703f-25cf-4337-9791-990b129318e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "feb22e69-40bb-4b92-bc35-f2beed02ba97"
                  }
                }
              ]
            },
            {
              "id": "b1403256-f03a-49a2-ac29-ce3890ef6753",
              "name": "Validate user is unable to display patient demograph dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "483b12e9-3f56-4843-ba66-602654185186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e72721ac-d36c-42df-9ce0-9c90dacd4a6d"
                  }
                }
              ]
            },
            {
              "id": "6b386dd2-2aff-4f9c-a01d-deaa9c1729c2",
              "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f482f6a-8f50-4333-9cbf-6169b97efa5b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "bc73113d-9612-4fd2-b1b9-f7506e7f4369"
                  }
                }
              ]
            },
            {
              "id": "94abf27c-bd62-4a86-afa4-4e845339adce",
              "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae39226e-ba0b-4fb2-ad63-2d215ac7e88e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "555fa6b4-3216-4e47-87bc-3eb02c731b1f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "371e36e5-e07d-4768-8927-0be97ff87db9",
          "length": 110,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f6fba07c-8905-4c6c-af9c-6671eaf65d74",
          "scriptId": "02824625-d2af-436e-86cd-ea0421175fb3",
          "execution": "c9d3752a-6bbf-449a-a312-d47670ff34ec"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains all expected elements",
          "message": "the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:81)",
          "checksum": "ed4e7fa4653e064f213d81d623548170",
          "id": "41766b43-1583-4517-99fa-4800cb85d827",
          "timestamp": 1718334848985,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 81,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "638dbcfd-9c0d-4f8f-82b1-5ffda2e6031d",
          "name": "Validate user is able to display patient demograph dropdown successfully",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "tmb"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02824625-d2af-436e-86cd-ea0421175fb3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c9d3752a-6bbf-449a-a312-d47670ff34ec"
              }
            }
          ]
        },
        "parent": {
          "id": "29b5f44f-6467-418b-8709-83e00450b300",
          "name": "Patient demograph dropdown",
          "item": [
            {
              "id": "638dbcfd-9c0d-4f8f-82b1-5ffda2e6031d",
              "name": "Validate user is able to display patient demograph dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02824625-d2af-436e-86cd-ea0421175fb3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c9d3752a-6bbf-449a-a312-d47670ff34ec"
                  }
                }
              ]
            },
            {
              "id": "0a26db68-b700-4ee5-ab77-201e5510771d",
              "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8233d493-1ba3-4eeb-89da-b6bbe8eced0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c0a380c3-54ef-4661-93bd-9b55e7c539f4"
                  }
                }
              ]
            },
            {
              "id": "91c518e1-2a78-45e7-8857-bfe1a7335bb9",
              "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ce88703f-25cf-4337-9791-990b129318e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "feb22e69-40bb-4b92-bc35-f2beed02ba97"
                  }
                }
              ]
            },
            {
              "id": "b1403256-f03a-49a2-ac29-ce3890ef6753",
              "name": "Validate user is unable to display patient demograph dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "483b12e9-3f56-4843-ba66-602654185186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e72721ac-d36c-42df-9ce0-9c90dacd4a6d"
                  }
                }
              ]
            },
            {
              "id": "6b386dd2-2aff-4f9c-a01d-deaa9c1729c2",
              "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f482f6a-8f50-4333-9cbf-6169b97efa5b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "bc73113d-9612-4fd2-b1b9-f7506e7f4369"
                  }
                }
              ]
            },
            {
              "id": "94abf27c-bd62-4a86-afa4-4e845339adce",
              "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae39226e-ba0b-4fb2-ad63-2d215ac7e88e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "555fa6b4-3216-4e47-87bc-3eb02c731b1f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "371e36e5-e07d-4768-8927-0be97ff87db9",
          "length": 110,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f6fba07c-8905-4c6c-af9c-6671eaf65d74",
          "scriptId": "02824625-d2af-436e-86cd-ea0421175fb3",
          "execution": "c9d3752a-6bbf-449a-a312-d47670ff34ec"
        }
      },
      {
        "error": {
          "name": "TypeError",
          "index": 2,
          "test": "Response does not contain unexpected elements",
          "message": "response.forEach is not a function",
          "stack": "TypeError: response.forEach is not a function\n   at Object.eval sandbox-script.js:3:81)",
          "checksum": "e2bca57aeb9b7a658d104b4da22dffac",
          "id": "be0f439c-5e7a-481b-b134-d1e7e8471096",
          "timestamp": 1718334849005,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 81,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "638dbcfd-9c0d-4f8f-82b1-5ffda2e6031d",
          "name": "Validate user is able to display patient demograph dropdown successfully",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "tmb"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02824625-d2af-436e-86cd-ea0421175fb3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c9d3752a-6bbf-449a-a312-d47670ff34ec"
              }
            }
          ]
        },
        "parent": {
          "id": "29b5f44f-6467-418b-8709-83e00450b300",
          "name": "Patient demograph dropdown",
          "item": [
            {
              "id": "638dbcfd-9c0d-4f8f-82b1-5ffda2e6031d",
              "name": "Validate user is able to display patient demograph dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02824625-d2af-436e-86cd-ea0421175fb3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c9d3752a-6bbf-449a-a312-d47670ff34ec"
                  }
                }
              ]
            },
            {
              "id": "0a26db68-b700-4ee5-ab77-201e5510771d",
              "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8233d493-1ba3-4eeb-89da-b6bbe8eced0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c0a380c3-54ef-4661-93bd-9b55e7c539f4"
                  }
                }
              ]
            },
            {
              "id": "91c518e1-2a78-45e7-8857-bfe1a7335bb9",
              "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ce88703f-25cf-4337-9791-990b129318e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "feb22e69-40bb-4b92-bc35-f2beed02ba97"
                  }
                }
              ]
            },
            {
              "id": "b1403256-f03a-49a2-ac29-ce3890ef6753",
              "name": "Validate user is unable to display patient demograph dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "483b12e9-3f56-4843-ba66-602654185186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e72721ac-d36c-42df-9ce0-9c90dacd4a6d"
                  }
                }
              ]
            },
            {
              "id": "6b386dd2-2aff-4f9c-a01d-deaa9c1729c2",
              "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f482f6a-8f50-4333-9cbf-6169b97efa5b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "bc73113d-9612-4fd2-b1b9-f7506e7f4369"
                  }
                }
              ]
            },
            {
              "id": "94abf27c-bd62-4a86-afa4-4e845339adce",
              "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae39226e-ba0b-4fb2-ad63-2d215ac7e88e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "555fa6b4-3216-4e47-87bc-3eb02c731b1f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "371e36e5-e07d-4768-8927-0be97ff87db9",
          "length": 110,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f6fba07c-8905-4c6c-af9c-6671eaf65d74",
          "scriptId": "02824625-d2af-436e-86cd-ea0421175fb3",
          "execution": "c9d3752a-6bbf-449a-a312-d47670ff34ec"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)",
          "checksum": "40983e30ed692469b188fd648d8eea32",
          "id": "b0946eac-973c-43f3-b3ac-8ced58d7bfb0",
          "timestamp": 1718334849330,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 82,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0a26db68-b700-4ee5-ab77-201e5510771d",
          "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8233d493-1ba3-4eeb-89da-b6bbe8eced0b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "c0a380c3-54ef-4661-93bd-9b55e7c539f4"
              }
            }
          ]
        },
        "parent": {
          "id": "29b5f44f-6467-418b-8709-83e00450b300",
          "name": "Patient demograph dropdown",
          "item": [
            {
              "id": "638dbcfd-9c0d-4f8f-82b1-5ffda2e6031d",
              "name": "Validate user is able to display patient demograph dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02824625-d2af-436e-86cd-ea0421175fb3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c9d3752a-6bbf-449a-a312-d47670ff34ec"
                  }
                }
              ]
            },
            {
              "id": "0a26db68-b700-4ee5-ab77-201e5510771d",
              "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8233d493-1ba3-4eeb-89da-b6bbe8eced0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c0a380c3-54ef-4661-93bd-9b55e7c539f4"
                  }
                }
              ]
            },
            {
              "id": "91c518e1-2a78-45e7-8857-bfe1a7335bb9",
              "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ce88703f-25cf-4337-9791-990b129318e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "feb22e69-40bb-4b92-bc35-f2beed02ba97"
                  }
                }
              ]
            },
            {
              "id": "b1403256-f03a-49a2-ac29-ce3890ef6753",
              "name": "Validate user is unable to display patient demograph dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "483b12e9-3f56-4843-ba66-602654185186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e72721ac-d36c-42df-9ce0-9c90dacd4a6d"
                  }
                }
              ]
            },
            {
              "id": "6b386dd2-2aff-4f9c-a01d-deaa9c1729c2",
              "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f482f6a-8f50-4333-9cbf-6169b97efa5b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "bc73113d-9612-4fd2-b1b9-f7506e7f4369"
                  }
                }
              ]
            },
            {
              "id": "94abf27c-bd62-4a86-afa4-4e845339adce",
              "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae39226e-ba0b-4fb2-ad63-2d215ac7e88e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "555fa6b4-3216-4e47-87bc-3eb02c731b1f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f2b995e-b528-4092-9d05-0527675c0564",
          "length": 110,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1ef140ab-3660-49c0-a22b-f013374bd421",
          "scriptId": "8233d493-1ba3-4eeb-89da-b6bbe8eced0b",
          "execution": "c0a380c3-54ef-4661-93bd-9b55e7c539f4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:82)",
          "checksum": "6fa76013c493f28699ace12fefd0fce7",
          "id": "3f0040ee-f848-4527-8059-376a7bf7d919",
          "timestamp": 1718334849331,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 82,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "0a26db68-b700-4ee5-ab77-201e5510771d",
          "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8233d493-1ba3-4eeb-89da-b6bbe8eced0b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "c0a380c3-54ef-4661-93bd-9b55e7c539f4"
              }
            }
          ]
        },
        "parent": {
          "id": "29b5f44f-6467-418b-8709-83e00450b300",
          "name": "Patient demograph dropdown",
          "item": [
            {
              "id": "638dbcfd-9c0d-4f8f-82b1-5ffda2e6031d",
              "name": "Validate user is able to display patient demograph dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02824625-d2af-436e-86cd-ea0421175fb3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c9d3752a-6bbf-449a-a312-d47670ff34ec"
                  }
                }
              ]
            },
            {
              "id": "0a26db68-b700-4ee5-ab77-201e5510771d",
              "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8233d493-1ba3-4eeb-89da-b6bbe8eced0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c0a380c3-54ef-4661-93bd-9b55e7c539f4"
                  }
                }
              ]
            },
            {
              "id": "91c518e1-2a78-45e7-8857-bfe1a7335bb9",
              "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ce88703f-25cf-4337-9791-990b129318e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "feb22e69-40bb-4b92-bc35-f2beed02ba97"
                  }
                }
              ]
            },
            {
              "id": "b1403256-f03a-49a2-ac29-ce3890ef6753",
              "name": "Validate user is unable to display patient demograph dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "483b12e9-3f56-4843-ba66-602654185186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e72721ac-d36c-42df-9ce0-9c90dacd4a6d"
                  }
                }
              ]
            },
            {
              "id": "6b386dd2-2aff-4f9c-a01d-deaa9c1729c2",
              "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f482f6a-8f50-4333-9cbf-6169b97efa5b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "bc73113d-9612-4fd2-b1b9-f7506e7f4369"
                  }
                }
              ]
            },
            {
              "id": "94abf27c-bd62-4a86-afa4-4e845339adce",
              "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae39226e-ba0b-4fb2-ad63-2d215ac7e88e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "555fa6b4-3216-4e47-87bc-3eb02c731b1f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f2b995e-b528-4092-9d05-0527675c0564",
          "length": 110,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1ef140ab-3660-49c0-a22b-f013374bd421",
          "scriptId": "8233d493-1ba3-4eeb-89da-b6bbe8eced0b",
          "execution": "c0a380c3-54ef-4661-93bd-9b55e7c539f4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)",
          "checksum": "0dc72d65d6a37ffa41a1b5b520a9c4a7",
          "id": "09b4b2ba-359d-4f6f-b64a-54b056819c13",
          "timestamp": 1718334849667,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 83,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "91c518e1-2a78-45e7-8857-bfe1a7335bb9",
          "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ce88703f-25cf-4337-9791-990b129318e8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "feb22e69-40bb-4b92-bc35-f2beed02ba97"
              }
            }
          ]
        },
        "parent": {
          "id": "29b5f44f-6467-418b-8709-83e00450b300",
          "name": "Patient demograph dropdown",
          "item": [
            {
              "id": "638dbcfd-9c0d-4f8f-82b1-5ffda2e6031d",
              "name": "Validate user is able to display patient demograph dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02824625-d2af-436e-86cd-ea0421175fb3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c9d3752a-6bbf-449a-a312-d47670ff34ec"
                  }
                }
              ]
            },
            {
              "id": "0a26db68-b700-4ee5-ab77-201e5510771d",
              "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8233d493-1ba3-4eeb-89da-b6bbe8eced0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c0a380c3-54ef-4661-93bd-9b55e7c539f4"
                  }
                }
              ]
            },
            {
              "id": "91c518e1-2a78-45e7-8857-bfe1a7335bb9",
              "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ce88703f-25cf-4337-9791-990b129318e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "feb22e69-40bb-4b92-bc35-f2beed02ba97"
                  }
                }
              ]
            },
            {
              "id": "b1403256-f03a-49a2-ac29-ce3890ef6753",
              "name": "Validate user is unable to display patient demograph dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "483b12e9-3f56-4843-ba66-602654185186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e72721ac-d36c-42df-9ce0-9c90dacd4a6d"
                  }
                }
              ]
            },
            {
              "id": "6b386dd2-2aff-4f9c-a01d-deaa9c1729c2",
              "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f482f6a-8f50-4333-9cbf-6169b97efa5b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "bc73113d-9612-4fd2-b1b9-f7506e7f4369"
                  }
                }
              ]
            },
            {
              "id": "94abf27c-bd62-4a86-afa4-4e845339adce",
              "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae39226e-ba0b-4fb2-ad63-2d215ac7e88e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "555fa6b4-3216-4e47-87bc-3eb02c731b1f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "19a425a2-73e1-480f-acf9-7a865a91305b",
          "length": 110,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a81c3c1c-b72a-4cba-ad0c-80979334bc41",
          "scriptId": "ce88703f-25cf-4337-9791-990b129318e8",
          "execution": "feb22e69-40bb-4b92-bc35-f2beed02ba97"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:83)",
          "checksum": "824ebe5b6514f38e5008fa1ac35980e5",
          "id": "80240f6e-2a7b-4ae4-b8c4-c31e02698fc1",
          "timestamp": 1718334849668,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 83,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "91c518e1-2a78-45e7-8857-bfe1a7335bb9",
          "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ce88703f-25cf-4337-9791-990b129318e8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "feb22e69-40bb-4b92-bc35-f2beed02ba97"
              }
            }
          ]
        },
        "parent": {
          "id": "29b5f44f-6467-418b-8709-83e00450b300",
          "name": "Patient demograph dropdown",
          "item": [
            {
              "id": "638dbcfd-9c0d-4f8f-82b1-5ffda2e6031d",
              "name": "Validate user is able to display patient demograph dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02824625-d2af-436e-86cd-ea0421175fb3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c9d3752a-6bbf-449a-a312-d47670ff34ec"
                  }
                }
              ]
            },
            {
              "id": "0a26db68-b700-4ee5-ab77-201e5510771d",
              "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8233d493-1ba3-4eeb-89da-b6bbe8eced0b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c0a380c3-54ef-4661-93bd-9b55e7c539f4"
                  }
                }
              ]
            },
            {
              "id": "91c518e1-2a78-45e7-8857-bfe1a7335bb9",
              "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ce88703f-25cf-4337-9791-990b129318e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "feb22e69-40bb-4b92-bc35-f2beed02ba97"
                  }
                }
              ]
            },
            {
              "id": "b1403256-f03a-49a2-ac29-ce3890ef6753",
              "name": "Validate user is unable to display patient demograph dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "483b12e9-3f56-4843-ba66-602654185186",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e72721ac-d36c-42df-9ce0-9c90dacd4a6d"
                  }
                }
              ]
            },
            {
              "id": "6b386dd2-2aff-4f9c-a01d-deaa9c1729c2",
              "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f482f6a-8f50-4333-9cbf-6169b97efa5b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "bc73113d-9612-4fd2-b1b9-f7506e7f4369"
                  }
                }
              ]
            },
            {
              "id": "94abf27c-bd62-4a86-afa4-4e845339adce",
              "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae39226e-ba0b-4fb2-ad63-2d215ac7e88e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "555fa6b4-3216-4e47-87bc-3eb02c731b1f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "19a425a2-73e1-480f-acf9-7a865a91305b",
          "length": 110,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a81c3c1c-b72a-4cba-ad0c-80979334bc41",
          "scriptId": "ce88703f-25cf-4337-9791-990b129318e8",
          "execution": "feb22e69-40bb-4b92-bc35-f2beed02ba97"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response is an array",
          "message": "expected { status: 'error', …(1) } to be an array",
          "stack": "AssertionError: expected { status: 'error', …(1) } to be an array\n   at Object.eval sandbox-script.js:1:87)",
          "checksum": "558948bb07a7c43edcba1882d732ca2e",
          "id": "2e5cfc19-1251-4987-9905-510b0c02fff3",
          "timestamp": 1718334851184,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 87,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "53a567dc-6e50-4af8-bd1b-8b7ee1ddaae7",
          "name": "Validate user is able to display sub tumor type dropdown successfully",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "lung_cancer"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ca1fcd3-77d8-4f36-a5b3-a4ff438e44aa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\r",
                  "    \"Small Cell Lung Cancer\",\r",
                  "    \"Non-Small Cell Lung Cancer\",\r",
                  "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                  "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                  "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                  "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                  "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                  "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                  "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                  "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                  "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                  "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                  "    \"Lung Carcinoid (LUCA)\",\r",
                  "    \"Small Cell Lung Cancer (SCLC)\",\r",
                  "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                  "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                  "    \"Lung Adenocarcinoma (LUAD)\",\r",
                  "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                  "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                  "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                  "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                  "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                  "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                  "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                  "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                  "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                  "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                  "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                  "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                  "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                  "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                  "];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "b8317efb-ca38-46bc-8ce6-44acc2e509de"
              }
            }
          ]
        },
        "parent": {
          "id": "8c25fc63-3944-4a6e-b640-ffafe9ea715e",
          "name": "Sub tumor dropdown",
          "item": [
            {
              "id": "53a567dc-6e50-4af8-bd1b-8b7ee1ddaae7",
              "name": "Validate user is able to display sub tumor type dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ca1fcd3-77d8-4f36-a5b3-a4ff438e44aa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\r",
                      "    \"Small Cell Lung Cancer\",\r",
                      "    \"Non-Small Cell Lung Cancer\",\r",
                      "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                      "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                      "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                      "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                      "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                      "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                      "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                      "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                      "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                      "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                      "    \"Lung Carcinoid (LUCA)\",\r",
                      "    \"Small Cell Lung Cancer (SCLC)\",\r",
                      "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                      "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                      "    \"Lung Adenocarcinoma (LUAD)\",\r",
                      "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                      "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                      "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                      "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                      "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                      "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                      "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                      "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                      "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                      "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                      "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                      "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                      "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                      "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                      "];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b8317efb-ca38-46bc-8ce6-44acc2e509de"
                  }
                }
              ]
            },
            {
              "id": "d5dda25d-fc42-49c4-88a1-5dfdd1642951",
              "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f3157-a823-4261-bccf-a62f1d99b50b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "815a7e65-bc4e-43a3-950a-636040770890"
                  }
                }
              ]
            },
            {
              "id": "ad28aa72-bbe9-4de8-a8bb-ff85e206689b",
              "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92b8ed41-250b-41ce-9079-4caf87618752",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cb0be9fe-b9fa-47ac-a0e1-7c1b632aed5c"
                  }
                }
              ]
            },
            {
              "id": "32efb8d8-2723-48b0-a0ed-adddac71ca78",
              "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "20181b18-8498-4dda-beac-113a2dd11f10",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1818d72f-61c8-47bd-aacc-2c3ccee22292"
                  }
                }
              ]
            },
            {
              "id": "e35fa05e-644b-43d2-8cb1-f2d3b03d8d3b",
              "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4550505e-fae1-4552-b4c6-bff9c6d8634c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ab5acd98-065e-48ca-90bd-8c89a5b0df5a"
                  }
                }
              ]
            },
            {
              "id": "16654890-e93d-4e45-a2b3-9c29aac7a92f",
              "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "{{key}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3a15f54-852c-42c3-b8d0-b91a9ca32020",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "972decf7-f957-4c21-b206-01cc3022ec59"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "97a55e04-205e-4153-9a76-93a06fd38d36",
          "length": 110,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cca8607f-6bb9-4865-a657-afd0daac6146",
          "scriptId": "2ca1fcd3-77d8-4f36-a5b3-a4ff438e44aa",
          "execution": "b8317efb-ca38-46bc-8ce6-44acc2e509de"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains all expected elements",
          "message": "the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:87)",
          "checksum": "e25099f64323bd1d74ced113ca22f6eb",
          "id": "909ded80-747a-49ca-a513-7acc2e6a9f35",
          "timestamp": 1718334851185,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 87,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "53a567dc-6e50-4af8-bd1b-8b7ee1ddaae7",
          "name": "Validate user is able to display sub tumor type dropdown successfully",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "lung_cancer"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ca1fcd3-77d8-4f36-a5b3-a4ff438e44aa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\r",
                  "    \"Small Cell Lung Cancer\",\r",
                  "    \"Non-Small Cell Lung Cancer\",\r",
                  "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                  "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                  "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                  "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                  "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                  "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                  "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                  "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                  "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                  "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                  "    \"Lung Carcinoid (LUCA)\",\r",
                  "    \"Small Cell Lung Cancer (SCLC)\",\r",
                  "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                  "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                  "    \"Lung Adenocarcinoma (LUAD)\",\r",
                  "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                  "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                  "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                  "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                  "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                  "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                  "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                  "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                  "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                  "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                  "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                  "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                  "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                  "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                  "];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "b8317efb-ca38-46bc-8ce6-44acc2e509de"
              }
            }
          ]
        },
        "parent": {
          "id": "8c25fc63-3944-4a6e-b640-ffafe9ea715e",
          "name": "Sub tumor dropdown",
          "item": [
            {
              "id": "53a567dc-6e50-4af8-bd1b-8b7ee1ddaae7",
              "name": "Validate user is able to display sub tumor type dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ca1fcd3-77d8-4f36-a5b3-a4ff438e44aa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\r",
                      "    \"Small Cell Lung Cancer\",\r",
                      "    \"Non-Small Cell Lung Cancer\",\r",
                      "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                      "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                      "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                      "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                      "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                      "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                      "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                      "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                      "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                      "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                      "    \"Lung Carcinoid (LUCA)\",\r",
                      "    \"Small Cell Lung Cancer (SCLC)\",\r",
                      "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                      "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                      "    \"Lung Adenocarcinoma (LUAD)\",\r",
                      "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                      "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                      "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                      "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                      "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                      "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                      "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                      "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                      "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                      "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                      "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                      "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                      "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                      "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                      "];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b8317efb-ca38-46bc-8ce6-44acc2e509de"
                  }
                }
              ]
            },
            {
              "id": "d5dda25d-fc42-49c4-88a1-5dfdd1642951",
              "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f3157-a823-4261-bccf-a62f1d99b50b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "815a7e65-bc4e-43a3-950a-636040770890"
                  }
                }
              ]
            },
            {
              "id": "ad28aa72-bbe9-4de8-a8bb-ff85e206689b",
              "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92b8ed41-250b-41ce-9079-4caf87618752",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cb0be9fe-b9fa-47ac-a0e1-7c1b632aed5c"
                  }
                }
              ]
            },
            {
              "id": "32efb8d8-2723-48b0-a0ed-adddac71ca78",
              "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "20181b18-8498-4dda-beac-113a2dd11f10",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1818d72f-61c8-47bd-aacc-2c3ccee22292"
                  }
                }
              ]
            },
            {
              "id": "e35fa05e-644b-43d2-8cb1-f2d3b03d8d3b",
              "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4550505e-fae1-4552-b4c6-bff9c6d8634c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ab5acd98-065e-48ca-90bd-8c89a5b0df5a"
                  }
                }
              ]
            },
            {
              "id": "16654890-e93d-4e45-a2b3-9c29aac7a92f",
              "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "{{key}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3a15f54-852c-42c3-b8d0-b91a9ca32020",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "972decf7-f957-4c21-b206-01cc3022ec59"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "97a55e04-205e-4153-9a76-93a06fd38d36",
          "length": 110,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cca8607f-6bb9-4865-a657-afd0daac6146",
          "scriptId": "2ca1fcd3-77d8-4f36-a5b3-a4ff438e44aa",
          "execution": "b8317efb-ca38-46bc-8ce6-44acc2e509de"
        }
      },
      {
        "error": {
          "name": "TypeError",
          "index": 2,
          "test": "Response does not contain unexpected elements",
          "message": "response.forEach is not a function",
          "stack": "TypeError: response.forEach is not a function\n   at Object.eval sandbox-script.js:3:87)",
          "checksum": "7e664458d74fa984b3c5e8532288b756",
          "id": "cc35f018-c817-414e-a62d-b9315a097599",
          "timestamp": 1718334851185,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 87,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "53a567dc-6e50-4af8-bd1b-8b7ee1ddaae7",
          "name": "Validate user is able to display sub tumor type dropdown successfully",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "lung_cancer"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ca1fcd3-77d8-4f36-a5b3-a4ff438e44aa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\r",
                  "    \"Small Cell Lung Cancer\",\r",
                  "    \"Non-Small Cell Lung Cancer\",\r",
                  "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                  "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                  "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                  "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                  "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                  "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                  "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                  "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                  "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                  "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                  "    \"Lung Carcinoid (LUCA)\",\r",
                  "    \"Small Cell Lung Cancer (SCLC)\",\r",
                  "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                  "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                  "    \"Lung Adenocarcinoma (LUAD)\",\r",
                  "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                  "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                  "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                  "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                  "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                  "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                  "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                  "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                  "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                  "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                  "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                  "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                  "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                  "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                  "];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "b8317efb-ca38-46bc-8ce6-44acc2e509de"
              }
            }
          ]
        },
        "parent": {
          "id": "8c25fc63-3944-4a6e-b640-ffafe9ea715e",
          "name": "Sub tumor dropdown",
          "item": [
            {
              "id": "53a567dc-6e50-4af8-bd1b-8b7ee1ddaae7",
              "name": "Validate user is able to display sub tumor type dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ca1fcd3-77d8-4f36-a5b3-a4ff438e44aa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\r",
                      "    \"Small Cell Lung Cancer\",\r",
                      "    \"Non-Small Cell Lung Cancer\",\r",
                      "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                      "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                      "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                      "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                      "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                      "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                      "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                      "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                      "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                      "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                      "    \"Lung Carcinoid (LUCA)\",\r",
                      "    \"Small Cell Lung Cancer (SCLC)\",\r",
                      "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                      "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                      "    \"Lung Adenocarcinoma (LUAD)\",\r",
                      "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                      "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                      "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                      "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                      "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                      "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                      "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                      "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                      "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                      "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                      "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                      "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                      "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                      "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                      "];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b8317efb-ca38-46bc-8ce6-44acc2e509de"
                  }
                }
              ]
            },
            {
              "id": "d5dda25d-fc42-49c4-88a1-5dfdd1642951",
              "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f3157-a823-4261-bccf-a62f1d99b50b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "815a7e65-bc4e-43a3-950a-636040770890"
                  }
                }
              ]
            },
            {
              "id": "ad28aa72-bbe9-4de8-a8bb-ff85e206689b",
              "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92b8ed41-250b-41ce-9079-4caf87618752",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cb0be9fe-b9fa-47ac-a0e1-7c1b632aed5c"
                  }
                }
              ]
            },
            {
              "id": "32efb8d8-2723-48b0-a0ed-adddac71ca78",
              "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "20181b18-8498-4dda-beac-113a2dd11f10",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1818d72f-61c8-47bd-aacc-2c3ccee22292"
                  }
                }
              ]
            },
            {
              "id": "e35fa05e-644b-43d2-8cb1-f2d3b03d8d3b",
              "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4550505e-fae1-4552-b4c6-bff9c6d8634c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ab5acd98-065e-48ca-90bd-8c89a5b0df5a"
                  }
                }
              ]
            },
            {
              "id": "16654890-e93d-4e45-a2b3-9c29aac7a92f",
              "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "{{key}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3a15f54-852c-42c3-b8d0-b91a9ca32020",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "972decf7-f957-4c21-b206-01cc3022ec59"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "97a55e04-205e-4153-9a76-93a06fd38d36",
          "length": 110,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cca8607f-6bb9-4865-a657-afd0daac6146",
          "scriptId": "2ca1fcd3-77d8-4f36-a5b3-a4ff438e44aa",
          "execution": "b8317efb-ca38-46bc-8ce6-44acc2e509de"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)",
          "checksum": "12ca44a0a9d865f0149627d432db3601",
          "id": "20364da9-3845-48c9-ac0e-664873539ce4",
          "timestamp": 1718334851578,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 88,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d5dda25d-fc42-49c4-88a1-5dfdd1642951",
          "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "546f3157-a823-4261-bccf-a62f1d99b50b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "815a7e65-bc4e-43a3-950a-636040770890"
              }
            }
          ]
        },
        "parent": {
          "id": "8c25fc63-3944-4a6e-b640-ffafe9ea715e",
          "name": "Sub tumor dropdown",
          "item": [
            {
              "id": "53a567dc-6e50-4af8-bd1b-8b7ee1ddaae7",
              "name": "Validate user is able to display sub tumor type dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ca1fcd3-77d8-4f36-a5b3-a4ff438e44aa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\r",
                      "    \"Small Cell Lung Cancer\",\r",
                      "    \"Non-Small Cell Lung Cancer\",\r",
                      "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                      "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                      "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                      "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                      "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                      "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                      "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                      "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                      "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                      "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                      "    \"Lung Carcinoid (LUCA)\",\r",
                      "    \"Small Cell Lung Cancer (SCLC)\",\r",
                      "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                      "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                      "    \"Lung Adenocarcinoma (LUAD)\",\r",
                      "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                      "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                      "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                      "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                      "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                      "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                      "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                      "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                      "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                      "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                      "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                      "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                      "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                      "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                      "];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b8317efb-ca38-46bc-8ce6-44acc2e509de"
                  }
                }
              ]
            },
            {
              "id": "d5dda25d-fc42-49c4-88a1-5dfdd1642951",
              "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f3157-a823-4261-bccf-a62f1d99b50b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "815a7e65-bc4e-43a3-950a-636040770890"
                  }
                }
              ]
            },
            {
              "id": "ad28aa72-bbe9-4de8-a8bb-ff85e206689b",
              "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92b8ed41-250b-41ce-9079-4caf87618752",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cb0be9fe-b9fa-47ac-a0e1-7c1b632aed5c"
                  }
                }
              ]
            },
            {
              "id": "32efb8d8-2723-48b0-a0ed-adddac71ca78",
              "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "20181b18-8498-4dda-beac-113a2dd11f10",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1818d72f-61c8-47bd-aacc-2c3ccee22292"
                  }
                }
              ]
            },
            {
              "id": "e35fa05e-644b-43d2-8cb1-f2d3b03d8d3b",
              "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4550505e-fae1-4552-b4c6-bff9c6d8634c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ab5acd98-065e-48ca-90bd-8c89a5b0df5a"
                  }
                }
              ]
            },
            {
              "id": "16654890-e93d-4e45-a2b3-9c29aac7a92f",
              "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "{{key}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3a15f54-852c-42c3-b8d0-b91a9ca32020",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "972decf7-f957-4c21-b206-01cc3022ec59"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bbb5cf15-606f-4ebb-a37e-2ea59008e174",
          "length": 110,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1c6accd8-63fb-426a-9400-2c5ca1c5dac0",
          "scriptId": "546f3157-a823-4261-bccf-a62f1d99b50b",
          "execution": "815a7e65-bc4e-43a3-950a-636040770890"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:88)",
          "checksum": "2bce88c0c3d2779ad7fffeb38aa1e9c2",
          "id": "aa613cae-a75c-4ff5-818e-ea3dcbacf1da",
          "timestamp": 1718334851580,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 88,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "d5dda25d-fc42-49c4-88a1-5dfdd1642951",
          "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "546f3157-a823-4261-bccf-a62f1d99b50b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "815a7e65-bc4e-43a3-950a-636040770890"
              }
            }
          ]
        },
        "parent": {
          "id": "8c25fc63-3944-4a6e-b640-ffafe9ea715e",
          "name": "Sub tumor dropdown",
          "item": [
            {
              "id": "53a567dc-6e50-4af8-bd1b-8b7ee1ddaae7",
              "name": "Validate user is able to display sub tumor type dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ca1fcd3-77d8-4f36-a5b3-a4ff438e44aa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\r",
                      "    \"Small Cell Lung Cancer\",\r",
                      "    \"Non-Small Cell Lung Cancer\",\r",
                      "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                      "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                      "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                      "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                      "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                      "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                      "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                      "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                      "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                      "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                      "    \"Lung Carcinoid (LUCA)\",\r",
                      "    \"Small Cell Lung Cancer (SCLC)\",\r",
                      "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                      "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                      "    \"Lung Adenocarcinoma (LUAD)\",\r",
                      "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                      "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                      "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                      "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                      "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                      "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                      "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                      "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                      "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                      "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                      "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                      "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                      "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                      "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                      "];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b8317efb-ca38-46bc-8ce6-44acc2e509de"
                  }
                }
              ]
            },
            {
              "id": "d5dda25d-fc42-49c4-88a1-5dfdd1642951",
              "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f3157-a823-4261-bccf-a62f1d99b50b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "815a7e65-bc4e-43a3-950a-636040770890"
                  }
                }
              ]
            },
            {
              "id": "ad28aa72-bbe9-4de8-a8bb-ff85e206689b",
              "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92b8ed41-250b-41ce-9079-4caf87618752",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cb0be9fe-b9fa-47ac-a0e1-7c1b632aed5c"
                  }
                }
              ]
            },
            {
              "id": "32efb8d8-2723-48b0-a0ed-adddac71ca78",
              "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "20181b18-8498-4dda-beac-113a2dd11f10",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1818d72f-61c8-47bd-aacc-2c3ccee22292"
                  }
                }
              ]
            },
            {
              "id": "e35fa05e-644b-43d2-8cb1-f2d3b03d8d3b",
              "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4550505e-fae1-4552-b4c6-bff9c6d8634c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ab5acd98-065e-48ca-90bd-8c89a5b0df5a"
                  }
                }
              ]
            },
            {
              "id": "16654890-e93d-4e45-a2b3-9c29aac7a92f",
              "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "{{key}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3a15f54-852c-42c3-b8d0-b91a9ca32020",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "972decf7-f957-4c21-b206-01cc3022ec59"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bbb5cf15-606f-4ebb-a37e-2ea59008e174",
          "length": 110,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1c6accd8-63fb-426a-9400-2c5ca1c5dac0",
          "scriptId": "546f3157-a823-4261-bccf-a62f1d99b50b",
          "execution": "815a7e65-bc4e-43a3-950a-636040770890"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)",
          "checksum": "10adbb449784f0d0f763d1dbd9ff071f",
          "id": "85045470-6fa7-4762-8663-955d5a81feb5",
          "timestamp": 1718334851892,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 89,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ad28aa72-bbe9-4de8-a8bb-ff85e206689b",
          "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92b8ed41-250b-41ce-9079-4caf87618752",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "cb0be9fe-b9fa-47ac-a0e1-7c1b632aed5c"
              }
            }
          ]
        },
        "parent": {
          "id": "8c25fc63-3944-4a6e-b640-ffafe9ea715e",
          "name": "Sub tumor dropdown",
          "item": [
            {
              "id": "53a567dc-6e50-4af8-bd1b-8b7ee1ddaae7",
              "name": "Validate user is able to display sub tumor type dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ca1fcd3-77d8-4f36-a5b3-a4ff438e44aa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\r",
                      "    \"Small Cell Lung Cancer\",\r",
                      "    \"Non-Small Cell Lung Cancer\",\r",
                      "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                      "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                      "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                      "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                      "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                      "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                      "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                      "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                      "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                      "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                      "    \"Lung Carcinoid (LUCA)\",\r",
                      "    \"Small Cell Lung Cancer (SCLC)\",\r",
                      "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                      "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                      "    \"Lung Adenocarcinoma (LUAD)\",\r",
                      "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                      "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                      "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                      "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                      "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                      "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                      "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                      "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                      "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                      "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                      "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                      "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                      "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                      "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                      "];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b8317efb-ca38-46bc-8ce6-44acc2e509de"
                  }
                }
              ]
            },
            {
              "id": "d5dda25d-fc42-49c4-88a1-5dfdd1642951",
              "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f3157-a823-4261-bccf-a62f1d99b50b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "815a7e65-bc4e-43a3-950a-636040770890"
                  }
                }
              ]
            },
            {
              "id": "ad28aa72-bbe9-4de8-a8bb-ff85e206689b",
              "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92b8ed41-250b-41ce-9079-4caf87618752",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cb0be9fe-b9fa-47ac-a0e1-7c1b632aed5c"
                  }
                }
              ]
            },
            {
              "id": "32efb8d8-2723-48b0-a0ed-adddac71ca78",
              "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "20181b18-8498-4dda-beac-113a2dd11f10",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1818d72f-61c8-47bd-aacc-2c3ccee22292"
                  }
                }
              ]
            },
            {
              "id": "e35fa05e-644b-43d2-8cb1-f2d3b03d8d3b",
              "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4550505e-fae1-4552-b4c6-bff9c6d8634c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ab5acd98-065e-48ca-90bd-8c89a5b0df5a"
                  }
                }
              ]
            },
            {
              "id": "16654890-e93d-4e45-a2b3-9c29aac7a92f",
              "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "{{key}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3a15f54-852c-42c3-b8d0-b91a9ca32020",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "972decf7-f957-4c21-b206-01cc3022ec59"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c0bfdcd7-da07-4489-ade9-ef0733aee538",
          "length": 110,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bff39bfb-777b-4afb-beec-aa0831a53874",
          "scriptId": "92b8ed41-250b-41ce-9079-4caf87618752",
          "execution": "cb0be9fe-b9fa-47ac-a0e1-7c1b632aed5c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:89)",
          "checksum": "3fdc1a8bbbee636b5c72d8419699d21c",
          "id": "0f58cd53-439b-4f75-b0e6-edc9a90aad99",
          "timestamp": 1718334851894,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 89,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "ad28aa72-bbe9-4de8-a8bb-ff85e206689b",
          "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92b8ed41-250b-41ce-9079-4caf87618752",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "cb0be9fe-b9fa-47ac-a0e1-7c1b632aed5c"
              }
            }
          ]
        },
        "parent": {
          "id": "8c25fc63-3944-4a6e-b640-ffafe9ea715e",
          "name": "Sub tumor dropdown",
          "item": [
            {
              "id": "53a567dc-6e50-4af8-bd1b-8b7ee1ddaae7",
              "name": "Validate user is able to display sub tumor type dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ca1fcd3-77d8-4f36-a5b3-a4ff438e44aa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\r",
                      "    \"Small Cell Lung Cancer\",\r",
                      "    \"Non-Small Cell Lung Cancer\",\r",
                      "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                      "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                      "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                      "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                      "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                      "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                      "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                      "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                      "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                      "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                      "    \"Lung Carcinoid (LUCA)\",\r",
                      "    \"Small Cell Lung Cancer (SCLC)\",\r",
                      "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                      "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                      "    \"Lung Adenocarcinoma (LUAD)\",\r",
                      "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                      "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                      "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                      "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                      "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                      "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                      "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                      "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                      "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                      "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                      "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                      "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                      "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                      "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                      "];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b8317efb-ca38-46bc-8ce6-44acc2e509de"
                  }
                }
              ]
            },
            {
              "id": "d5dda25d-fc42-49c4-88a1-5dfdd1642951",
              "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "546f3157-a823-4261-bccf-a62f1d99b50b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "815a7e65-bc4e-43a3-950a-636040770890"
                  }
                }
              ]
            },
            {
              "id": "ad28aa72-bbe9-4de8-a8bb-ff85e206689b",
              "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92b8ed41-250b-41ce-9079-4caf87618752",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "cb0be9fe-b9fa-47ac-a0e1-7c1b632aed5c"
                  }
                }
              ]
            },
            {
              "id": "32efb8d8-2723-48b0-a0ed-adddac71ca78",
              "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "20181b18-8498-4dda-beac-113a2dd11f10",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1818d72f-61c8-47bd-aacc-2c3ccee22292"
                  }
                }
              ]
            },
            {
              "id": "e35fa05e-644b-43d2-8cb1-f2d3b03d8d3b",
              "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4550505e-fae1-4552-b4c6-bff9c6d8634c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ab5acd98-065e-48ca-90bd-8c89a5b0df5a"
                  }
                }
              ]
            },
            {
              "id": "16654890-e93d-4e45-a2b3-9c29aac7a92f",
              "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "{{key}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3a15f54-852c-42c3-b8d0-b91a9ca32020",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "972decf7-f957-4c21-b206-01cc3022ec59"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c0bfdcd7-da07-4489-ade9-ef0733aee538",
          "length": 110,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bff39bfb-777b-4afb-beec-aa0831a53874",
          "scriptId": "92b8ed41-250b-41ce-9079-4caf87618752",
          "execution": "cb0be9fe-b9fa-47ac-a0e1-7c1b632aed5c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:93)",
          "checksum": "3309f8301ec25d3b6a05ba7d82318f75",
          "id": "f5359340-cba4-409b-bb3d-58c4225d6d94",
          "timestamp": 1718334853399,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 93,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f3e3ac14-e788-4c13-8123-733beba5a850",
          "name": "Validate user is able to get patient file details successfully",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "2d6292b4-9de5-439d-9365-b5161373863b"
              }
            }
          ]
        },
        "parent": {
          "id": "55e497ba-eb6f-45e6-bbf1-43367ba79ad3",
          "name": "Get patient file details",
          "item": [
            {
              "id": "f3e3ac14-e788-4c13-8123-733beba5a850",
              "name": "Validate user is able to get patient file details successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2d6292b4-9de5-439d-9365-b5161373863b"
                  }
                }
              ]
            },
            {
              "id": "620fcdcd-0430-4126-ba4e-064960075eee",
              "name": "Validate user is unable to get patient file details with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "009bf090-c640-4e53-a765-34a5619705a2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a0bb17a5-a6fd-4634-9649-751527b9034f"
                  }
                }
              ]
            },
            {
              "id": "161d83ca-56f2-4a8e-9871-4042d477cc39",
              "name": "Validate user is unable to get patient file details with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e44b52f-de0e-4bc1-89ef-f9704f9145c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9bb4d72d-1022-4830-9338-850e2bf72721"
                  }
                }
              ]
            },
            {
              "id": "6bf985fa-ce94-4999-847f-e3c44563bf48",
              "name": "Validate user is unable to get patient file details without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d7e3889b-583e-4b3e-b122-e6f4b34fcbf5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3554c22b-002b-4946-8dbe-7e79cf2354ae"
                  }
                }
              ]
            },
            {
              "id": "5590f9d7-c30d-4dfe-8710-9207e69bb799",
              "name": "Validate user is unable to get patient file details as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07fc5e38-e268-4801-9cef-c13daad40d21",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "53b34036-a8be-43e2-8b71-e75e41ba065f"
                  }
                }
              ]
            },
            {
              "id": "38dfc11f-00f6-4826-9dfd-08e8d0ce831f",
              "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{uid}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a786fb84-6150-413c-a219-36d3c46783b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9a644f40-7ed6-4278-8d6d-4adf8a5f6731"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8557e24c-233e-48a6-95be-b486798e8fee",
          "length": 110,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9e5547a9-79a0-4fe5-b786-e9cf0c7ab117",
          "scriptId": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
          "execution": "2d6292b4-9de5-439d-9365-b5161373863b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'error' to deeply equal 'success'",
          "stack": "AssertionError: expected 'error' to deeply equal 'success'\n   at Object.eval sandbox-script.js:3:93)",
          "checksum": "7a95157840a5d1ec6810089852aadee8",
          "id": "b12217b2-0e47-44f9-bc3d-28d07d59efea",
          "timestamp": 1718334853400,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 93,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "f3e3ac14-e788-4c13-8123-733beba5a850",
          "name": "Validate user is able to get patient file details successfully",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "2d6292b4-9de5-439d-9365-b5161373863b"
              }
            }
          ]
        },
        "parent": {
          "id": "55e497ba-eb6f-45e6-bbf1-43367ba79ad3",
          "name": "Get patient file details",
          "item": [
            {
              "id": "f3e3ac14-e788-4c13-8123-733beba5a850",
              "name": "Validate user is able to get patient file details successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2d6292b4-9de5-439d-9365-b5161373863b"
                  }
                }
              ]
            },
            {
              "id": "620fcdcd-0430-4126-ba4e-064960075eee",
              "name": "Validate user is unable to get patient file details with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "009bf090-c640-4e53-a765-34a5619705a2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a0bb17a5-a6fd-4634-9649-751527b9034f"
                  }
                }
              ]
            },
            {
              "id": "161d83ca-56f2-4a8e-9871-4042d477cc39",
              "name": "Validate user is unable to get patient file details with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e44b52f-de0e-4bc1-89ef-f9704f9145c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9bb4d72d-1022-4830-9338-850e2bf72721"
                  }
                }
              ]
            },
            {
              "id": "6bf985fa-ce94-4999-847f-e3c44563bf48",
              "name": "Validate user is unable to get patient file details without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d7e3889b-583e-4b3e-b122-e6f4b34fcbf5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3554c22b-002b-4946-8dbe-7e79cf2354ae"
                  }
                }
              ]
            },
            {
              "id": "5590f9d7-c30d-4dfe-8710-9207e69bb799",
              "name": "Validate user is unable to get patient file details as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07fc5e38-e268-4801-9cef-c13daad40d21",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "53b34036-a8be-43e2-8b71-e75e41ba065f"
                  }
                }
              ]
            },
            {
              "id": "38dfc11f-00f6-4826-9dfd-08e8d0ce831f",
              "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{uid}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a786fb84-6150-413c-a219-36d3c46783b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9a644f40-7ed6-4278-8d6d-4adf8a5f6731"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8557e24c-233e-48a6-95be-b486798e8fee",
          "length": 110,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9e5547a9-79a0-4fe5-b786-e9cf0c7ab117",
          "scriptId": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
          "execution": "2d6292b4-9de5-439d-9365-b5161373863b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Patient file details retrieved'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient file details retrieved'\n   at Object.eval sandbox-script.js:4:93)",
          "checksum": "966ae50b6d6d61ea06309d212cd677b2",
          "id": "eaeff802-3df3-4cff-bea3-edc369112ba6",
          "timestamp": 1718334853401,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 93,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "f3e3ac14-e788-4c13-8123-733beba5a850",
          "name": "Validate user is able to get patient file details successfully",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "2d6292b4-9de5-439d-9365-b5161373863b"
              }
            }
          ]
        },
        "parent": {
          "id": "55e497ba-eb6f-45e6-bbf1-43367ba79ad3",
          "name": "Get patient file details",
          "item": [
            {
              "id": "f3e3ac14-e788-4c13-8123-733beba5a850",
              "name": "Validate user is able to get patient file details successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2d6292b4-9de5-439d-9365-b5161373863b"
                  }
                }
              ]
            },
            {
              "id": "620fcdcd-0430-4126-ba4e-064960075eee",
              "name": "Validate user is unable to get patient file details with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "009bf090-c640-4e53-a765-34a5619705a2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a0bb17a5-a6fd-4634-9649-751527b9034f"
                  }
                }
              ]
            },
            {
              "id": "161d83ca-56f2-4a8e-9871-4042d477cc39",
              "name": "Validate user is unable to get patient file details with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e44b52f-de0e-4bc1-89ef-f9704f9145c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9bb4d72d-1022-4830-9338-850e2bf72721"
                  }
                }
              ]
            },
            {
              "id": "6bf985fa-ce94-4999-847f-e3c44563bf48",
              "name": "Validate user is unable to get patient file details without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d7e3889b-583e-4b3e-b122-e6f4b34fcbf5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3554c22b-002b-4946-8dbe-7e79cf2354ae"
                  }
                }
              ]
            },
            {
              "id": "5590f9d7-c30d-4dfe-8710-9207e69bb799",
              "name": "Validate user is unable to get patient file details as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07fc5e38-e268-4801-9cef-c13daad40d21",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "53b34036-a8be-43e2-8b71-e75e41ba065f"
                  }
                }
              ]
            },
            {
              "id": "38dfc11f-00f6-4826-9dfd-08e8d0ce831f",
              "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{uid}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a786fb84-6150-413c-a219-36d3c46783b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9a644f40-7ed6-4278-8d6d-4adf8a5f6731"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8557e24c-233e-48a6-95be-b486798e8fee",
          "length": 110,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9e5547a9-79a0-4fe5-b786-e9cf0c7ab117",
          "scriptId": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
          "execution": "2d6292b4-9de5-439d-9365-b5161373863b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)",
          "checksum": "e9b6f4c2cb573367bae653c548920449",
          "id": "c6d33990-208f-4671-88ff-c23c889db870",
          "timestamp": 1718334853824,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 94,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "620fcdcd-0430-4126-ba4e-064960075eee",
          "name": "Validate user is unable to get patient file details with missing required parameter",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "009bf090-c640-4e53-a765-34a5619705a2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a0bb17a5-a6fd-4634-9649-751527b9034f"
              }
            }
          ]
        },
        "parent": {
          "id": "55e497ba-eb6f-45e6-bbf1-43367ba79ad3",
          "name": "Get patient file details",
          "item": [
            {
              "id": "f3e3ac14-e788-4c13-8123-733beba5a850",
              "name": "Validate user is able to get patient file details successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2d6292b4-9de5-439d-9365-b5161373863b"
                  }
                }
              ]
            },
            {
              "id": "620fcdcd-0430-4126-ba4e-064960075eee",
              "name": "Validate user is unable to get patient file details with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "009bf090-c640-4e53-a765-34a5619705a2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a0bb17a5-a6fd-4634-9649-751527b9034f"
                  }
                }
              ]
            },
            {
              "id": "161d83ca-56f2-4a8e-9871-4042d477cc39",
              "name": "Validate user is unable to get patient file details with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e44b52f-de0e-4bc1-89ef-f9704f9145c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9bb4d72d-1022-4830-9338-850e2bf72721"
                  }
                }
              ]
            },
            {
              "id": "6bf985fa-ce94-4999-847f-e3c44563bf48",
              "name": "Validate user is unable to get patient file details without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d7e3889b-583e-4b3e-b122-e6f4b34fcbf5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3554c22b-002b-4946-8dbe-7e79cf2354ae"
                  }
                }
              ]
            },
            {
              "id": "5590f9d7-c30d-4dfe-8710-9207e69bb799",
              "name": "Validate user is unable to get patient file details as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07fc5e38-e268-4801-9cef-c13daad40d21",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "53b34036-a8be-43e2-8b71-e75e41ba065f"
                  }
                }
              ]
            },
            {
              "id": "38dfc11f-00f6-4826-9dfd-08e8d0ce831f",
              "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{uid}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a786fb84-6150-413c-a219-36d3c46783b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9a644f40-7ed6-4278-8d6d-4adf8a5f6731"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f8b0dd84-c31d-4c7b-8546-4dfe976db54b",
          "length": 110,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c61e825c-20c0-4f11-9c39-fea08da736e7",
          "scriptId": "009bf090-c640-4e53-a765-34a5619705a2",
          "execution": "a0bb17a5-a6fd-4634-9649-751527b9034f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:94)",
          "checksum": "a1df5d000855b403ca8522cd68d76873",
          "id": "5ed8dcf2-dcf5-45d6-bd82-5d2e815f87b8",
          "timestamp": 1718334853826,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 94,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "620fcdcd-0430-4126-ba4e-064960075eee",
          "name": "Validate user is unable to get patient file details with missing required parameter",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "009bf090-c640-4e53-a765-34a5619705a2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a0bb17a5-a6fd-4634-9649-751527b9034f"
              }
            }
          ]
        },
        "parent": {
          "id": "55e497ba-eb6f-45e6-bbf1-43367ba79ad3",
          "name": "Get patient file details",
          "item": [
            {
              "id": "f3e3ac14-e788-4c13-8123-733beba5a850",
              "name": "Validate user is able to get patient file details successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2d6292b4-9de5-439d-9365-b5161373863b"
                  }
                }
              ]
            },
            {
              "id": "620fcdcd-0430-4126-ba4e-064960075eee",
              "name": "Validate user is unable to get patient file details with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "009bf090-c640-4e53-a765-34a5619705a2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a0bb17a5-a6fd-4634-9649-751527b9034f"
                  }
                }
              ]
            },
            {
              "id": "161d83ca-56f2-4a8e-9871-4042d477cc39",
              "name": "Validate user is unable to get patient file details with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e44b52f-de0e-4bc1-89ef-f9704f9145c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9bb4d72d-1022-4830-9338-850e2bf72721"
                  }
                }
              ]
            },
            {
              "id": "6bf985fa-ce94-4999-847f-e3c44563bf48",
              "name": "Validate user is unable to get patient file details without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d7e3889b-583e-4b3e-b122-e6f4b34fcbf5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3554c22b-002b-4946-8dbe-7e79cf2354ae"
                  }
                }
              ]
            },
            {
              "id": "5590f9d7-c30d-4dfe-8710-9207e69bb799",
              "name": "Validate user is unable to get patient file details as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07fc5e38-e268-4801-9cef-c13daad40d21",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "53b34036-a8be-43e2-8b71-e75e41ba065f"
                  }
                }
              ]
            },
            {
              "id": "38dfc11f-00f6-4826-9dfd-08e8d0ce831f",
              "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{uid}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a786fb84-6150-413c-a219-36d3c46783b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9a644f40-7ed6-4278-8d6d-4adf8a5f6731"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f8b0dd84-c31d-4c7b-8546-4dfe976db54b",
          "length": 110,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c61e825c-20c0-4f11-9c39-fea08da736e7",
          "scriptId": "009bf090-c640-4e53-a765-34a5619705a2",
          "execution": "a0bb17a5-a6fd-4634-9649-751527b9034f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)",
          "checksum": "ad231de2c4189b159894e3d800579911",
          "id": "24437f11-fb8a-4dc4-b946-8fa93f46685a",
          "timestamp": 1718334854152,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 95,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "161d83ca-56f2-4a8e-9871-4042d477cc39",
          "name": "Validate user is unable to get patient file details with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e44b52f-de0e-4bc1-89ef-f9704f9145c4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "9bb4d72d-1022-4830-9338-850e2bf72721"
              }
            }
          ]
        },
        "parent": {
          "id": "55e497ba-eb6f-45e6-bbf1-43367ba79ad3",
          "name": "Get patient file details",
          "item": [
            {
              "id": "f3e3ac14-e788-4c13-8123-733beba5a850",
              "name": "Validate user is able to get patient file details successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2d6292b4-9de5-439d-9365-b5161373863b"
                  }
                }
              ]
            },
            {
              "id": "620fcdcd-0430-4126-ba4e-064960075eee",
              "name": "Validate user is unable to get patient file details with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "009bf090-c640-4e53-a765-34a5619705a2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a0bb17a5-a6fd-4634-9649-751527b9034f"
                  }
                }
              ]
            },
            {
              "id": "161d83ca-56f2-4a8e-9871-4042d477cc39",
              "name": "Validate user is unable to get patient file details with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e44b52f-de0e-4bc1-89ef-f9704f9145c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9bb4d72d-1022-4830-9338-850e2bf72721"
                  }
                }
              ]
            },
            {
              "id": "6bf985fa-ce94-4999-847f-e3c44563bf48",
              "name": "Validate user is unable to get patient file details without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d7e3889b-583e-4b3e-b122-e6f4b34fcbf5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3554c22b-002b-4946-8dbe-7e79cf2354ae"
                  }
                }
              ]
            },
            {
              "id": "5590f9d7-c30d-4dfe-8710-9207e69bb799",
              "name": "Validate user is unable to get patient file details as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07fc5e38-e268-4801-9cef-c13daad40d21",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "53b34036-a8be-43e2-8b71-e75e41ba065f"
                  }
                }
              ]
            },
            {
              "id": "38dfc11f-00f6-4826-9dfd-08e8d0ce831f",
              "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{uid}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a786fb84-6150-413c-a219-36d3c46783b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9a644f40-7ed6-4278-8d6d-4adf8a5f6731"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "046ea7a1-11c6-4f7e-9e9f-35ad42919282",
          "length": 110,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a010c6de-d165-4426-af3c-9192a788b848",
          "scriptId": "7e44b52f-de0e-4bc1-89ef-f9704f9145c4",
          "execution": "9bb4d72d-1022-4830-9338-850e2bf72721"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:95)",
          "checksum": "7c8c1a97dbf2782bbd0ecac0b26a5928",
          "id": "5f37a50a-1e47-4ff4-bb1f-929884645463",
          "timestamp": 1718334854154,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 95,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "161d83ca-56f2-4a8e-9871-4042d477cc39",
          "name": "Validate user is unable to get patient file details with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e44b52f-de0e-4bc1-89ef-f9704f9145c4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "9bb4d72d-1022-4830-9338-850e2bf72721"
              }
            }
          ]
        },
        "parent": {
          "id": "55e497ba-eb6f-45e6-bbf1-43367ba79ad3",
          "name": "Get patient file details",
          "item": [
            {
              "id": "f3e3ac14-e788-4c13-8123-733beba5a850",
              "name": "Validate user is able to get patient file details successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2d6292b4-9de5-439d-9365-b5161373863b"
                  }
                }
              ]
            },
            {
              "id": "620fcdcd-0430-4126-ba4e-064960075eee",
              "name": "Validate user is unable to get patient file details with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "009bf090-c640-4e53-a765-34a5619705a2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a0bb17a5-a6fd-4634-9649-751527b9034f"
                  }
                }
              ]
            },
            {
              "id": "161d83ca-56f2-4a8e-9871-4042d477cc39",
              "name": "Validate user is unable to get patient file details with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e44b52f-de0e-4bc1-89ef-f9704f9145c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9bb4d72d-1022-4830-9338-850e2bf72721"
                  }
                }
              ]
            },
            {
              "id": "6bf985fa-ce94-4999-847f-e3c44563bf48",
              "name": "Validate user is unable to get patient file details without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d7e3889b-583e-4b3e-b122-e6f4b34fcbf5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3554c22b-002b-4946-8dbe-7e79cf2354ae"
                  }
                }
              ]
            },
            {
              "id": "5590f9d7-c30d-4dfe-8710-9207e69bb799",
              "name": "Validate user is unable to get patient file details as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07fc5e38-e268-4801-9cef-c13daad40d21",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "53b34036-a8be-43e2-8b71-e75e41ba065f"
                  }
                }
              ]
            },
            {
              "id": "38dfc11f-00f6-4826-9dfd-08e8d0ce831f",
              "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{uid}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a786fb84-6150-413c-a219-36d3c46783b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9a644f40-7ed6-4278-8d6d-4adf8a5f6731"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "046ea7a1-11c6-4f7e-9e9f-35ad42919282",
          "length": 110,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a010c6de-d165-4426-af3c-9192a788b848",
          "scriptId": "7e44b52f-de0e-4bc1-89ef-f9704f9145c4",
          "execution": "9bb4d72d-1022-4830-9338-850e2bf72721"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Method Not Allowed'",
          "stack": "AssertionError: expected undefined to deeply equal 'Method Not Allowed'\n   at Object.eval sandbox-script.js:2:98)",
          "checksum": "7109b63dc12df2dd6f59198918dbea7a",
          "id": "a859a344-2f87-4980-8764-c217c0d8ce16",
          "timestamp": 1718334855258,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 98,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "38dfc11f-00f6-4826-9dfd-08e8d0ce831f",
          "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{uid}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a786fb84-6150-413c-a219-36d3c46783b7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "9a644f40-7ed6-4278-8d6d-4adf8a5f6731"
              }
            }
          ]
        },
        "parent": {
          "id": "55e497ba-eb6f-45e6-bbf1-43367ba79ad3",
          "name": "Get patient file details",
          "item": [
            {
              "id": "f3e3ac14-e788-4c13-8123-733beba5a850",
              "name": "Validate user is able to get patient file details successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ea68813-6b29-4eae-ae83-3b78be6b7c14",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2d6292b4-9de5-439d-9365-b5161373863b"
                  }
                }
              ]
            },
            {
              "id": "620fcdcd-0430-4126-ba4e-064960075eee",
              "name": "Validate user is unable to get patient file details with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "009bf090-c640-4e53-a765-34a5619705a2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a0bb17a5-a6fd-4634-9649-751527b9034f"
                  }
                }
              ]
            },
            {
              "id": "161d83ca-56f2-4a8e-9871-4042d477cc39",
              "name": "Validate user is unable to get patient file details with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e44b52f-de0e-4bc1-89ef-f9704f9145c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9bb4d72d-1022-4830-9338-850e2bf72721"
                  }
                }
              ]
            },
            {
              "id": "6bf985fa-ce94-4999-847f-e3c44563bf48",
              "name": "Validate user is unable to get patient file details without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d7e3889b-583e-4b3e-b122-e6f4b34fcbf5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3554c22b-002b-4946-8dbe-7e79cf2354ae"
                  }
                }
              ]
            },
            {
              "id": "5590f9d7-c30d-4dfe-8710-9207e69bb799",
              "name": "Validate user is unable to get patient file details as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "07fc5e38-e268-4801-9cef-c13daad40d21",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "53b34036-a8be-43e2-8b71-e75e41ba065f"
                  }
                }
              ]
            },
            {
              "id": "38dfc11f-00f6-4826-9dfd-08e8d0ce831f",
              "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{uid}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a786fb84-6150-413c-a219-36d3c46783b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "9a644f40-7ed6-4278-8d6d-4adf8a5f6731"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "89e061d4-ea9d-4fae-b828-a6ec6a8e1bb8",
          "length": 110,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d98f096e-25be-4145-8c84-664f3523bf80",
          "scriptId": "a786fb84-6150-413c-a219-36d3c46783b7",
          "execution": "9a644f40-7ed6-4278-8d6d-4adf8a5f6731"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status code is 200",
          "message": "expected 401 to equal 200",
          "stack": "AssertionError: expected 401 to equal 200\n   at Object.eval sandbox-script.js:1:99)",
          "checksum": "1a9acf00199ee285e0e5685210e418dd",
          "id": "6e2b39cb-7657-46d4-8230-a936d9d37fee",
          "timestamp": 1718334855613,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 99,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5fc43fb9-13e7-4713-92fa-2700db894d2c",
          "name": "validate user should be able to remove uploaded files successfully",
          "request": {
            "url": {
              "path": [
                "remove-uploaded-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6ba7d4ed-620b-4978-9ae2-8c67e1ae2cdb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Files removed successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "51bf9136-50d7-485b-af93-f394344cee6a"
              }
            }
          ]
        },
        "parent": {
          "id": "b4ebf5ad-dab6-4013-b5eb-28e0a61b1f0e",
          "name": "Remove uploaded files",
          "item": [
            {
              "id": "5fc43fb9-13e7-4713-92fa-2700db894d2c",
              "name": "validate user should be able to remove uploaded files successfully",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ba7d4ed-620b-4978-9ae2-8c67e1ae2cdb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Files removed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51bf9136-50d7-485b-af93-f394344cee6a"
                  }
                }
              ]
            },
            {
              "id": "a454de77-a235-4c2c-983a-39290e086895",
              "name": "validate user should not be able to remove uploaded files if already removed",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3253a283-f7b4-4078-869d-a36b8c40409b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "989acf2a-251e-4da4-90c3-6c06cb5bb134"
                  }
                }
              ]
            },
            {
              "id": "9220a91e-dbf7-48e0-b32e-2ecbe6551898",
              "name": "validate user should not be able to remove uploaded files without incorrect file path",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c371755e-9a97-4600-bef2-f2d7b48a5e51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ce4fd8e6-647b-4697-8e59-2641e6e6fb0f"
                  }
                }
              ]
            },
            {
              "id": "fb942ac6-874d-421a-b425-321732d96c57",
              "name": "validate user should not be able to remove uploaded files without authorization",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "229ab736-61d8-4ec6-858d-9435506bf1c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3d1fade1-d1c8-4b47-a55d-68c1c6df474e"
                  }
                }
              ]
            },
            {
              "id": "31118503-b23b-4950-9c93-ad16a1030ba2",
              "name": "validate user should not be able to remove uploaded files with incorrect token",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI4M2Q1MjkzNS1hN2RjLTQ4MzYtYmMxYS0yMTY2MWU5YzE0NGQiLCJldmVudF9pZCI6IjliNTkxZTVlLTUxOTUtNGI4Mi1hY2YzLTI3OTllNDZjMDI1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzMTE1NzIsImV4cCI6MTcxODMxNTE3MiwiaWF0IjoxNzE4MzExNTcyLCJqdGkiOiJlMDI3YTNmMS03YzhmLTQ5YjUtYTBhOS1iZThhY2RhZDc4NGEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.hMPOngVxdfUdxzwbcgJjK-2tDFWrLi3gBFQx36qhsULRDGzMda6z4uXDtQEtBdmLRjZyjzoUbr4QlXPMNLetGzk-xTXacB0a4bE24yt4wJ8q2ZaMBDojsykjjyHsB5LpLjIjOMI0pb9YkA7fakWQ_rRkUYVIgRExZfLFh4LmPSPJaEfEv54e_BXz5ojX2KtcLBG_GqTOa-oMRJnzQDF-jM5-gruMZtLCmrDKH2u46bRaKCyJIXXWlEfSyGT5t7PZB8ymp2wFeuZdf0of2CgYXSXFecuwk1T4lmG4BiOBtLcDS9GUy0W9j4iltOSDmulbcAxAEoGbutupjeyJo7l",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d665843b-05c0-4250-a137-05d6c8680651",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2ebbdce0-7382-4acc-8b9d-ec0500963aa6"
                  }
                }
              ]
            },
            {
              "id": "1e6f57fa-37a9-46c4-8603-d29aa0757aef",
              "name": "validate user should not be able to remove uploaded files with incorrect CRUD operation",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8531bec2-c034-40b3-9525-8dc5bde50004",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 405\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(405);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "54a8ac73-bcec-4925-bb9c-82d40d8d2c43"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d571f038-8569-438f-a0f6-9c849d58be74",
          "length": 110,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "373d2920-45bd-46af-a04b-a4f4f8b21ee6",
          "scriptId": "6ba7d4ed-620b-4978-9ae2-8c67e1ae2cdb",
          "execution": "51bf9136-50d7-485b-af93-f394344cee6a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Files removed successfully'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Files removed successfully'\n   at Object.eval sandbox-script.js:2:99)",
          "checksum": "c29dd683c238f8e036825c5c3ebe433d",
          "id": "7c748b61-5358-4cad-beb4-9f5e3e3827c1",
          "timestamp": 1718334855614,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 99,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5fc43fb9-13e7-4713-92fa-2700db894d2c",
          "name": "validate user should be able to remove uploaded files successfully",
          "request": {
            "url": {
              "path": [
                "remove-uploaded-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6ba7d4ed-620b-4978-9ae2-8c67e1ae2cdb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(200);\r",
                  "});\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Files removed successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "51bf9136-50d7-485b-af93-f394344cee6a"
              }
            }
          ]
        },
        "parent": {
          "id": "b4ebf5ad-dab6-4013-b5eb-28e0a61b1f0e",
          "name": "Remove uploaded files",
          "item": [
            {
              "id": "5fc43fb9-13e7-4713-92fa-2700db894d2c",
              "name": "validate user should be able to remove uploaded files successfully",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ba7d4ed-620b-4978-9ae2-8c67e1ae2cdb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Files removed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51bf9136-50d7-485b-af93-f394344cee6a"
                  }
                }
              ]
            },
            {
              "id": "a454de77-a235-4c2c-983a-39290e086895",
              "name": "validate user should not be able to remove uploaded files if already removed",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3253a283-f7b4-4078-869d-a36b8c40409b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "989acf2a-251e-4da4-90c3-6c06cb5bb134"
                  }
                }
              ]
            },
            {
              "id": "9220a91e-dbf7-48e0-b32e-2ecbe6551898",
              "name": "validate user should not be able to remove uploaded files without incorrect file path",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c371755e-9a97-4600-bef2-f2d7b48a5e51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ce4fd8e6-647b-4697-8e59-2641e6e6fb0f"
                  }
                }
              ]
            },
            {
              "id": "fb942ac6-874d-421a-b425-321732d96c57",
              "name": "validate user should not be able to remove uploaded files without authorization",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "229ab736-61d8-4ec6-858d-9435506bf1c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3d1fade1-d1c8-4b47-a55d-68c1c6df474e"
                  }
                }
              ]
            },
            {
              "id": "31118503-b23b-4950-9c93-ad16a1030ba2",
              "name": "validate user should not be able to remove uploaded files with incorrect token",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI4M2Q1MjkzNS1hN2RjLTQ4MzYtYmMxYS0yMTY2MWU5YzE0NGQiLCJldmVudF9pZCI6IjliNTkxZTVlLTUxOTUtNGI4Mi1hY2YzLTI3OTllNDZjMDI1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzMTE1NzIsImV4cCI6MTcxODMxNTE3MiwiaWF0IjoxNzE4MzExNTcyLCJqdGkiOiJlMDI3YTNmMS03YzhmLTQ5YjUtYTBhOS1iZThhY2RhZDc4NGEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.hMPOngVxdfUdxzwbcgJjK-2tDFWrLi3gBFQx36qhsULRDGzMda6z4uXDtQEtBdmLRjZyjzoUbr4QlXPMNLetGzk-xTXacB0a4bE24yt4wJ8q2ZaMBDojsykjjyHsB5LpLjIjOMI0pb9YkA7fakWQ_rRkUYVIgRExZfLFh4LmPSPJaEfEv54e_BXz5ojX2KtcLBG_GqTOa-oMRJnzQDF-jM5-gruMZtLCmrDKH2u46bRaKCyJIXXWlEfSyGT5t7PZB8ymp2wFeuZdf0of2CgYXSXFecuwk1T4lmG4BiOBtLcDS9GUy0W9j4iltOSDmulbcAxAEoGbutupjeyJo7l",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d665843b-05c0-4250-a137-05d6c8680651",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2ebbdce0-7382-4acc-8b9d-ec0500963aa6"
                  }
                }
              ]
            },
            {
              "id": "1e6f57fa-37a9-46c4-8603-d29aa0757aef",
              "name": "validate user should not be able to remove uploaded files with incorrect CRUD operation",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8531bec2-c034-40b3-9525-8dc5bde50004",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 405\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(405);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "54a8ac73-bcec-4925-bb9c-82d40d8d2c43"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d571f038-8569-438f-a0f6-9c849d58be74",
          "length": 110,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "373d2920-45bd-46af-a04b-a4f4f8b21ee6",
          "scriptId": "6ba7d4ed-620b-4978-9ae2-8c67e1ae2cdb",
          "execution": "51bf9136-50d7-485b-af93-f394344cee6a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status code is 400",
          "message": "expected 401 to equal 400",
          "stack": "AssertionError: expected 401 to equal 400\n   at Object.eval sandbox-script.js:1:100)",
          "checksum": "d82d2d5b2b6f58f1a5554b834207ee4f",
          "id": "1f734b47-2f4b-401f-84e1-a050d7895804",
          "timestamp": 1718334855990,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 100,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a454de77-a235-4c2c-983a-39290e086895",
          "name": "validate user should not be able to remove uploaded files if already removed",
          "request": {
            "url": {
              "path": [
                "remove-uploaded-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3253a283-f7b4-4078-869d-a36b8c40409b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 400\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(400);\r",
                  "});\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                  "});"
                ],
                "_lastExecutionId": "989acf2a-251e-4da4-90c3-6c06cb5bb134"
              }
            }
          ]
        },
        "parent": {
          "id": "b4ebf5ad-dab6-4013-b5eb-28e0a61b1f0e",
          "name": "Remove uploaded files",
          "item": [
            {
              "id": "5fc43fb9-13e7-4713-92fa-2700db894d2c",
              "name": "validate user should be able to remove uploaded files successfully",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ba7d4ed-620b-4978-9ae2-8c67e1ae2cdb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Files removed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51bf9136-50d7-485b-af93-f394344cee6a"
                  }
                }
              ]
            },
            {
              "id": "a454de77-a235-4c2c-983a-39290e086895",
              "name": "validate user should not be able to remove uploaded files if already removed",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3253a283-f7b4-4078-869d-a36b8c40409b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "989acf2a-251e-4da4-90c3-6c06cb5bb134"
                  }
                }
              ]
            },
            {
              "id": "9220a91e-dbf7-48e0-b32e-2ecbe6551898",
              "name": "validate user should not be able to remove uploaded files without incorrect file path",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c371755e-9a97-4600-bef2-f2d7b48a5e51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ce4fd8e6-647b-4697-8e59-2641e6e6fb0f"
                  }
                }
              ]
            },
            {
              "id": "fb942ac6-874d-421a-b425-321732d96c57",
              "name": "validate user should not be able to remove uploaded files without authorization",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "229ab736-61d8-4ec6-858d-9435506bf1c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3d1fade1-d1c8-4b47-a55d-68c1c6df474e"
                  }
                }
              ]
            },
            {
              "id": "31118503-b23b-4950-9c93-ad16a1030ba2",
              "name": "validate user should not be able to remove uploaded files with incorrect token",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI4M2Q1MjkzNS1hN2RjLTQ4MzYtYmMxYS0yMTY2MWU5YzE0NGQiLCJldmVudF9pZCI6IjliNTkxZTVlLTUxOTUtNGI4Mi1hY2YzLTI3OTllNDZjMDI1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzMTE1NzIsImV4cCI6MTcxODMxNTE3MiwiaWF0IjoxNzE4MzExNTcyLCJqdGkiOiJlMDI3YTNmMS03YzhmLTQ5YjUtYTBhOS1iZThhY2RhZDc4NGEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.hMPOngVxdfUdxzwbcgJjK-2tDFWrLi3gBFQx36qhsULRDGzMda6z4uXDtQEtBdmLRjZyjzoUbr4QlXPMNLetGzk-xTXacB0a4bE24yt4wJ8q2ZaMBDojsykjjyHsB5LpLjIjOMI0pb9YkA7fakWQ_rRkUYVIgRExZfLFh4LmPSPJaEfEv54e_BXz5ojX2KtcLBG_GqTOa-oMRJnzQDF-jM5-gruMZtLCmrDKH2u46bRaKCyJIXXWlEfSyGT5t7PZB8ymp2wFeuZdf0of2CgYXSXFecuwk1T4lmG4BiOBtLcDS9GUy0W9j4iltOSDmulbcAxAEoGbutupjeyJo7l",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d665843b-05c0-4250-a137-05d6c8680651",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2ebbdce0-7382-4acc-8b9d-ec0500963aa6"
                  }
                }
              ]
            },
            {
              "id": "1e6f57fa-37a9-46c4-8603-d29aa0757aef",
              "name": "validate user should not be able to remove uploaded files with incorrect CRUD operation",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8531bec2-c034-40b3-9525-8dc5bde50004",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 405\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(405);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "54a8ac73-bcec-4925-bb9c-82d40d8d2c43"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "43c7cd33-2920-41e7-8af5-e10a77651755",
          "length": 110,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "09398115-a118-4287-a177-8170c9db6c85",
          "scriptId": "3253a283-f7b4-4078-869d-a36b8c40409b",
          "execution": "989acf2a-251e-4da4-90c3-6c06cb5bb134"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Error while removing files'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Error while removing files'\n   at Object.eval sandbox-script.js:2:100)",
          "checksum": "7b82924d17a18fdb7054cbb377fad412",
          "id": "d85de1a3-5070-49f4-b00b-d924e7b63a88",
          "timestamp": 1718334855991,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 100,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a454de77-a235-4c2c-983a-39290e086895",
          "name": "validate user should not be able to remove uploaded files if already removed",
          "request": {
            "url": {
              "path": [
                "remove-uploaded-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3253a283-f7b4-4078-869d-a36b8c40409b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 400\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(400);\r",
                  "});\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                  "});"
                ],
                "_lastExecutionId": "989acf2a-251e-4da4-90c3-6c06cb5bb134"
              }
            }
          ]
        },
        "parent": {
          "id": "b4ebf5ad-dab6-4013-b5eb-28e0a61b1f0e",
          "name": "Remove uploaded files",
          "item": [
            {
              "id": "5fc43fb9-13e7-4713-92fa-2700db894d2c",
              "name": "validate user should be able to remove uploaded files successfully",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ba7d4ed-620b-4978-9ae2-8c67e1ae2cdb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Files removed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51bf9136-50d7-485b-af93-f394344cee6a"
                  }
                }
              ]
            },
            {
              "id": "a454de77-a235-4c2c-983a-39290e086895",
              "name": "validate user should not be able to remove uploaded files if already removed",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3253a283-f7b4-4078-869d-a36b8c40409b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "989acf2a-251e-4da4-90c3-6c06cb5bb134"
                  }
                }
              ]
            },
            {
              "id": "9220a91e-dbf7-48e0-b32e-2ecbe6551898",
              "name": "validate user should not be able to remove uploaded files without incorrect file path",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c371755e-9a97-4600-bef2-f2d7b48a5e51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ce4fd8e6-647b-4697-8e59-2641e6e6fb0f"
                  }
                }
              ]
            },
            {
              "id": "fb942ac6-874d-421a-b425-321732d96c57",
              "name": "validate user should not be able to remove uploaded files without authorization",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "229ab736-61d8-4ec6-858d-9435506bf1c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3d1fade1-d1c8-4b47-a55d-68c1c6df474e"
                  }
                }
              ]
            },
            {
              "id": "31118503-b23b-4950-9c93-ad16a1030ba2",
              "name": "validate user should not be able to remove uploaded files with incorrect token",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI4M2Q1MjkzNS1hN2RjLTQ4MzYtYmMxYS0yMTY2MWU5YzE0NGQiLCJldmVudF9pZCI6IjliNTkxZTVlLTUxOTUtNGI4Mi1hY2YzLTI3OTllNDZjMDI1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzMTE1NzIsImV4cCI6MTcxODMxNTE3MiwiaWF0IjoxNzE4MzExNTcyLCJqdGkiOiJlMDI3YTNmMS03YzhmLTQ5YjUtYTBhOS1iZThhY2RhZDc4NGEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.hMPOngVxdfUdxzwbcgJjK-2tDFWrLi3gBFQx36qhsULRDGzMda6z4uXDtQEtBdmLRjZyjzoUbr4QlXPMNLetGzk-xTXacB0a4bE24yt4wJ8q2ZaMBDojsykjjyHsB5LpLjIjOMI0pb9YkA7fakWQ_rRkUYVIgRExZfLFh4LmPSPJaEfEv54e_BXz5ojX2KtcLBG_GqTOa-oMRJnzQDF-jM5-gruMZtLCmrDKH2u46bRaKCyJIXXWlEfSyGT5t7PZB8ymp2wFeuZdf0of2CgYXSXFecuwk1T4lmG4BiOBtLcDS9GUy0W9j4iltOSDmulbcAxAEoGbutupjeyJo7l",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d665843b-05c0-4250-a137-05d6c8680651",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2ebbdce0-7382-4acc-8b9d-ec0500963aa6"
                  }
                }
              ]
            },
            {
              "id": "1e6f57fa-37a9-46c4-8603-d29aa0757aef",
              "name": "validate user should not be able to remove uploaded files with incorrect CRUD operation",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8531bec2-c034-40b3-9525-8dc5bde50004",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 405\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(405);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "54a8ac73-bcec-4925-bb9c-82d40d8d2c43"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "43c7cd33-2920-41e7-8af5-e10a77651755",
          "length": 110,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "09398115-a118-4287-a177-8170c9db6c85",
          "scriptId": "3253a283-f7b4-4078-869d-a36b8c40409b",
          "execution": "989acf2a-251e-4da4-90c3-6c06cb5bb134"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status code is 400",
          "message": "expected 401 to equal 400",
          "stack": "AssertionError: expected 401 to equal 400\n   at Object.eval sandbox-script.js:1:101)",
          "checksum": "33c739db35d9a4a1ccdc197cb23dae42",
          "id": "a470fd22-8480-48ba-a43e-f38f5fda363c",
          "timestamp": 1718334856338,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 101,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9220a91e-dbf7-48e0-b32e-2ecbe6551898",
          "name": "validate user should not be able to remove uploaded files without incorrect file path",
          "request": {
            "url": {
              "path": [
                "remove-uploaded-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"file_path\": \"\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c371755e-9a97-4600-bef2-f2d7b48a5e51",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 400\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(400);\r",
                  "});\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                  "});"
                ],
                "_lastExecutionId": "ce4fd8e6-647b-4697-8e59-2641e6e6fb0f"
              }
            }
          ]
        },
        "parent": {
          "id": "b4ebf5ad-dab6-4013-b5eb-28e0a61b1f0e",
          "name": "Remove uploaded files",
          "item": [
            {
              "id": "5fc43fb9-13e7-4713-92fa-2700db894d2c",
              "name": "validate user should be able to remove uploaded files successfully",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ba7d4ed-620b-4978-9ae2-8c67e1ae2cdb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Files removed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51bf9136-50d7-485b-af93-f394344cee6a"
                  }
                }
              ]
            },
            {
              "id": "a454de77-a235-4c2c-983a-39290e086895",
              "name": "validate user should not be able to remove uploaded files if already removed",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3253a283-f7b4-4078-869d-a36b8c40409b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "989acf2a-251e-4da4-90c3-6c06cb5bb134"
                  }
                }
              ]
            },
            {
              "id": "9220a91e-dbf7-48e0-b32e-2ecbe6551898",
              "name": "validate user should not be able to remove uploaded files without incorrect file path",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c371755e-9a97-4600-bef2-f2d7b48a5e51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ce4fd8e6-647b-4697-8e59-2641e6e6fb0f"
                  }
                }
              ]
            },
            {
              "id": "fb942ac6-874d-421a-b425-321732d96c57",
              "name": "validate user should not be able to remove uploaded files without authorization",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "229ab736-61d8-4ec6-858d-9435506bf1c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3d1fade1-d1c8-4b47-a55d-68c1c6df474e"
                  }
                }
              ]
            },
            {
              "id": "31118503-b23b-4950-9c93-ad16a1030ba2",
              "name": "validate user should not be able to remove uploaded files with incorrect token",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI4M2Q1MjkzNS1hN2RjLTQ4MzYtYmMxYS0yMTY2MWU5YzE0NGQiLCJldmVudF9pZCI6IjliNTkxZTVlLTUxOTUtNGI4Mi1hY2YzLTI3OTllNDZjMDI1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzMTE1NzIsImV4cCI6MTcxODMxNTE3MiwiaWF0IjoxNzE4MzExNTcyLCJqdGkiOiJlMDI3YTNmMS03YzhmLTQ5YjUtYTBhOS1iZThhY2RhZDc4NGEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.hMPOngVxdfUdxzwbcgJjK-2tDFWrLi3gBFQx36qhsULRDGzMda6z4uXDtQEtBdmLRjZyjzoUbr4QlXPMNLetGzk-xTXacB0a4bE24yt4wJ8q2ZaMBDojsykjjyHsB5LpLjIjOMI0pb9YkA7fakWQ_rRkUYVIgRExZfLFh4LmPSPJaEfEv54e_BXz5ojX2KtcLBG_GqTOa-oMRJnzQDF-jM5-gruMZtLCmrDKH2u46bRaKCyJIXXWlEfSyGT5t7PZB8ymp2wFeuZdf0of2CgYXSXFecuwk1T4lmG4BiOBtLcDS9GUy0W9j4iltOSDmulbcAxAEoGbutupjeyJo7l",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d665843b-05c0-4250-a137-05d6c8680651",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2ebbdce0-7382-4acc-8b9d-ec0500963aa6"
                  }
                }
              ]
            },
            {
              "id": "1e6f57fa-37a9-46c4-8603-d29aa0757aef",
              "name": "validate user should not be able to remove uploaded files with incorrect CRUD operation",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8531bec2-c034-40b3-9525-8dc5bde50004",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 405\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(405);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "54a8ac73-bcec-4925-bb9c-82d40d8d2c43"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d80ed61d-5ead-466d-9c40-4c9781405099",
          "length": 110,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d5054beb-7eb0-4af8-a2ab-389985048cfd",
          "scriptId": "c371755e-9a97-4600-bef2-f2d7b48a5e51",
          "execution": "ce4fd8e6-647b-4697-8e59-2641e6e6fb0f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Missing required fields'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Missing required fields'\n   at Object.eval sandbox-script.js:2:101)",
          "checksum": "fe430f4ef111bffe22902a8fe9179d2e",
          "id": "62ffb3e8-d519-4286-8e15-04f5a4bff491",
          "timestamp": 1718334856340,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 101,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9220a91e-dbf7-48e0-b32e-2ecbe6551898",
          "name": "validate user should not be able to remove uploaded files without incorrect file path",
          "request": {
            "url": {
              "path": [
                "remove-uploaded-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"file_path\": \"\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c371755e-9a97-4600-bef2-f2d7b48a5e51",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 400\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(400);\r",
                  "});\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                  "});"
                ],
                "_lastExecutionId": "ce4fd8e6-647b-4697-8e59-2641e6e6fb0f"
              }
            }
          ]
        },
        "parent": {
          "id": "b4ebf5ad-dab6-4013-b5eb-28e0a61b1f0e",
          "name": "Remove uploaded files",
          "item": [
            {
              "id": "5fc43fb9-13e7-4713-92fa-2700db894d2c",
              "name": "validate user should be able to remove uploaded files successfully",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ba7d4ed-620b-4978-9ae2-8c67e1ae2cdb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Files removed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51bf9136-50d7-485b-af93-f394344cee6a"
                  }
                }
              ]
            },
            {
              "id": "a454de77-a235-4c2c-983a-39290e086895",
              "name": "validate user should not be able to remove uploaded files if already removed",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3253a283-f7b4-4078-869d-a36b8c40409b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "989acf2a-251e-4da4-90c3-6c06cb5bb134"
                  }
                }
              ]
            },
            {
              "id": "9220a91e-dbf7-48e0-b32e-2ecbe6551898",
              "name": "validate user should not be able to remove uploaded files without incorrect file path",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c371755e-9a97-4600-bef2-f2d7b48a5e51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ce4fd8e6-647b-4697-8e59-2641e6e6fb0f"
                  }
                }
              ]
            },
            {
              "id": "fb942ac6-874d-421a-b425-321732d96c57",
              "name": "validate user should not be able to remove uploaded files without authorization",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "229ab736-61d8-4ec6-858d-9435506bf1c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3d1fade1-d1c8-4b47-a55d-68c1c6df474e"
                  }
                }
              ]
            },
            {
              "id": "31118503-b23b-4950-9c93-ad16a1030ba2",
              "name": "validate user should not be able to remove uploaded files with incorrect token",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI4M2Q1MjkzNS1hN2RjLTQ4MzYtYmMxYS0yMTY2MWU5YzE0NGQiLCJldmVudF9pZCI6IjliNTkxZTVlLTUxOTUtNGI4Mi1hY2YzLTI3OTllNDZjMDI1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzMTE1NzIsImV4cCI6MTcxODMxNTE3MiwiaWF0IjoxNzE4MzExNTcyLCJqdGkiOiJlMDI3YTNmMS03YzhmLTQ5YjUtYTBhOS1iZThhY2RhZDc4NGEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.hMPOngVxdfUdxzwbcgJjK-2tDFWrLi3gBFQx36qhsULRDGzMda6z4uXDtQEtBdmLRjZyjzoUbr4QlXPMNLetGzk-xTXacB0a4bE24yt4wJ8q2ZaMBDojsykjjyHsB5LpLjIjOMI0pb9YkA7fakWQ_rRkUYVIgRExZfLFh4LmPSPJaEfEv54e_BXz5ojX2KtcLBG_GqTOa-oMRJnzQDF-jM5-gruMZtLCmrDKH2u46bRaKCyJIXXWlEfSyGT5t7PZB8ymp2wFeuZdf0of2CgYXSXFecuwk1T4lmG4BiOBtLcDS9GUy0W9j4iltOSDmulbcAxAEoGbutupjeyJo7l",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d665843b-05c0-4250-a137-05d6c8680651",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2ebbdce0-7382-4acc-8b9d-ec0500963aa6"
                  }
                }
              ]
            },
            {
              "id": "1e6f57fa-37a9-46c4-8603-d29aa0757aef",
              "name": "validate user should not be able to remove uploaded files with incorrect CRUD operation",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8531bec2-c034-40b3-9525-8dc5bde50004",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 405\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(405);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "54a8ac73-bcec-4925-bb9c-82d40d8d2c43"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d80ed61d-5ead-466d-9c40-4c9781405099",
          "length": 110,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d5054beb-7eb0-4af8-a2ab-389985048cfd",
          "scriptId": "c371755e-9a97-4600-bef2-f2d7b48a5e51",
          "execution": "ce4fd8e6-647b-4697-8e59-2641e6e6fb0f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Method Not Allowed'",
          "stack": "AssertionError: expected undefined to deeply equal 'Method Not Allowed'\n   at Object.eval sandbox-script.js:2:104)",
          "checksum": "60543bbdce7a61e960c6bd5429403ae7",
          "id": "d57cdad9-d439-44dc-8a3d-4dfb3203eac5",
          "timestamp": 1718334857533,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 104,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1e6f57fa-37a9-46c4-8603-d29aa0757aef",
          "name": "validate user should not be able to remove uploaded files with incorrect CRUD operation",
          "request": {
            "url": {
              "path": [
                "remove-uploaded-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8531bec2-c034-40b3-9525-8dc5bde50004",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 405\", function () {\r",
                  "    pm.expect(pm.response.code).to.equal(405);\r",
                  "});\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "54a8ac73-bcec-4925-bb9c-82d40d8d2c43"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "b4ebf5ad-dab6-4013-b5eb-28e0a61b1f0e",
          "name": "Remove uploaded files",
          "item": [
            {
              "id": "5fc43fb9-13e7-4713-92fa-2700db894d2c",
              "name": "validate user should be able to remove uploaded files successfully",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ba7d4ed-620b-4978-9ae2-8c67e1ae2cdb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Files removed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "51bf9136-50d7-485b-af93-f394344cee6a"
                  }
                }
              ]
            },
            {
              "id": "a454de77-a235-4c2c-983a-39290e086895",
              "name": "validate user should not be able to remove uploaded files if already removed",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3253a283-f7b4-4078-869d-a36b8c40409b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "989acf2a-251e-4da4-90c3-6c06cb5bb134"
                  }
                }
              ]
            },
            {
              "id": "9220a91e-dbf7-48e0-b32e-2ecbe6551898",
              "name": "validate user should not be able to remove uploaded files without incorrect file path",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c371755e-9a97-4600-bef2-f2d7b48a5e51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(400);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ce4fd8e6-647b-4697-8e59-2641e6e6fb0f"
                  }
                }
              ]
            },
            {
              "id": "fb942ac6-874d-421a-b425-321732d96c57",
              "name": "validate user should not be able to remove uploaded files without authorization",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "229ab736-61d8-4ec6-858d-9435506bf1c9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3d1fade1-d1c8-4b47-a55d-68c1c6df474e"
                  }
                }
              ]
            },
            {
              "id": "31118503-b23b-4950-9c93-ad16a1030ba2",
              "name": "validate user should not be able to remove uploaded files with incorrect token",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\r\n{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI4M2Q1MjkzNS1hN2RjLTQ4MzYtYmMxYS0yMTY2MWU5YzE0NGQiLCJldmVudF9pZCI6IjliNTkxZTVlLTUxOTUtNGI4Mi1hY2YzLTI3OTllNDZjMDI1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzMTE1NzIsImV4cCI6MTcxODMxNTE3MiwiaWF0IjoxNzE4MzExNTcyLCJqdGkiOiJlMDI3YTNmMS03YzhmLTQ5YjUtYTBhOS1iZThhY2RhZDc4NGEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.hMPOngVxdfUdxzwbcgJjK-2tDFWrLi3gBFQx36qhsULRDGzMda6z4uXDtQEtBdmLRjZyjzoUbr4QlXPMNLetGzk-xTXacB0a4bE24yt4wJ8q2ZaMBDojsykjjyHsB5LpLjIjOMI0pb9YkA7fakWQ_rRkUYVIgRExZfLFh4LmPSPJaEfEv54e_BXz5ojX2KtcLBG_GqTOa-oMRJnzQDF-jM5-gruMZtLCmrDKH2u46bRaKCyJIXXWlEfSyGT5t7PZB8ymp2wFeuZdf0of2CgYXSXFecuwk1T4lmG4BiOBtLcDS9GUy0W9j4iltOSDmulbcAxAEoGbutupjeyJo7l",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d665843b-05c0-4250-a137-05d6c8680651",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 401\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(401);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2ebbdce0-7382-4acc-8b9d-ec0500963aa6"
                  }
                }
              ]
            },
            {
              "id": "1e6f57fa-37a9-46c4-8603-d29aa0757aef",
              "name": "validate user should not be able to remove uploaded files with incorrect CRUD operation",
              "request": {
                "url": {
                  "path": [
                    "remove-uploaded-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"file_path\": \"{{file_url}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8531bec2-c034-40b3-9525-8dc5bde50004",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 405\", function () {\r",
                      "    pm.expect(pm.response.code).to.equal(405);\r",
                      "});\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "54a8ac73-bcec-4925-bb9c-82d40d8d2c43"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e4f456e9-384c-427b-b60c-035e5b96e445",
          "length": 110,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a09d0260-3cf7-47a0-b863-80199ae3fa2a",
          "scriptId": "8531bec2-c034-40b3-9525-8dc5bde50004",
          "execution": "54a8ac73-bcec-4925-bb9c-82d40d8d2c43"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:105)",
          "checksum": "cf4124140b523190d954349c5de1cd03",
          "id": "e4fdbe6d-1e9b-446b-8ea6-23edcf317b54",
          "timestamp": 1718334858145,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 105,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d23c770c-245f-41c0-9324-21a2117fe336",
          "name": "Validate user is able to delete Patient's data successfully",
          "request": {
            "url": {
              "path": [
                "delete-patient",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab81cd1c-ac92-4335-8bbd-6db4c7435a02",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient deleted successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "36726ce7-8b77-48f3-9953-5f056f34c10b"
              }
            }
          ]
        },
        "parent": {
          "id": "2152d56b-1f91-447a-b2ae-737b8cb48421",
          "name": "Deletes the information of Patient's data",
          "item": [
            {
              "id": "d23c770c-245f-41c0-9324-21a2117fe336",
              "name": "Validate user is able to delete Patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab81cd1c-ac92-4335-8bbd-6db4c7435a02",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient deleted successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36726ce7-8b77-48f3-9953-5f056f34c10b"
                  }
                }
              ]
            },
            {
              "id": "5a5c5e87-10d8-47b2-837f-8abdf7a3a9f4",
              "name": "Validate user is not able to delete Patient's data if already deleted.",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d4cdbb09-2eae-4220-a330-3f4d98e9e6ff",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "05c70fb3-4b28-4d81-8373-72f2f0f1546d"
                  }
                }
              ]
            },
            {
              "id": "93b156b3-5440-404f-af67-7d4972b7a946",
              "name": "Validate user is unable to delete Patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9642083-43b2-4e1f-aa35-a64b1be4a35d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "bf5bdfe5-6cac-47de-a131-ee0cd78fb5b5"
                  }
                }
              ]
            },
            {
              "id": "f1db8312-6013-42a9-916b-f19a2dadb6b4",
              "name": "Validate user is unable to delete Patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73e07a7a-4a5f-4f4f-84b9-2b401dcc64b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f90ea6ee-c6ac-4839-bee9-b454358bfc13"
                  }
                }
              ]
            },
            {
              "id": "4c1e823b-a22d-4a1f-b368-e4e2f76876fd",
              "name": "Validate user is unable to delete Patient's data as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcbcaca8-de5f-4423-a911-d180257ebc54",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4d39ccab-8244-4f5f-9300-ee525c4e8be1"
                  }
                }
              ]
            },
            {
              "id": "fd4e77bc-bb4f-4ca3-909b-9c611eb1aa3e",
              "name": "Validate user is unable to delete Patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f859699-4e10-4391-a113-e43f6b1f174a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "78a6b668-f1c0-48a1-b16f-bb14c3e32730"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f360d8e4-66e5-40b1-8489-f9250edfff67",
          "length": 110,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3269f7a6-b340-4c50-bfa5-245cf20f5dc9",
          "scriptId": "ab81cd1c-ac92-4335-8bbd-6db4c7435a02",
          "execution": "36726ce7-8b77-48f3-9953-5f056f34c10b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Patient deleted successfully'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Patient deleted successfully'\n   at Object.eval sandbox-script.js:2:105)",
          "checksum": "b774d0903d2d69784e1f0d56adb1bb3b",
          "id": "fc101a0c-e76f-4070-8316-b975728fcb4b",
          "timestamp": 1718334858147,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 105,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d23c770c-245f-41c0-9324-21a2117fe336",
          "name": "Validate user is able to delete Patient's data successfully",
          "request": {
            "url": {
              "path": [
                "delete-patient",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab81cd1c-ac92-4335-8bbd-6db4c7435a02",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient deleted successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "36726ce7-8b77-48f3-9953-5f056f34c10b"
              }
            }
          ]
        },
        "parent": {
          "id": "2152d56b-1f91-447a-b2ae-737b8cb48421",
          "name": "Deletes the information of Patient's data",
          "item": [
            {
              "id": "d23c770c-245f-41c0-9324-21a2117fe336",
              "name": "Validate user is able to delete Patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab81cd1c-ac92-4335-8bbd-6db4c7435a02",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient deleted successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36726ce7-8b77-48f3-9953-5f056f34c10b"
                  }
                }
              ]
            },
            {
              "id": "5a5c5e87-10d8-47b2-837f-8abdf7a3a9f4",
              "name": "Validate user is not able to delete Patient's data if already deleted.",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d4cdbb09-2eae-4220-a330-3f4d98e9e6ff",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "05c70fb3-4b28-4d81-8373-72f2f0f1546d"
                  }
                }
              ]
            },
            {
              "id": "93b156b3-5440-404f-af67-7d4972b7a946",
              "name": "Validate user is unable to delete Patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9642083-43b2-4e1f-aa35-a64b1be4a35d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "bf5bdfe5-6cac-47de-a131-ee0cd78fb5b5"
                  }
                }
              ]
            },
            {
              "id": "f1db8312-6013-42a9-916b-f19a2dadb6b4",
              "name": "Validate user is unable to delete Patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73e07a7a-4a5f-4f4f-84b9-2b401dcc64b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f90ea6ee-c6ac-4839-bee9-b454358bfc13"
                  }
                }
              ]
            },
            {
              "id": "4c1e823b-a22d-4a1f-b368-e4e2f76876fd",
              "name": "Validate user is unable to delete Patient's data as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcbcaca8-de5f-4423-a911-d180257ebc54",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4d39ccab-8244-4f5f-9300-ee525c4e8be1"
                  }
                }
              ]
            },
            {
              "id": "fd4e77bc-bb4f-4ca3-909b-9c611eb1aa3e",
              "name": "Validate user is unable to delete Patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f859699-4e10-4391-a113-e43f6b1f174a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "78a6b668-f1c0-48a1-b16f-bb14c3e32730"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f360d8e4-66e5-40b1-8489-f9250edfff67",
          "length": 110,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3269f7a6-b340-4c50-bfa5-245cf20f5dc9",
          "scriptId": "ab81cd1c-ac92-4335-8bbd-6db4c7435a02",
          "execution": "36726ce7-8b77-48f3-9953-5f056f34c10b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:106)",
          "checksum": "0891538755e110f3bee4bdc16f9a7a07",
          "id": "169ae278-8298-417e-b7b4-8142a956af2c",
          "timestamp": 1718334859018,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 106,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5a5c5e87-10d8-47b2-837f-8abdf7a3a9f4",
          "name": "Validate user is not able to delete Patient's data if already deleted.",
          "request": {
            "url": {
              "path": [
                "delete-patient",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d4cdbb09-2eae-4220-a330-3f4d98e9e6ff",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                  "});"
                ],
                "_lastExecutionId": "05c70fb3-4b28-4d81-8373-72f2f0f1546d"
              }
            }
          ]
        },
        "parent": {
          "id": "2152d56b-1f91-447a-b2ae-737b8cb48421",
          "name": "Deletes the information of Patient's data",
          "item": [
            {
              "id": "d23c770c-245f-41c0-9324-21a2117fe336",
              "name": "Validate user is able to delete Patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab81cd1c-ac92-4335-8bbd-6db4c7435a02",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient deleted successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36726ce7-8b77-48f3-9953-5f056f34c10b"
                  }
                }
              ]
            },
            {
              "id": "5a5c5e87-10d8-47b2-837f-8abdf7a3a9f4",
              "name": "Validate user is not able to delete Patient's data if already deleted.",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d4cdbb09-2eae-4220-a330-3f4d98e9e6ff",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "05c70fb3-4b28-4d81-8373-72f2f0f1546d"
                  }
                }
              ]
            },
            {
              "id": "93b156b3-5440-404f-af67-7d4972b7a946",
              "name": "Validate user is unable to delete Patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9642083-43b2-4e1f-aa35-a64b1be4a35d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "bf5bdfe5-6cac-47de-a131-ee0cd78fb5b5"
                  }
                }
              ]
            },
            {
              "id": "f1db8312-6013-42a9-916b-f19a2dadb6b4",
              "name": "Validate user is unable to delete Patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73e07a7a-4a5f-4f4f-84b9-2b401dcc64b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f90ea6ee-c6ac-4839-bee9-b454358bfc13"
                  }
                }
              ]
            },
            {
              "id": "4c1e823b-a22d-4a1f-b368-e4e2f76876fd",
              "name": "Validate user is unable to delete Patient's data as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcbcaca8-de5f-4423-a911-d180257ebc54",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4d39ccab-8244-4f5f-9300-ee525c4e8be1"
                  }
                }
              ]
            },
            {
              "id": "fd4e77bc-bb4f-4ca3-909b-9c611eb1aa3e",
              "name": "Validate user is unable to delete Patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f859699-4e10-4391-a113-e43f6b1f174a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "78a6b668-f1c0-48a1-b16f-bb14c3e32730"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3dd842b0-651d-443e-8dab-51a127e09b4e",
          "length": 110,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c0fac205-3931-44d5-b533-2285df64fffe",
          "scriptId": "d4cdbb09-2eae-4220-a330-3f4d98e9e6ff",
          "execution": "05c70fb3-4b28-4d81-8373-72f2f0f1546d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Invalid id'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Invalid id'\n   at Object.eval sandbox-script.js:2:106)",
          "checksum": "68c125df4899d03efc0140bb2e30f8f1",
          "id": "83848a7a-4c34-4a51-9544-512e7042d4e7",
          "timestamp": 1718334859019,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 106,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5a5c5e87-10d8-47b2-837f-8abdf7a3a9f4",
          "name": "Validate user is not able to delete Patient's data if already deleted.",
          "request": {
            "url": {
              "path": [
                "delete-patient",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d4cdbb09-2eae-4220-a330-3f4d98e9e6ff",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                  "});"
                ],
                "_lastExecutionId": "05c70fb3-4b28-4d81-8373-72f2f0f1546d"
              }
            }
          ]
        },
        "parent": {
          "id": "2152d56b-1f91-447a-b2ae-737b8cb48421",
          "name": "Deletes the information of Patient's data",
          "item": [
            {
              "id": "d23c770c-245f-41c0-9324-21a2117fe336",
              "name": "Validate user is able to delete Patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab81cd1c-ac92-4335-8bbd-6db4c7435a02",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient deleted successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36726ce7-8b77-48f3-9953-5f056f34c10b"
                  }
                }
              ]
            },
            {
              "id": "5a5c5e87-10d8-47b2-837f-8abdf7a3a9f4",
              "name": "Validate user is not able to delete Patient's data if already deleted.",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d4cdbb09-2eae-4220-a330-3f4d98e9e6ff",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "05c70fb3-4b28-4d81-8373-72f2f0f1546d"
                  }
                }
              ]
            },
            {
              "id": "93b156b3-5440-404f-af67-7d4972b7a946",
              "name": "Validate user is unable to delete Patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9642083-43b2-4e1f-aa35-a64b1be4a35d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "bf5bdfe5-6cac-47de-a131-ee0cd78fb5b5"
                  }
                }
              ]
            },
            {
              "id": "f1db8312-6013-42a9-916b-f19a2dadb6b4",
              "name": "Validate user is unable to delete Patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73e07a7a-4a5f-4f4f-84b9-2b401dcc64b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f90ea6ee-c6ac-4839-bee9-b454358bfc13"
                  }
                }
              ]
            },
            {
              "id": "4c1e823b-a22d-4a1f-b368-e4e2f76876fd",
              "name": "Validate user is unable to delete Patient's data as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcbcaca8-de5f-4423-a911-d180257ebc54",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4d39ccab-8244-4f5f-9300-ee525c4e8be1"
                  }
                }
              ]
            },
            {
              "id": "fd4e77bc-bb4f-4ca3-909b-9c611eb1aa3e",
              "name": "Validate user is unable to delete Patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f859699-4e10-4391-a113-e43f6b1f174a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "78a6b668-f1c0-48a1-b16f-bb14c3e32730"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3dd842b0-651d-443e-8dab-51a127e09b4e",
          "length": 110,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c0fac205-3931-44d5-b533-2285df64fffe",
          "scriptId": "d4cdbb09-2eae-4220-a330-3f4d98e9e6ff",
          "execution": "05c70fb3-4b28-4d81-8373-72f2f0f1546d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:107)",
          "checksum": "2fbd9fdcef8d6cf34ebbe57584d3d1b1",
          "id": "9071e465-a459-47d9-b294-9669822d1275",
          "timestamp": 1718334859660,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 107,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "93b156b3-5440-404f-af67-7d4972b7a946",
          "name": "Validate user is unable to delete Patient's data with incorrect query data",
          "request": {
            "url": {
              "path": [
                "delete-patient",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9642083-43b2-4e1f-aa35-a64b1be4a35d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                  "});"
                ],
                "_lastExecutionId": "bf5bdfe5-6cac-47de-a131-ee0cd78fb5b5"
              }
            }
          ]
        },
        "parent": {
          "id": "2152d56b-1f91-447a-b2ae-737b8cb48421",
          "name": "Deletes the information of Patient's data",
          "item": [
            {
              "id": "d23c770c-245f-41c0-9324-21a2117fe336",
              "name": "Validate user is able to delete Patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab81cd1c-ac92-4335-8bbd-6db4c7435a02",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient deleted successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36726ce7-8b77-48f3-9953-5f056f34c10b"
                  }
                }
              ]
            },
            {
              "id": "5a5c5e87-10d8-47b2-837f-8abdf7a3a9f4",
              "name": "Validate user is not able to delete Patient's data if already deleted.",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d4cdbb09-2eae-4220-a330-3f4d98e9e6ff",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "05c70fb3-4b28-4d81-8373-72f2f0f1546d"
                  }
                }
              ]
            },
            {
              "id": "93b156b3-5440-404f-af67-7d4972b7a946",
              "name": "Validate user is unable to delete Patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9642083-43b2-4e1f-aa35-a64b1be4a35d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "bf5bdfe5-6cac-47de-a131-ee0cd78fb5b5"
                  }
                }
              ]
            },
            {
              "id": "f1db8312-6013-42a9-916b-f19a2dadb6b4",
              "name": "Validate user is unable to delete Patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73e07a7a-4a5f-4f4f-84b9-2b401dcc64b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f90ea6ee-c6ac-4839-bee9-b454358bfc13"
                  }
                }
              ]
            },
            {
              "id": "4c1e823b-a22d-4a1f-b368-e4e2f76876fd",
              "name": "Validate user is unable to delete Patient's data as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcbcaca8-de5f-4423-a911-d180257ebc54",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4d39ccab-8244-4f5f-9300-ee525c4e8be1"
                  }
                }
              ]
            },
            {
              "id": "fd4e77bc-bb4f-4ca3-909b-9c611eb1aa3e",
              "name": "Validate user is unable to delete Patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f859699-4e10-4391-a113-e43f6b1f174a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "78a6b668-f1c0-48a1-b16f-bb14c3e32730"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "47e0ba7f-93c2-434f-b2ee-5e318f2260d7",
          "length": 110,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b48013ad-734d-46f9-be9a-b5a7e0895a72",
          "scriptId": "f9642083-43b2-4e1f-aa35-a64b1be4a35d",
          "execution": "bf5bdfe5-6cac-47de-a131-ee0cd78fb5b5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Authorization header is missing' to deeply equal 'Invalid id'",
          "stack": "AssertionError: expected 'Authorization header is missing' to deeply equal 'Invalid id'\n   at Object.eval sandbox-script.js:2:107)",
          "checksum": "ce8fb001930bd8b3c799501a58a6ee56",
          "id": "7814d655-0a49-443f-9dc6-55dcad540c8c",
          "timestamp": 1718334859662,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 107,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "93b156b3-5440-404f-af67-7d4972b7a946",
          "name": "Validate user is unable to delete Patient's data with incorrect query data",
          "request": {
            "url": {
              "path": [
                "delete-patient",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9642083-43b2-4e1f-aa35-a64b1be4a35d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                  "});"
                ],
                "_lastExecutionId": "bf5bdfe5-6cac-47de-a131-ee0cd78fb5b5"
              }
            }
          ]
        },
        "parent": {
          "id": "2152d56b-1f91-447a-b2ae-737b8cb48421",
          "name": "Deletes the information of Patient's data",
          "item": [
            {
              "id": "d23c770c-245f-41c0-9324-21a2117fe336",
              "name": "Validate user is able to delete Patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab81cd1c-ac92-4335-8bbd-6db4c7435a02",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient deleted successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36726ce7-8b77-48f3-9953-5f056f34c10b"
                  }
                }
              ]
            },
            {
              "id": "5a5c5e87-10d8-47b2-837f-8abdf7a3a9f4",
              "name": "Validate user is not able to delete Patient's data if already deleted.",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d4cdbb09-2eae-4220-a330-3f4d98e9e6ff",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "05c70fb3-4b28-4d81-8373-72f2f0f1546d"
                  }
                }
              ]
            },
            {
              "id": "93b156b3-5440-404f-af67-7d4972b7a946",
              "name": "Validate user is unable to delete Patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9642083-43b2-4e1f-aa35-a64b1be4a35d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "bf5bdfe5-6cac-47de-a131-ee0cd78fb5b5"
                  }
                }
              ]
            },
            {
              "id": "f1db8312-6013-42a9-916b-f19a2dadb6b4",
              "name": "Validate user is unable to delete Patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73e07a7a-4a5f-4f4f-84b9-2b401dcc64b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f90ea6ee-c6ac-4839-bee9-b454358bfc13"
                  }
                }
              ]
            },
            {
              "id": "4c1e823b-a22d-4a1f-b368-e4e2f76876fd",
              "name": "Validate user is unable to delete Patient's data as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcbcaca8-de5f-4423-a911-d180257ebc54",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4d39ccab-8244-4f5f-9300-ee525c4e8be1"
                  }
                }
              ]
            },
            {
              "id": "fd4e77bc-bb4f-4ca3-909b-9c611eb1aa3e",
              "name": "Validate user is unable to delete Patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f859699-4e10-4391-a113-e43f6b1f174a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "78a6b668-f1c0-48a1-b16f-bb14c3e32730"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "47e0ba7f-93c2-434f-b2ee-5e318f2260d7",
          "length": 110,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b48013ad-734d-46f9-be9a-b5a7e0895a72",
          "scriptId": "f9642083-43b2-4e1f-aa35-a64b1be4a35d",
          "execution": "bf5bdfe5-6cac-47de-a131-ee0cd78fb5b5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Method Not Allowed'",
          "stack": "AssertionError: expected undefined to deeply equal 'Method Not Allowed'\n   at Object.eval sandbox-script.js:2:110)",
          "checksum": "b0a0697eeadb68a87484e092d0213770",
          "id": "81eec46c-dcc3-4e06-9ab1-af45ab029dac",
          "timestamp": 1718334861940,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 110,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "fd4e77bc-bb4f-4ca3-909b-9c611eb1aa3e",
          "name": "Validate user is unable to delete Patient's data as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "delete-patient",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f859699-4e10-4391-a113-e43f6b1f174a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "78a6b668-f1c0-48a1-b16f-bb14c3e32730"
              }
            }
          ]
        },
        "parent": {
          "id": "2152d56b-1f91-447a-b2ae-737b8cb48421",
          "name": "Deletes the information of Patient's data",
          "item": [
            {
              "id": "d23c770c-245f-41c0-9324-21a2117fe336",
              "name": "Validate user is able to delete Patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab81cd1c-ac92-4335-8bbd-6db4c7435a02",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient deleted successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36726ce7-8b77-48f3-9953-5f056f34c10b"
                  }
                }
              ]
            },
            {
              "id": "5a5c5e87-10d8-47b2-837f-8abdf7a3a9f4",
              "name": "Validate user is not able to delete Patient's data if already deleted.",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d4cdbb09-2eae-4220-a330-3f4d98e9e6ff",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "05c70fb3-4b28-4d81-8373-72f2f0f1546d"
                  }
                }
              ]
            },
            {
              "id": "93b156b3-5440-404f-af67-7d4972b7a946",
              "name": "Validate user is unable to delete Patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9642083-43b2-4e1f-aa35-a64b1be4a35d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "bf5bdfe5-6cac-47de-a131-ee0cd78fb5b5"
                  }
                }
              ]
            },
            {
              "id": "f1db8312-6013-42a9-916b-f19a2dadb6b4",
              "name": "Validate user is unable to delete Patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73e07a7a-4a5f-4f4f-84b9-2b401dcc64b8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f90ea6ee-c6ac-4839-bee9-b454358bfc13"
                  }
                }
              ]
            },
            {
              "id": "4c1e823b-a22d-4a1f-b368-e4e2f76876fd",
              "name": "Validate user is unable to delete Patient's data as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcbcaca8-de5f-4423-a911-d180257ebc54",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4d39ccab-8244-4f5f-9300-ee525c4e8be1"
                  }
                }
              ]
            },
            {
              "id": "fd4e77bc-bb4f-4ca3-909b-9c611eb1aa3e",
              "name": "Validate user is unable to delete Patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "delete-patient",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f859699-4e10-4391-a113-e43f6b1f174a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "78a6b668-f1c0-48a1-b16f-bb14c3e32730"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "df392def-51b5-4238-854b-014525f2d39d",
          "length": 110,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "07a178e5-d68f-43e2-ad98-a3cc183493fb",
          "scriptId": "1f859699-4e10-4391-a113-e43f6b1f174a",
          "execution": "78a6b668-f1c0-48a1-b16f-bb14c3e32730"
        }
      }
    ],
    "error": null
  }
}